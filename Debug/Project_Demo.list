
Project_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800cfd8  0800cfd8  0001cfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4f0  0800d4f0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4f0  0800d4f0  0001d4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4f8  0800d4f8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4f8  0800d4f8  0001d4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4fc  0800d4fc  0001d4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001820  200001d8  0800d6d4  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019f8  0800d6d4  000219f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fc0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032fb  00000000  00000000  0003a207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001203  00000000  00000000  0003ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac8b  00000000  00000000  0003fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b98c  00000000  00000000  0006aabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001092dd  00000000  00000000  0008644a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007580  00000000  00000000  0018f728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00196ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cfbc 	.word	0x0800cfbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800cfbc 	.word	0x0800cfbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f002 f9af 	bl	800320c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 fb37 	bl	8001520 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb2:	f000 fb93 	bl	80015dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fe07 	bl	8001ac8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eba:	f000 fc95 	bl	80017e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ebe:	f000 fd65 	bl	800198c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000ec2:	f000 fdd1 	bl	8001a68 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000ec6:	f000 fccf 	bl	8001868 <MX_RTC_Init>
  MX_ADC1_Init();
 8000eca:	f000 fbb3 	bl	8001634 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ece:	f000 fc27 	bl	8001720 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 fd99 	bl	8001a08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4836      	ldr	r0, [pc, #216]	; (8000fb4 <main+0x110>)
 8000edc:	f003 ff92 	bl	8004e04 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, UART_Recieve_Buffer, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4935      	ldr	r1, [pc, #212]	; (8000fb8 <main+0x114>)
 8000ee4:	4835      	ldr	r0, [pc, #212]	; (8000fbc <main+0x118>)
 8000ee6:	f007 fdf7 	bl	8008ad8 <HAL_UART_Receive_IT>

  int track = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	67fb      	str	r3, [r7, #124]	; 0x7c

  int reset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	67bb      	str	r3, [r7, #120]	; 0x78
  ADPS_init();
 8000ef2:	f000 fed8 	bl	8001ca6 <ADPS_init>
  enableLightSensor(0);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 fff6 	bl	8001ee8 <enableLightSensor>
  getEntryCount();
 8000efc:	f001 f986 	bl	800220c <getEntryCount>

  char dateTime[9];
  int first,second,third;
  RTC_TimeTypeDef sTime = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f002 f9f6 	bl	8003304 <HAL_Delay>
	  if(hourlyReading){
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <main+0x11c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <main+0x86>
		  hourlyReading = 0;
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <main+0x11c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		  storeData();
 8000f26:	f001 f823 	bl	8001f70 <storeData>
	  }
	  UART_Recieve_Command[track] = circleBuffer[cirPos];
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <main+0x120>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <main+0x124>)
 8000f30:	5cd1      	ldrb	r1, [r2, r3]
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <main+0x128>)
 8000f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f36:	4413      	add	r3, r2
 8000f38:	460a      	mov	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]
	  if(UART_Recieve_Command[track] != 0x00)
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <main+0x128>)
 8000f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <main+0xac>
		  track++;
 8000f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f4e:	e015      	b.n	8000f7c <main+0xd8>

	  else{
		  reset++;
 8000f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f52:	3301      	adds	r3, #1
 8000f54:	67bb      	str	r3, [r7, #120]	; 0x78
		  if(reset >= 100){
 8000f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f58:	2b63      	cmp	r3, #99	; 0x63
 8000f5a:	dd0f      	ble.n	8000f7c <main+0xd8>
				track = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
				for(int i = 0; i < 20; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	677b      	str	r3, [r7, #116]	; 0x74
 8000f64:	e007      	b.n	8000f76 <main+0xd2>
				{
					UART_Recieve_Command[i] = 0x00;
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <main+0x128>)
 8000f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f72:	3301      	adds	r3, #1
 8000f74:	677b      	str	r3, [r7, #116]	; 0x74
 8000f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f78:	2b13      	cmp	r3, #19
 8000f7a:	ddf4      	ble.n	8000f66 <main+0xc2>
				}
		  }
	  }
	  //DATA AND TIME
	  if(track == 8){
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	f040 812b 	bne.w	80011da <main+0x336>
		  for(int i = 0; i < 8; i++){
 8000f84:	2300      	movs	r3, #0
 8000f86:	673b      	str	r3, [r7, #112]	; 0x70
 8000f88:	e031      	b.n	8000fee <main+0x14a>
			  dateTime[i] = UART_Recieve_Command[i];
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <main+0x128>)
 8000f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f8e:	4413      	add	r3, r2
 8000f90:	7819      	ldrb	r1, [r3, #0]
 8000f92:	f107 0218 	add.w	r2, r7, #24
 8000f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
			  if(dateTime[i] == ':')
 8000f9e:	f107 0218 	add.w	r2, r7, #24
 8000fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b3a      	cmp	r3, #58	; 0x3a
 8000faa:	d113      	bne.n	8000fd4 <main+0x130>
				  TimeFlag = 1;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <main+0x12c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e019      	b.n	8000fe8 <main+0x144>
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	2000185c 	.word	0x2000185c
 8000fbc:	20000420 	.word	0x20000420
 8000fc0:	2000189c 	.word	0x2000189c
 8000fc4:	20001890 	.word	0x20001890
 8000fc8:	200004d4 	.word	0x200004d4
 8000fcc:	200004c8 	.word	0x200004c8
 8000fd0:	20001894 	.word	0x20001894
			  else if(dateTime[i] == '/')
 8000fd4:	f107 0218 	add.w	r2, r7, #24
 8000fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b2f      	cmp	r3, #47	; 0x2f
 8000fe0:	d102      	bne.n	8000fe8 <main+0x144>
				  DateFlag = 1;
 8000fe2:	4bad      	ldr	r3, [pc, #692]	; (8001298 <main+0x3f4>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i < 8; i++){
 8000fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fea:	3301      	adds	r3, #1
 8000fec:	673b      	str	r3, [r7, #112]	; 0x70
 8000fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	ddca      	ble.n	8000f8a <main+0xe6>
		  }
		  dateTime[8] = '/';
 8000ff4:	232f      	movs	r3, #47	; 0x2f
 8000ff6:	f887 3020 	strb.w	r3, [r7, #32]
		  if(TimeFlag){
 8000ffa:	4ba8      	ldr	r3, [pc, #672]	; (800129c <main+0x3f8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d070      	beq.n	80010e4 <main+0x240>
			  char *tok;
			  tok = strtok(dateTime,":");
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	49a6      	ldr	r1, [pc, #664]	; (80012a0 <main+0x3fc>)
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fe8b 	bl	800ad24 <strtok>
 800100e:	6478      	str	r0, [r7, #68]	; 0x44
			  first = atoi(tok);
 8001010:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001012:	f009 f851 	bl	800a0b8 <atoi>
 8001016:	6438      	str	r0, [r7, #64]	; 0x40
			  tok = strtok(NULL,":");
 8001018:	49a1      	ldr	r1, [pc, #644]	; (80012a0 <main+0x3fc>)
 800101a:	2000      	movs	r0, #0
 800101c:	f009 fe82 	bl	800ad24 <strtok>
 8001020:	6478      	str	r0, [r7, #68]	; 0x44
			  second = atoi(tok);
 8001022:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001024:	f009 f848 	bl	800a0b8 <atoi>
 8001028:	63f8      	str	r0, [r7, #60]	; 0x3c
			  tok = strtok(NULL,"/");
 800102a:	499e      	ldr	r1, [pc, #632]	; (80012a4 <main+0x400>)
 800102c:	2000      	movs	r0, #0
 800102e:	f009 fe79 	bl	800ad24 <strtok>
 8001032:	6478      	str	r0, [r7, #68]	; 0x44
			  third = atoi(tok);
 8001034:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001036:	f009 f83f 	bl	800a0b8 <atoi>
 800103a:	63b8      	str	r0, [r7, #56]	; 0x38
			  sTime.Hours = (first % 10 * 0x01) + ((first / 10) * 0x10);
 800103c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800103e:	4b9a      	ldr	r3, [pc, #616]	; (80012a8 <main+0x404>)
 8001040:	fb83 1302 	smull	r1, r3, r3, r2
 8001044:	1099      	asrs	r1, r3, #2
 8001046:	17d3      	asrs	r3, r2, #31
 8001048:	1ac9      	subs	r1, r1, r3
 800104a:	460b      	mov	r3, r1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	1ad1      	subs	r1, r2, r3
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001058:	4993      	ldr	r1, [pc, #588]	; (80012a8 <main+0x404>)
 800105a:	fb81 0103 	smull	r0, r1, r1, r3
 800105e:	1089      	asrs	r1, r1, #2
 8001060:	17db      	asrs	r3, r3, #31
 8001062:	1acb      	subs	r3, r1, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	713b      	strb	r3, [r7, #4]
			  sTime.Minutes = (second % 10 * 0x01) + ((second / 10) * 0x10);
 8001070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001072:	4b8d      	ldr	r3, [pc, #564]	; (80012a8 <main+0x404>)
 8001074:	fb83 1302 	smull	r1, r3, r3, r2
 8001078:	1099      	asrs	r1, r3, #2
 800107a:	17d3      	asrs	r3, r2, #31
 800107c:	1ac9      	subs	r1, r1, r3
 800107e:	460b      	mov	r3, r1
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	1ad1      	subs	r1, r2, r3
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108c:	4986      	ldr	r1, [pc, #536]	; (80012a8 <main+0x404>)
 800108e:	fb81 0103 	smull	r0, r1, r1, r3
 8001092:	1089      	asrs	r1, r1, #2
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1acb      	subs	r3, r1, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	717b      	strb	r3, [r7, #5]
			  sTime.Seconds = (third % 10 * 0x01) + ((third / 10) * 0x10);
 80010a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010a6:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <main+0x404>)
 80010a8:	fb83 1302 	smull	r1, r3, r3, r2
 80010ac:	1099      	asrs	r1, r3, #2
 80010ae:	17d3      	asrs	r3, r2, #31
 80010b0:	1ac9      	subs	r1, r1, r3
 80010b2:	460b      	mov	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1ad1      	subs	r1, r2, r3
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c0:	4979      	ldr	r1, [pc, #484]	; (80012a8 <main+0x404>)
 80010c2:	fb81 0103 	smull	r0, r1, r1, r3
 80010c6:	1089      	asrs	r1, r1, #2
 80010c8:	17db      	asrs	r3, r3, #31
 80010ca:	1acb      	subs	r3, r1, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	71bb      	strb	r3, [r7, #6]
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2201      	movs	r2, #1
 80010dc:	4619      	mov	r1, r3
 80010de:	4873      	ldr	r0, [pc, #460]	; (80012ac <main+0x408>)
 80010e0:	f006 f8c0 	bl	8007264 <HAL_RTC_SetTime>

		  }
		  if(DateFlag){
 80010e4:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <main+0x3f4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d070      	beq.n	80011ce <main+0x32a>
			  char *tok;
			  tok = strtok(dateTime,"/");
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	496c      	ldr	r1, [pc, #432]	; (80012a4 <main+0x400>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 fe16 	bl	800ad24 <strtok>
 80010f8:	6378      	str	r0, [r7, #52]	; 0x34
			  first = atoi(tok);
 80010fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010fc:	f008 ffdc 	bl	800a0b8 <atoi>
 8001100:	6438      	str	r0, [r7, #64]	; 0x40
			  tok = strtok(NULL,"/");
 8001102:	4968      	ldr	r1, [pc, #416]	; (80012a4 <main+0x400>)
 8001104:	2000      	movs	r0, #0
 8001106:	f009 fe0d 	bl	800ad24 <strtok>
 800110a:	6378      	str	r0, [r7, #52]	; 0x34
			  second = atoi(tok);
 800110c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800110e:	f008 ffd3 	bl	800a0b8 <atoi>
 8001112:	63f8      	str	r0, [r7, #60]	; 0x3c
			  tok = strtok(NULL,"/");
 8001114:	4963      	ldr	r1, [pc, #396]	; (80012a4 <main+0x400>)
 8001116:	2000      	movs	r0, #0
 8001118:	f009 fe04 	bl	800ad24 <strtok>
 800111c:	6378      	str	r0, [r7, #52]	; 0x34
			  third = atoi(tok);
 800111e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001120:	f008 ffca 	bl	800a0b8 <atoi>
 8001124:	63b8      	str	r0, [r7, #56]	; 0x38
			  sDate.Month = (first % 10 * 0x01) + ((first / 10) * 0x10);;
 8001126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001128:	4b5f      	ldr	r3, [pc, #380]	; (80012a8 <main+0x404>)
 800112a:	fb83 1302 	smull	r1, r3, r3, r2
 800112e:	1099      	asrs	r1, r3, #2
 8001130:	17d3      	asrs	r3, r2, #31
 8001132:	1ac9      	subs	r1, r1, r3
 8001134:	460b      	mov	r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	1ad1      	subs	r1, r2, r3
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001142:	4959      	ldr	r1, [pc, #356]	; (80012a8 <main+0x404>)
 8001144:	fb81 0103 	smull	r0, r1, r1, r3
 8001148:	1089      	asrs	r1, r1, #2
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4413      	add	r3, r2
 8001156:	b2db      	uxtb	r3, r3
 8001158:	707b      	strb	r3, [r7, #1]
			  sDate.Date = (second % 10 * 0x01) + ((second / 10) * 0x10);
 800115a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800115c:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <main+0x404>)
 800115e:	fb83 1302 	smull	r1, r3, r3, r2
 8001162:	1099      	asrs	r1, r3, #2
 8001164:	17d3      	asrs	r3, r2, #31
 8001166:	1ac9      	subs	r1, r1, r3
 8001168:	460b      	mov	r3, r1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	1ad1      	subs	r1, r2, r3
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	494c      	ldr	r1, [pc, #304]	; (80012a8 <main+0x404>)
 8001178:	fb81 0103 	smull	r0, r1, r1, r3
 800117c:	1089      	asrs	r1, r1, #2
 800117e:	17db      	asrs	r3, r3, #31
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	70bb      	strb	r3, [r7, #2]
			  sDate.Year = (third % 10 * 0x01) + ((third / 10) * 0x10);
 800118e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <main+0x404>)
 8001192:	fb83 1302 	smull	r1, r3, r3, r2
 8001196:	1099      	asrs	r1, r3, #2
 8001198:	17d3      	asrs	r3, r2, #31
 800119a:	1ac9      	subs	r1, r1, r3
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad1      	subs	r1, r2, r3
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011aa:	493f      	ldr	r1, [pc, #252]	; (80012a8 <main+0x404>)
 80011ac:	fb81 0103 	smull	r0, r1, r1, r3
 80011b0:	1089      	asrs	r1, r1, #2
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1acb      	subs	r3, r1, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	70fb      	strb	r3, [r7, #3]
			  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80011c2:	463b      	mov	r3, r7
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	4838      	ldr	r0, [pc, #224]	; (80012ac <main+0x408>)
 80011ca:	f006 f944 	bl	8007456 <HAL_RTC_SetDate>
		  }
		  TimeFlag = 0;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <main+0x3f8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
		  DateFlag = 0;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <main+0x3f4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	  }

	  circleBuffer[cirPos] = 0x00;
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <main+0x40c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a35      	ldr	r2, [pc, #212]	; (80012b4 <main+0x410>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	54d1      	strb	r1, [r2, r3]
	  if(cirPos != Buffer_Count)
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <main+0x40c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <main+0x414>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d004      	beq.n	80011fa <main+0x356>
	  cirPos++;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <main+0x40c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <main+0x40c>)
 80011f8:	6013      	str	r3, [r2, #0]
	  if(cirPos == 4000)
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <main+0x40c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001202:	d102      	bne.n	800120a <main+0x366>
		  cirPos = 0;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <main+0x40c>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
	  if(track == 10)
 800120a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d101      	bne.n	8001214 <main+0x370>
		  track = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	67fb      	str	r3, [r7, #124]	; 0x7c
	  if(track == 3)
 8001214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001216:	2b03      	cmp	r3, #3
 8001218:	d101      	bne.n	800121e <main+0x37a>
		  track = 3;
 800121a:	2303      	movs	r3, #3
 800121c:	67fb      	str	r3, [r7, #124]	; 0x7c


	  if(channel == 0){
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <main+0x418>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <main+0x388>
		  who = &huart3;
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <main+0x41c>)
 8001228:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <main+0x420>)
 800122a:	601a      	str	r2, [r3, #0]
	  }
	    if(!strncmp((char*)UART_Recieve_Command, "read", 4)){
 800122c:	2204      	movs	r2, #4
 800122e:	4926      	ldr	r1, [pc, #152]	; (80012c8 <main+0x424>)
 8001230:	4826      	ldr	r0, [pc, #152]	; (80012cc <main+0x428>)
 8001232:	f009 fd64 	bl	800acfe <strncmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d159      	bne.n	80012f0 <main+0x44c>
	    	storeData();
 800123c:	f000 fe98 	bl	8001f70 <storeData>
			track = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	67fb      	str	r3, [r7, #124]	; 0x7c
			char *MSGNO = "DATA READ";
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <main+0x42c>)
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i = 0; i < strlen(MSGNO); i++){
 8001248:	2300      	movs	r3, #0
 800124a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800124c:	e00f      	b.n	800126e <main+0x3ca>
				tempSend = MSGNO[i];
 800124e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	4413      	add	r3, r2
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <main+0x430>)
 8001258:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <main+0x41c>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	2364      	movs	r3, #100	; 0x64
 8001260:	2201      	movs	r2, #1
 8001262:	491c      	ldr	r1, [pc, #112]	; (80012d4 <main+0x430>)
 8001264:	f007 fbae 	bl	80089c4 <HAL_UART_Transmit>
			for(int i = 0; i < strlen(MSGNO); i++){
 8001268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800126a:	3301      	adds	r3, #1
 800126c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800126e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001270:	f7fe fffe 	bl	8000270 <strlen>
 8001274:	4602      	mov	r2, r0
 8001276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001278:	429a      	cmp	r2, r3
 800127a:	d8e8      	bhi.n	800124e <main+0x3aa>
			}
			tempSend = '\n';
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <main+0x430>)
 800127e:	220a      	movs	r2, #10
 8001280:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <main+0x41c>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	2364      	movs	r3, #100	; 0x64
 8001288:	2201      	movs	r2, #1
 800128a:	4912      	ldr	r1, [pc, #72]	; (80012d4 <main+0x430>)
 800128c:	f007 fb9a 	bl	80089c4 <HAL_UART_Transmit>
			for(int i = 0; i < 20; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
 8001294:	e028      	b.n	80012e8 <main+0x444>
 8001296:	bf00      	nop
 8001298:	20001898 	.word	0x20001898
 800129c:	20001894 	.word	0x20001894
 80012a0:	0800cfd8 	.word	0x0800cfd8
 80012a4:	0800cfdc 	.word	0x0800cfdc
 80012a8:	66666667 	.word	0x66666667
 80012ac:	20000310 	.word	0x20000310
 80012b0:	20001890 	.word	0x20001890
 80012b4:	200004d4 	.word	0x200004d4
 80012b8:	20001860 	.word	0x20001860
 80012bc:	2000186c 	.word	0x2000186c
 80012c0:	20001868 	.word	0x20001868
 80012c4:	20000420 	.word	0x20000420
 80012c8:	0800cfe0 	.word	0x0800cfe0
 80012cc:	200004c8 	.word	0x200004c8
 80012d0:	0800cfe8 	.word	0x0800cfe8
 80012d4:	20001864 	.word	0x20001864
			{
				UART_Recieve_Command[i] = 0x00;
 80012d8:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <main+0x654>)
 80012da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012dc:	4413      	add	r3, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++)
 80012e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012e4:	3301      	adds	r3, #1
 80012e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80012e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ea:	2b13      	cmp	r3, #19
 80012ec:	ddf4      	ble.n	80012d8 <main+0x434>
 80012ee:	e0fe      	b.n	80014ee <main+0x64a>
			}
	    }
	    else if(!strncmp((char*)UART_Recieve_Command, "last", 4)){
 80012f0:	2204      	movs	r2, #4
 80012f2:	4982      	ldr	r1, [pc, #520]	; (80014fc <main+0x658>)
 80012f4:	4880      	ldr	r0, [pc, #512]	; (80014f8 <main+0x654>)
 80012f6:	f009 fd02 	bl	800acfe <strncmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d143      	bne.n	8001388 <main+0x4e4>
	    	if(total_Entries == 0){
 8001300:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <main+0x65c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11c      	bne.n	8001342 <main+0x49e>
	    		char *MSGNO = "NO ENTRIES";
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <main+0x660>)
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
	    		for(int i = 0; i < strlen(MSGNO); i++){
 800130c:	2300      	movs	r3, #0
 800130e:	667b      	str	r3, [r7, #100]	; 0x64
 8001310:	e00f      	b.n	8001332 <main+0x48e>
	    			tempSend = MSGNO[i];
 8001312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001316:	4413      	add	r3, r2
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <main+0x664>)
 800131c:	701a      	strb	r2, [r3, #0]
	    			HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <main+0x668>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	2201      	movs	r2, #1
 8001326:	4978      	ldr	r1, [pc, #480]	; (8001508 <main+0x664>)
 8001328:	f007 fb4c 	bl	80089c4 <HAL_UART_Transmit>
	    		for(int i = 0; i < strlen(MSGNO); i++){
 800132c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800132e:	3301      	adds	r3, #1
 8001330:	667b      	str	r3, [r7, #100]	; 0x64
 8001332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001334:	f7fe ff9c 	bl	8000270 <strlen>
 8001338:	4602      	mov	r2, r0
 800133a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800133c:	429a      	cmp	r2, r3
 800133e:	d8e8      	bhi.n	8001312 <main+0x46e>
 8001340:	e007      	b.n	8001352 <main+0x4ae>
	    		}
	    	}else{
	    		readEntry(total_Entries, who);
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <main+0x65c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a71      	ldr	r2, [pc, #452]	; (800150c <main+0x668>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fff9 	bl	8002344 <readEntry>
	    	}
	    	tempSend = '\n';
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <main+0x664>)
 8001354:	220a      	movs	r2, #10
 8001356:	701a      	strb	r2, [r3, #0]
	    	HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 8001358:	4b6c      	ldr	r3, [pc, #432]	; (800150c <main+0x668>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2201      	movs	r2, #1
 8001360:	4969      	ldr	r1, [pc, #420]	; (8001508 <main+0x664>)
 8001362:	f007 fb2f 	bl	80089c4 <HAL_UART_Transmit>
	    	track = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i = 0; i < 20; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
 800136e:	e007      	b.n	8001380 <main+0x4dc>
			{
				UART_Recieve_Command[i] = 0x00;
 8001370:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <main+0x654>)
 8001372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001374:	4413      	add	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++)
 800137a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800137c:	3301      	adds	r3, #1
 800137e:	663b      	str	r3, [r7, #96]	; 0x60
 8001380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001382:	2b13      	cmp	r3, #19
 8001384:	ddf4      	ble.n	8001370 <main+0x4cc>
 8001386:	e0b2      	b.n	80014ee <main+0x64a>
			}
	    }
	    else if(!strncmp((char*)UART_Recieve_Command, "all", 3)){
 8001388:	2203      	movs	r2, #3
 800138a:	4961      	ldr	r1, [pc, #388]	; (8001510 <main+0x66c>)
 800138c:	485a      	ldr	r0, [pc, #360]	; (80014f8 <main+0x654>)
 800138e:	f009 fcb6 	bl	800acfe <strncmp>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d14c      	bne.n	8001432 <main+0x58e>
	    	if(total_Entries == 0){
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <main+0x65c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11c      	bne.n	80013da <main+0x536>
	    		char *MSGNO = "NO ENTRIES";
 80013a0:	4b58      	ldr	r3, [pc, #352]	; (8001504 <main+0x660>)
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(int i = 0; i < strlen(MSGNO); i++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013a8:	e00f      	b.n	80013ca <main+0x526>
					tempSend = MSGNO[i];
 80013aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ae:	4413      	add	r3, r2
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <main+0x664>)
 80013b4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 80013b6:	4b55      	ldr	r3, [pc, #340]	; (800150c <main+0x668>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	2201      	movs	r2, #1
 80013be:	4952      	ldr	r1, [pc, #328]	; (8001508 <main+0x664>)
 80013c0:	f007 fb00 	bl	80089c4 <HAL_UART_Transmit>
				for(int i = 0; i < strlen(MSGNO); i++){
 80013c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c6:	3301      	adds	r3, #1
 80013c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013cc:	f7fe ff50 	bl	8000270 <strlen>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8e8      	bhi.n	80013aa <main+0x506>
 80013d8:	e01a      	b.n	8001410 <main+0x56c>
				}
			}else{
				for(int i = 1; i <= total_Entries; i++){
 80013da:	2301      	movs	r3, #1
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80013de:	e012      	b.n	8001406 <main+0x562>
					readEntry(i, who);
 80013e0:	4b4a      	ldr	r3, [pc, #296]	; (800150c <main+0x668>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80013e8:	f000 ffac 	bl	8002344 <readEntry>
					tempSend = '\n';
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <main+0x664>)
 80013ee:	220a      	movs	r2, #10
 80013f0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <main+0x668>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	2201      	movs	r2, #1
 80013fa:	4943      	ldr	r1, [pc, #268]	; (8001508 <main+0x664>)
 80013fc:	f007 fae2 	bl	80089c4 <HAL_UART_Transmit>
				for(int i = 1; i <= total_Entries; i++){
 8001400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001402:	3301      	adds	r3, #1
 8001404:	65bb      	str	r3, [r7, #88]	; 0x58
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <main+0x65c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800140c:	429a      	cmp	r2, r3
 800140e:	dde7      	ble.n	80013e0 <main+0x53c>
				}

			}

			track = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i = 0; i < 20; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	657b      	str	r3, [r7, #84]	; 0x54
 8001418:	e007      	b.n	800142a <main+0x586>
			{
				UART_Recieve_Command[i] = 0x00;
 800141a:	4a37      	ldr	r2, [pc, #220]	; (80014f8 <main+0x654>)
 800141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++)
 8001424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001426:	3301      	adds	r3, #1
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
 800142a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142c:	2b13      	cmp	r3, #19
 800142e:	ddf4      	ble.n	800141a <main+0x576>
 8001430:	e05d      	b.n	80014ee <main+0x64a>
			}

	    }
	    else if(!strncmp((char*)UART_Recieve_Command , "entries", 7)){
 8001432:	2207      	movs	r2, #7
 8001434:	4937      	ldr	r1, [pc, #220]	; (8001514 <main+0x670>)
 8001436:	4830      	ldr	r0, [pc, #192]	; (80014f8 <main+0x654>)
 8001438:	f009 fc61 	bl	800acfe <strncmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d112      	bne.n	8001468 <main+0x5c4>
	    	totalEntries();
 8001442:	f001 f89f 	bl	8002584 <totalEntries>
	    	track = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i = 0; i < 20; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	653b      	str	r3, [r7, #80]	; 0x50
 800144e:	e007      	b.n	8001460 <main+0x5bc>
			{
				UART_Recieve_Command[i] = 0x00;
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <main+0x654>)
 8001452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001454:	4413      	add	r3, r2
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++)
 800145a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145c:	3301      	adds	r3, #1
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
 8001460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001462:	2b13      	cmp	r3, #19
 8001464:	ddf4      	ble.n	8001450 <main+0x5ac>
 8001466:	e042      	b.n	80014ee <main+0x64a>
			}
	    }

	    else if(!strncmp((char*)UART_Recieve_Command, "clear", 5)){
 8001468:	2205      	movs	r2, #5
 800146a:	492b      	ldr	r1, [pc, #172]	; (8001518 <main+0x674>)
 800146c:	4822      	ldr	r0, [pc, #136]	; (80014f8 <main+0x654>)
 800146e:	f009 fc46 	bl	800acfe <strncmp>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13a      	bne.n	80014ee <main+0x64a>
	    		clearMemory();
 8001478:	f001 f8bc 	bl	80025f4 <clearMemory>
	    		total_Entries = 0;
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <main+0x65c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
				char *MSGNO = "DATA CLEARED";
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <main+0x678>)
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
				for(int i = 0; i < strlen(MSGNO); i++){
 8001486:	2300      	movs	r3, #0
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800148a:	e00f      	b.n	80014ac <main+0x608>
					tempSend = MSGNO[i];
 800148c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800148e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001490:	4413      	add	r3, r2
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <main+0x664>)
 8001496:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <main+0x668>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	2201      	movs	r2, #1
 80014a0:	4919      	ldr	r1, [pc, #100]	; (8001508 <main+0x664>)
 80014a2:	f007 fa8f 	bl	80089c4 <HAL_UART_Transmit>
				for(int i = 0; i < strlen(MSGNO); i++){
 80014a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a8:	3301      	adds	r3, #1
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014ae:	f7fe fedf 	bl	8000270 <strlen>
 80014b2:	4602      	mov	r2, r0
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8e8      	bhi.n	800148c <main+0x5e8>
				}
				tempSend = '\n';
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <main+0x664>)
 80014bc:	220a      	movs	r2, #10
 80014be:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <main+0x668>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	2201      	movs	r2, #1
 80014c8:	490f      	ldr	r1, [pc, #60]	; (8001508 <main+0x664>)
 80014ca:	f007 fa7b 	bl	80089c4 <HAL_UART_Transmit>
				track = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	67fb      	str	r3, [r7, #124]	; 0x7c
				for(int i = 0; i < 20; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80014d6:	e007      	b.n	80014e8 <main+0x644>
				{
					UART_Recieve_Command[i] = 0x00;
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <main+0x654>)
 80014da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014dc:	4413      	add	r3, r2
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 80014e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e4:	3301      	adds	r3, #1
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80014e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ea:	2b13      	cmp	r3, #19
 80014ec:	ddf4      	ble.n	80014d8 <main+0x634>
				}
	    	}
	    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2000      	movs	r0, #0
 80014f2:	f004 fa83 	bl	80059fc <HAL_PWR_EnterSLEEPMode>
	  HAL_Delay(100);
 80014f6:	e50c      	b.n	8000f12 <main+0x6e>
 80014f8:	200004c8 	.word	0x200004c8
 80014fc:	0800cff4 	.word	0x0800cff4
 8001500:	2000188c 	.word	0x2000188c
 8001504:	0800cffc 	.word	0x0800cffc
 8001508:	20001864 	.word	0x20001864
 800150c:	20001868 	.word	0x20001868
 8001510:	0800d008 	.word	0x0800d008
 8001514:	0800d00c 	.word	0x0800d00c
 8001518:	0800d014 	.word	0x0800d014
 800151c:	0800d01c 	.word	0x0800d01c

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2244      	movs	r2, #68	; 0x44
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f009 fbdd 	bl	800acee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001546:	f004 fa9b 	bl	8005a80 <HAL_PWREx_ControlVoltageScaling>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001550:	f001 faac 	bl	8002aac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001554:	f004 fa42 	bl	80059dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <SystemClock_Config+0xb8>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <SystemClock_Config+0xb8>)
 8001560:	f023 0318 	bic.w	r3, r3, #24
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001568:	231e      	movs	r3, #30
 800156a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001576:	2310      	movs	r3, #16
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800157e:	2301      	movs	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fb12 	bl	8005bbc <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800159e:	f001 fa85 	bl	8002aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 feda 	bl	8006374 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015c6:	f001 fa71 	bl	8002aac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015ca:	f005 fbe1 	bl	8006d90 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015ce:	bf00      	nop
 80015d0:	3758      	adds	r7, #88	; 0x58
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	; 0x88
 80015e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2288      	movs	r2, #136	; 0x88
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f009 fb80 	bl	800acee <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80015fa:	2302      	movs	r3, #2
 80015fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001602:	2308      	movs	r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001606:	2307      	movs	r3, #7
 8001608:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001616:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4618      	mov	r0, r3
 800161c:	f005 f8ce 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001626:	f001 fa41 	bl	8002aac <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3788      	adds	r7, #136	; 0x88
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001658:	4a2f      	ldr	r2, [pc, #188]	; (8001718 <MX_ADC1_Init+0xe4>)
 800165a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <MX_ADC1_Init+0xe0>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <MX_ADC1_Init+0xe0>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001676:	2204      	movs	r2, #4
 8001678:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <MX_ADC1_Init+0xe0>)
 800167c:	2200      	movs	r2, #0
 800167e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001688:	2201      	movs	r2, #1
 800168a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_ADC1_Init+0xe0>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_ADC1_Init+0xe0>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_ADC1_Init+0xe0>)
 800169c:	2200      	movs	r2, #0
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b6:	4817      	ldr	r0, [pc, #92]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016b8:	f002 f82c 	bl	8003714 <HAL_ADC_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016c2:	f001 f9f3 	bl	8002aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4810      	ldr	r0, [pc, #64]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016d2:	f002 ffad 	bl	8004630 <HAL_ADCEx_MultiModeConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016dc:	f001 f9e6 	bl	8002aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_ADC1_Init+0xe8>)
 80016e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e4:	2306      	movs	r3, #6
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ec:	237f      	movs	r3, #127	; 0x7f
 80016ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f0:	2304      	movs	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_ADC1_Init+0xe0>)
 80016fe:	f002 faf9 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001708:	f001 f9d0 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200001f4 	.word	0x200001f4
 8001718:	50040000 	.word	0x50040000
 800171c:	19200040 	.word	0x19200040

08001720 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <MX_ADC2_Init+0xc0>)
 800173a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_ADC2_Init+0xbc>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_ADC2_Init+0xbc>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001756:	2204      	movs	r2, #4
 8001758:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_ADC2_Init+0xbc>)
 800175c:	2200      	movs	r2, #0
 800175e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001762:	2200      	movs	r2, #0
 8001764:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001768:	2201      	movs	r2, #1
 800176a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_ADC2_Init+0xbc>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_ADC2_Init+0xbc>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_ADC2_Init+0xbc>)
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_ADC2_Init+0xbc>)
 8001798:	f001 ffbc 	bl	8003714 <HAL_ADC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80017a2:	f001 f983 	bl	8002aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_ADC2_Init+0xc4>)
 80017a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017aa:	2306      	movs	r3, #6
 80017ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b2:	237f      	movs	r3, #127	; 0x7f
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017b6:	2304      	movs	r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_ADC2_Init+0xbc>)
 80017c4:	f002 fa96 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80017ce:	f001 f96d 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000258 	.word	0x20000258
 80017e0:	50040100 	.word	0x50040100
 80017e4:	1d500080 	.word	0x1d500080

080017e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_I2C1_Init+0x74>)
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MX_I2C1_Init+0x78>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_I2C1_Init+0x74>)
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <MX_I2C1_Init+0x7c>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_I2C1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_I2C1_Init+0x74>)
 8001800:	2201      	movs	r2, #1
 8001802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_I2C1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_I2C1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <MX_I2C1_Init+0x74>)
 8001824:	f003 fb06 	bl	8004e34 <HAL_I2C_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800182e:	f001 f93d 	bl	8002aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <MX_I2C1_Init+0x74>)
 8001836:	f004 f839 	bl	80058ac <HAL_I2CEx_ConfigAnalogFilter>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001840:	f001 f934 	bl	8002aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_I2C1_Init+0x74>)
 8001848:	f004 f87b 	bl	8005942 <HAL_I2CEx_ConfigDigitalFilter>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001852:	f001 f92b 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200002bc 	.word	0x200002bc
 8001860:	40005400 	.word	0x40005400
 8001864:	00100d14 	.word	0x00100d14

08001868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b092      	sub	sp, #72	; 0x48
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800186e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	222c      	movs	r2, #44	; 0x2c
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f009 fa30 	bl	800acee <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <MX_RTC_Init+0x118>)
 8001890:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <MX_RTC_Init+0x11c>)
 8001892:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <MX_RTC_Init+0x118>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <MX_RTC_Init+0x118>)
 800189c:	227f      	movs	r2, #127	; 0x7f
 800189e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018a0:	4b37      	ldr	r3, [pc, #220]	; (8001980 <MX_RTC_Init+0x118>)
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <MX_RTC_Init+0x118>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <MX_RTC_Init+0x118>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <MX_RTC_Init+0x118>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <MX_RTC_Init+0x118>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018be:	4830      	ldr	r0, [pc, #192]	; (8001980 <MX_RTC_Init+0x118>)
 80018c0:	f005 fc48 	bl	8007154 <HAL_RTC_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80018ca:	f001 f8ef 	bl	8002aac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 80018ce:	2322      	movs	r3, #34	; 0x22
 80018d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x59;
 80018d4:	2359      	movs	r3, #89	; 0x59
 80018d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x55;
 80018da:	2355      	movs	r3, #85	; 0x55
 80018dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ec:	2201      	movs	r2, #1
 80018ee:	4619      	mov	r1, r3
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <MX_RTC_Init+0x118>)
 80018f2:	f005 fcb7 	bl	8007264 <HAL_RTC_SetTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80018fc:	f001 f8d6 	bl	8002aac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001900:	2306      	movs	r3, #6
 8001902:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_FEBRUARY;
 8001906:	2302      	movs	r3, #2
 8001908:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x17;
 800190c:	2317      	movs	r3, #23
 800190e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x24;
 8001912:	2324      	movs	r3, #36	; 0x24
 8001914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191c:	2201      	movs	r2, #1
 800191e:	4619      	mov	r1, r3
 8001920:	4817      	ldr	r0, [pc, #92]	; (8001980 <MX_RTC_Init+0x118>)
 8001922:	f005 fd98 	bl	8007456 <HAL_RTC_SetDate>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800192c:	f001 f8be 	bl	8002aac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001930:	2300      	movs	r3, #0
 8001932:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001934:	2300      	movs	r3, #0
 8001936:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001938:	2300      	movs	r3, #0
 800193a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_RTC_Init+0x120>)
 800194a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2201      	movs	r2, #1
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_RTC_Init+0x118>)
 8001968:	f005 fe4a 	bl	8007600 <HAL_RTC_SetAlarm_IT>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001972:	f001 f89b 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3748      	adds	r7, #72	; 0x48
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000310 	.word	0x20000310
 8001984:	40002800 	.word	0x40002800
 8001988:	80800000 	.word	0x80800000

0800198c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_SPI2_Init+0x74>)
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <MX_SPI2_Init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_SPI2_Init+0x74>)
 8001998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800199c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ec:	f006 f86e 	bl	8007acc <HAL_SPI_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019f6:	f001 f859 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000334 	.word	0x20000334
 8001a04:	40003800 	.word	0x40003800

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <MX_USART1_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a4c:	f006 ff6c 	bl	8008928 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a56:	f001 f829 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000398 	.word	0x20000398
 8001a64:	40013800 	.word	0x40013800

08001a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <MX_USART3_UART_Init+0x5c>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a74:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_USART3_UART_Init+0x58>)
 8001aac:	f006 ff3c 	bl	8008928 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ab6:	f000 fff9 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000420 	.word	0x20000420
 8001ac4:	40004800 	.word	0x40004800

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_GPIO_Init+0xc0>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2101      	movs	r1, #1
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <MX_GPIO_Init+0xc4>)
 8001b44:	f003 f95e 	bl	8004e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_GPIO_Init+0xc8>)
 8001b60:	f002 ffa6 	bl	8004ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_GPIO_Init+0xc4>)
 8001b7c:	f002 ff98 	bl	8004ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800

08001b94 <writeDataByte>:

/* USER CODE BEGIN 4 */
void writeDataByte(uint8_t reg, uint8_t val){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t send[2];
	send[0] = reg;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	733b      	strb	r3, [r7, #12]
	send[1] = val;
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)APDS9960_I2C_ADDR, send,sizeof(send), 1000);
 8001bac:	f107 020c 	add.w	r2, r7, #12
 8001bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	2172      	movs	r1, #114	; 0x72
 8001bba:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <writeDataByte+0x34>)
 8001bbc:	f003 f9d6 	bl	8004f6c <HAL_I2C_Master_Transmit>
	//HAL_Delay(100);
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200002bc 	.word	0x200002bc

08001bcc <readDataByte>:
void readDataByte(uint8_t reg, uint8_t* val){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)APDS9960_I2C_ADDR, &reg,sizeof(reg), 1000);
 8001bd8:	1dfa      	adds	r2, r7, #7
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	2172      	movs	r1, #114	; 0x72
 8001be4:	4807      	ldr	r0, [pc, #28]	; (8001c04 <readDataByte+0x38>)
 8001be6:	f003 f9c1 	bl	8004f6c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)APDS9960_I2C_ADDR, val,1, 1000);
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	2172      	movs	r1, #114	; 0x72
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <readDataByte+0x38>)
 8001bf8:	f003 fad0 	bl	800519c <HAL_I2C_Master_Receive>
	//HAL_Delay(100);
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002bc 	.word	0x200002bc

08001c08 <setMode>:
void setMode(uint8_t mode, uint8_t enable){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;

	reg_val = getMode();
 8001c18:	f000 f838 	bl	8001c8c <getMode>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]

	enable = enable & 0x01;
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	71bb      	strb	r3, [r7, #6]
	if(mode >= 0 && mode <= 6){
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d81a      	bhi.n	8001c64 <setMode+0x5c>
		if(enable){
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <setMode+0x42>
			reg_val |= (1 << mode);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2201      	movs	r2, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e017      	b.n	8001c7a <setMode+0x72>
		}else {
			reg_val &= ~(1 << mode);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e00a      	b.n	8001c7a <setMode+0x72>
		}
	} else if( mode == ALL){
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b07      	cmp	r3, #7
 8001c68:	d107      	bne.n	8001c7a <setMode+0x72>
		if(enable){
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <setMode+0x6e>
			reg_val = 0x7F;
 8001c70:	237f      	movs	r3, #127	; 0x7f
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <setMode+0x72>
		} else {
			reg_val = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
		}
	}

	writeDataByte(ENABLE, reg_val);
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2080      	movs	r0, #128	; 0x80
 8001c80:	f7ff ff88 	bl	8001b94 <writeDataByte>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <getMode>:
uint8_t getMode(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
	uint8_t enable_value;

	readDataByte(ENABLE, &enable_value);
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	4619      	mov	r1, r3
 8001c96:	2080      	movs	r0, #128	; 0x80
 8001c98:	f7ff ff98 	bl	8001bcc <readDataByte>
	return enable_value;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ADPS_init>:
void ADPS_init(){
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
	setMode(ALL, OFF);
 8001caa:	2100      	movs	r1, #0
 8001cac:	2007      	movs	r0, #7
 8001cae:	f7ff ffab 	bl	8001c08 <setMode>
	writeDataByte(ATIME, DEFAULT_ATIME);
 8001cb2:	21db      	movs	r1, #219	; 0xdb
 8001cb4:	2081      	movs	r0, #129	; 0x81
 8001cb6:	f7ff ff6d 	bl	8001b94 <writeDataByte>
	writeDataByte(WTIME,DEFAULT_WTIME);
 8001cba:	21f6      	movs	r1, #246	; 0xf6
 8001cbc:	2083      	movs	r0, #131	; 0x83
 8001cbe:	f7ff ff69 	bl	8001b94 <writeDataByte>
	writeDataByte(PPULSE, DEFAULT_PROX_PPULSE);
 8001cc2:	2187      	movs	r1, #135	; 0x87
 8001cc4:	208e      	movs	r0, #142	; 0x8e
 8001cc6:	f7ff ff65 	bl	8001b94 <writeDataByte>
	writeDataByte(POFFSET_UR, DEFAULT_POFFSET_UR);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	209d      	movs	r0, #157	; 0x9d
 8001cce:	f7ff ff61 	bl	8001b94 <writeDataByte>
	writeDataByte(POFFSET_DL, DEFAULT_POFFSET_DL);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	209e      	movs	r0, #158	; 0x9e
 8001cd6:	f7ff ff5d 	bl	8001b94 <writeDataByte>
	writeDataByte(CONFIG1, DEFAULT_CONFIG1);
 8001cda:	2160      	movs	r1, #96	; 0x60
 8001cdc:	208d      	movs	r0, #141	; 0x8d
 8001cde:	f7ff ff59 	bl	8001b94 <writeDataByte>
	setLEDDrive(DEFAULT_LDRIVE);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f821 	bl	8001d2a <setLEDDrive>
	setProximityGain(DEFAULT_PGAIN);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f000 f868 	bl	8001dbe <setProximityGain>
	setAmbientLightGain(DEFAULT_AGAIN);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 f88a 	bl	8001e08 <setAmbientLightGain>
	setProxIntLowThresh(DEFAULT_PILT);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f000 f8a9 	bl	8001e4c <setProxIntLowThresh>
	setProxIntHighThresh(DEFAULT_PIHT);
 8001cfa:	2032      	movs	r0, #50	; 0x32
 8001cfc:	f000 f8b4 	bl	8001e68 <setProxIntHighThresh>
	setLightIntLowThresh(DEFAULT_AILT);
 8001d00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d04:	f000 f8be 	bl	8001e84 <setLightIntLowThresh>
	setLightIntHighThresh(DEFAULT_AIHT);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 f8d4 	bl	8001eb6 <setLightIntHighThresh>
	writeDataByte(PERS, DEFAULT_PERS);
 8001d0e:	2111      	movs	r1, #17
 8001d10:	208c      	movs	r0, #140	; 0x8c
 8001d12:	f7ff ff3f 	bl	8001b94 <writeDataByte>
	writeDataByte(CONFIG2, DEFAULT_CONFIG2);
 8001d16:	2101      	movs	r1, #1
 8001d18:	2090      	movs	r0, #144	; 0x90
 8001d1a:	f7ff ff3b 	bl	8001b94 <writeDataByte>
	writeDataByte(CONFIG3, DEFAULT_CONFIG3);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	209f      	movs	r0, #159	; 0x9f
 8001d22:	f7ff ff37 	bl	8001b94 <writeDataByte>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <setLEDDrive>:
void setLEDDrive(uint8_t drive){
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	readDataByte(CONTROL, &val);
 8001d34:	f107 030f 	add.w	r3, r7, #15
 8001d38:	4619      	mov	r1, r3
 8001d3a:	208f      	movs	r0, #143	; 0x8f
 8001d3c:	f7ff ff46 	bl	8001bcc <readDataByte>

	drive &= 0b00000011;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	71fb      	strb	r3, [r7, #7]
	drive = drive << 6;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	019b      	lsls	r3, r3, #6
 8001d4c:	71fb      	strb	r3, [r7, #7]
	val &= 0b00111111;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	73fb      	strb	r3, [r7, #15]

	writeDataByte(CONTROL, val);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4619      	mov	r1, r3
 8001d66:	208f      	movs	r0, #143	; 0x8f
 8001d68:	f7ff ff14 	bl	8001b94 <writeDataByte>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <setAmbientLightIntEnable>:
void setAmbientLightIntEnable(uint8_t enable){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	readDataByte(ENABLE, &val);
 8001d7e:	f107 030f 	add.w	r3, r7, #15
 8001d82:	4619      	mov	r1, r3
 8001d84:	2080      	movs	r0, #128	; 0x80
 8001d86:	f7ff ff21 	bl	8001bcc <readDataByte>

	enable &= 0b00000001;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
	enable = enable << 4;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	71fb      	strb	r3, [r7, #7]
	val &= 0b11101111;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	f023 0310 	bic.w	r3, r3, #16
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	73fb      	strb	r3, [r7, #15]
	val |= enable;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	73fb      	strb	r3, [r7, #15]

	writeDataByte(ENABLE, val);
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	4619      	mov	r1, r3
 8001db0:	2080      	movs	r0, #128	; 0x80
 8001db2:	f7ff feef 	bl	8001b94 <writeDataByte>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <setProximityGain>:
void setProximityGain(uint8_t drive){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	readDataByte(CONTROL, &val);
 8001dc8:	f107 030f 	add.w	r3, r7, #15
 8001dcc:	4619      	mov	r1, r3
 8001dce:	208f      	movs	r0, #143	; 0x8f
 8001dd0:	f7ff fefc 	bl	8001bcc <readDataByte>

	drive &= 0b00000011;
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	71fb      	strb	r3, [r7, #7]
	drive = drive << 2;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	71fb      	strb	r3, [r7, #7]
	val &= 0b00111111;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73fb      	strb	r3, [r7, #15]

	writeDataByte(CONTROL, val);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	208f      	movs	r0, #143	; 0x8f
 8001dfc:	f7ff feca 	bl	8001b94 <writeDataByte>
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <setAmbientLightGain>:
void setAmbientLightGain(uint8_t drive){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	readDataByte(CONTROL, &val);
 8001e12:	f107 030f 	add.w	r3, r7, #15
 8001e16:	4619      	mov	r1, r3
 8001e18:	208f      	movs	r0, #143	; 0x8f
 8001e1a:	f7ff fed7 	bl	8001bcc <readDataByte>

	drive &= 0b00000011;
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	71fb      	strb	r3, [r7, #7]
	val &= 0b00111111;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	73fb      	strb	r3, [r7, #15]

	writeDataByte(CONTROL, val);
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	208f      	movs	r0, #143	; 0x8f
 8001e40:	f7ff fea8 	bl	8001b94 <writeDataByte>
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <setProxIntLowThresh>:
void setProxIntLowThresh(uint8_t threshold){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	writeDataByte(PILT, threshold);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2089      	movs	r0, #137	; 0x89
 8001e5c:	f7ff fe9a 	bl	8001b94 <writeDataByte>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <setProxIntHighThresh>:
void setProxIntHighThresh(uint8_t threshold){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	writeDataByte(PIHT, threshold);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4619      	mov	r1, r3
 8001e76:	208b      	movs	r0, #139	; 0x8b
 8001e78:	f7ff fe8c 	bl	8001b94 <writeDataByte>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <setLightIntLowThresh>:
void setLightIntLowThresh(uint16_t threshold){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
	uint8_t val_low;
	uint8_t val_high;

	val_low = threshold & 0x00FF;
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	73bb      	strb	r3, [r7, #14]

	writeDataByte(AILTL, val_low);
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2084      	movs	r0, #132	; 0x84
 8001ea0:	f7ff fe78 	bl	8001b94 <writeDataByte>
	writeDataByte(AILTH, val_high);
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	2085      	movs	r0, #133	; 0x85
 8001eaa:	f7ff fe73 	bl	8001b94 <writeDataByte>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <setLightIntHighThresh>:
void setLightIntHighThresh (uint16_t threshold){
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
	uint8_t val_low;
	uint8_t val_high;

	val_low = threshold & 0x00FF;
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	73bb      	strb	r3, [r7, #14]

	writeDataByte(AIHTL, val_low);
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	2086      	movs	r0, #134	; 0x86
 8001ed2:	f7ff fe5f 	bl	8001b94 <writeDataByte>
	writeDataByte(AIHTH, val_high);
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2087      	movs	r0, #135	; 0x87
 8001edc:	f7ff fe5a 	bl	8001b94 <writeDataByte>
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <enableLightSensor>:

void enableLightSensor(uint8_t interrupts){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]

	setAmbientLightGain(DEFAULT_AGAIN);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff ff88 	bl	8001e08 <setAmbientLightGain>
	if(interrupts){
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <enableLightSensor+0x1e>
		setAmbientLightIntEnable(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff ff38 	bl	8001d74 <setAmbientLightIntEnable>
 8001f04:	e002      	b.n	8001f0c <enableLightSensor+0x24>
	}else {
		setAmbientLightIntEnable(0);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff ff34 	bl	8001d74 <setAmbientLightIntEnable>
	}
	setMode(POWER,1);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fe7a 	bl	8001c08 <setMode>
	setMode(AMBIENT_LIGHT, 1);
 8001f14:	2101      	movs	r1, #1
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff fe76 	bl	8001c08 <setMode>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <readAmbientLight>:
void readAmbientLight(uint16_t *val){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	uint8_t val_bytes;
	*val = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]

	readDataByte(CDATAL, &val_bytes);
 8001f32:	f107 030f 	add.w	r3, r7, #15
 8001f36:	4619      	mov	r1, r3
 8001f38:	2094      	movs	r0, #148	; 0x94
 8001f3a:	f7ff fe47 	bl	8001bcc <readDataByte>
	*val = val_bytes;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	801a      	strh	r2, [r3, #0]

	readDataByte(CDATAH, &val_bytes);
 8001f46:	f107 030f 	add.w	r3, r7, #15
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	2095      	movs	r0, #149	; 0x95
 8001f4e:	f7ff fe3d 	bl	8001bcc <readDataByte>
	*val = *val + ((uint16_t)val_bytes << 8);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	881a      	ldrh	r2, [r3, #0]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	801a      	strh	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <storeData>:
	*val = val_bytes;

	readDataByte(BDATAH, &val_bytes);
	*val = *val + ((uint16_t)val_bytes << 8);
}
void storeData(){
 8001f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f74:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8001f78:	af0c      	add	r7, sp, #48	; 0x30
	//Do all the read functions then store that data into memory
	uint8_t Write_Enable = 0x06;
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t Page_Program = 0x02;
 8001f80:	2302      	movs	r3, #2
 8001f82:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	char storage[256];
	uint8_t SPI_storage[256];
	tempSend = 0x00;
 8001f86:	4b8c      	ldr	r3, [pc, #560]	; (80021b8 <storeData+0x248>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	uint8_t tx[4];
	uint32_t address;

	readall();
 8001f8c:	f000 f92c 	bl	80021e8 <readall>

	for(int i = 0; i < 256; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001f96:	e00d      	b.n	8001fb4 <storeData+0x44>
		SPI_storage[i] = '\0';
 8001f98:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001f9c:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001fa0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 8001faa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001fb4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001fb8:	2bff      	cmp	r3, #255	; 0xff
 8001fba:	dded      	ble.n	8001f98 <storeData+0x28>

	sprintf(storage, "DATE:%02d-%02d-%02d\nTIME:%02d:%02d:%02d\nAMBIENT LIGHT(0-4000): %u\nTEMPERATURE: %0.2lfF\nHUMIDITY: %d%%\nSOIL MOISTURE(0-100): %d\nBATTERY: %d%%\n",gDate.Month,gDate.Date,gDate.Year, gTime.Hours, gTime.Minutes, gTime.Seconds, (unsigned int)ambientLight, temp, (int)hum, ratio, batteryLife);
 8001fbc:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <storeData+0x24c>)
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <storeData+0x24c>)
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <storeData+0x24c>)
 8001fca:	78db      	ldrb	r3, [r3, #3]
 8001fcc:	461e      	mov	r6, r3
 8001fce:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <storeData+0x250>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <storeData+0x250>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <storeData+0x250>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <storeData+0x254>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <storeData+0x258>)
 8001fe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001fec:	4b77      	ldr	r3, [pc, #476]	; (80021cc <storeData+0x25c>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fdaf 	bl	8000b58 <__aeabi_d2iz>
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	4b74      	ldr	r3, [pc, #464]	; (80021d0 <storeData+0x260>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a74      	ldr	r2, [pc, #464]	; (80021d4 <storeData+0x264>)
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002008:	920a      	str	r2, [sp, #40]	; 0x28
 800200a:	9309      	str	r3, [sp, #36]	; 0x24
 800200c:	9108      	str	r1, [sp, #32]
 800200e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	9204      	str	r2, [sp, #16]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	9203      	str	r2, [sp, #12]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	9202      	str	r2, [sp, #8]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9600      	str	r6, [sp, #0]
 8002024:	464b      	mov	r3, r9
 8002026:	4642      	mov	r2, r8
 8002028:	496b      	ldr	r1, [pc, #428]	; (80021d8 <storeData+0x268>)
 800202a:	f008 fdfd 	bl	800ac28 <siprintf>
	for (int i = 0; i < strlen(storage); i++){
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002034:	e015      	b.n	8002062 <storeData+0xf2>
		SPI_storage[i] = storage[i];
 8002036:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800203a:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 800203e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002042:	4413      	add	r3, r2
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800204a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800204e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002052:	4413      	add	r3, r2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < strlen(storage); i++){
 8002058:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002062:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f902 	bl	8000270 <strlen>
 800206c:	4602      	mov	r2, r0
 800206e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002072:	429a      	cmp	r2, r3
 8002074:	d8df      	bhi.n	8002036 <storeData+0xc6>
	}

	//Clear the page being written too this keeps the circular buffer alive
	deletePage();
 8002076:	f000 fb27 	bl	80026c8 <deletePage>

	//ENABLE WRITE
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2101      	movs	r1, #1
 800207e:	4857      	ldr	r0, [pc, #348]	; (80021dc <storeData+0x26c>)
 8002080:	f002 fec0 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800208a:	e004      	b.n	8002096 <storeData+0x126>
 800208c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002090:	3301      	adds	r3, #1
 8002092:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002096:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800209a:	2b09      	cmp	r3, #9
 800209c:	ddf6      	ble.n	800208c <storeData+0x11c>
	HAL_SPI_Transmit(&hspi2, &Write_Enable, sizeof(Write_Enable), 1000);
 800209e:	f207 2117 	addw	r1, r7, #535	; 0x217
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	2201      	movs	r2, #1
 80020a8:	484d      	ldr	r0, [pc, #308]	; (80021e0 <storeData+0x270>)
 80020aa:	f005 fdb2 	bl	8007c12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	484a      	ldr	r0, [pc, #296]	; (80021dc <storeData+0x26c>)
 80020b4:	f002 fea6 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80020be:	e004      	b.n	80020ca <storeData+0x15a>
 80020c0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80020c4:	3301      	adds	r3, #1
 80020c6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80020ca:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	ddf6      	ble.n	80020c0 <storeData+0x150>

	//START CS PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	4841      	ldr	r0, [pc, #260]	; (80021dc <storeData+0x26c>)
 80020d8:	f002 fe94 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80020e2:	e004      	b.n	80020ee <storeData+0x17e>
 80020e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020e8:	3301      	adds	r3, #1
 80020ea:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80020ee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	ddf6      	ble.n	80020e4 <storeData+0x174>

	//TRANSMIT ADDRESS WITH FIRST COMMAND
	address = 0x100 * total_Entries;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <storeData+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	tx[0] = Page_Program;
 8002100:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002104:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8002108:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800210c:	701a      	strb	r2, [r3, #0]
	tx[1] = (address & 0x00FF0000) >> 16;
 800210e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2da      	uxtb	r2, r3
 8002116:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800211a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800211e:	705a      	strb	r2, [r3, #1]
	tx[2] = (address & 0x0000FF00) >> 8;
 8002120:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	b2da      	uxtb	r2, r3
 8002128:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800212c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8002130:	709a      	strb	r2, [r3, #2]
	tx[3] = (address & 0x000000FF);
 8002132:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002136:	b2da      	uxtb	r2, r3
 8002138:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800213c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8002140:	70da      	strb	r2, [r3, #3]

	HAL_SPI_Transmit(&hspi2,tx, 4, 100);
 8002142:	f107 0110 	add.w	r1, r7, #16
 8002146:	2364      	movs	r3, #100	; 0x64
 8002148:	2204      	movs	r2, #4
 800214a:	4825      	ldr	r0, [pc, #148]	; (80021e0 <storeData+0x270>)
 800214c:	f005 fd61 	bl	8007c12 <HAL_SPI_Transmit>

	//TRANSMIT BUFFER MAX SIZE 256 BYTES
	HAL_SPI_Transmit(&hspi2,SPI_storage, sizeof(SPI_storage), 1000);
 8002150:	f107 0114 	add.w	r1, r7, #20
 8002154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215c:	4820      	ldr	r0, [pc, #128]	; (80021e0 <storeData+0x270>)
 800215e:	f005 fd58 	bl	8007c12 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	2101      	movs	r1, #1
 8002166:	481d      	ldr	r0, [pc, #116]	; (80021dc <storeData+0x26c>)
 8002168:	f002 fe4c 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002172:	e004      	b.n	800217e <storeData+0x20e>
 8002174:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800217e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002182:	2b09      	cmp	r3, #9
 8002184:	ddf6      	ble.n	8002174 <storeData+0x204>
	total_Entries++;
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <storeData+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <storeData+0x274>)
 800218e:	6013      	str	r3, [r2, #0]
	//This is 2 months of data saves at 1 hour intervals
	if(total_Entries == 1600){
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <storeData+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002198:	d107      	bne.n	80021aa <storeData+0x23a>
		total_Entries = 0;
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <storeData+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
		clearMemory();
 80021a0:	f000 fa28 	bl	80025f4 <clearMemory>
		total_Entries = 0;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <storeData+0x274>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
	}

}
 80021aa:	bf00      	nop
 80021ac:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021b6:	bf00      	nop
 80021b8:	20001864 	.word	0x20001864
 80021bc:	200004b0 	.word	0x200004b0
 80021c0:	200004b4 	.word	0x200004b4
 80021c4:	200004a8 	.word	0x200004a8
 80021c8:	20001878 	.word	0x20001878
 80021cc:	20001880 	.word	0x20001880
 80021d0:	20001874 	.word	0x20001874
 80021d4:	20001888 	.word	0x20001888
 80021d8:	0800d02c 	.word	0x0800d02c
 80021dc:	48000400 	.word	0x48000400
 80021e0:	20000334 	.word	0x20000334
 80021e4:	2000188c 	.word	0x2000188c

080021e8 <readall>:
void readall(){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	//call all the read functions
	readAmbientLight(&ambientLight);
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <readall+0x20>)
 80021ee:	f7ff fe99 	bl	8001f24 <readAmbientLight>
	getTime();
 80021f2:	f000 fa55 	bl	80026a0 <getTime>
	fetchMoisture();
 80021f6:	f000 facf 	bl	8002798 <fetchMoisture>
	readTempHum();
 80021fa:	f000 fb65 	bl	80028c8 <readTempHum>
	readBattery();
 80021fe:	f000 fb23 	bl	8002848 <readBattery>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200004a8 	.word	0x200004a8

0800220c <getEntryCount>:
void getEntryCount(){
 800220c:	b580      	push	{r7, lr}
 800220e:	b0c6      	sub	sp, #280	; 0x118
 8002210:	af00      	add	r7, sp, #0
	total_Entries = 0;
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <getEntryCount+0x12c>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
	uint8_t Read_Data = 0x03;
 8002218:	2303      	movs	r3, #3
 800221a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t tx[4];
	uint32_t Address = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t check_bytes[256];

	for(int i = 0; i < 256; i++){
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800222a:	e00d      	b.n	8002248 <getEntryCount+0x3c>
		check_bytes[i] = 0x00;
 800222c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002230:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002238:	4413      	add	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++){
 800223e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002242:	3301      	adds	r3, #1
 8002244:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	dded      	ble.n	800222c <getEntryCount+0x20>
	}
	do{
		Address = 0x100 * total_Entries;
 8002250:	4b39      	ldr	r3, [pc, #228]	; (8002338 <getEntryCount+0x12c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	2101      	movs	r1, #1
 800225e:	4837      	ldr	r0, [pc, #220]	; (800233c <getEntryCount+0x130>)
 8002260:	f002 fdd0 	bl	8004e04 <HAL_GPIO_WritePin>
		for (int j = 0; j < 10; j++);
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800226a:	e004      	b.n	8002276 <getEntryCount+0x6a>
 800226c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002270:	3301      	adds	r3, #1
 8002272:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002276:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800227a:	2b09      	cmp	r3, #9
 800227c:	ddf6      	ble.n	800226c <getEntryCount+0x60>

		//SEND COMMAND AND ADDRESSING
		tx[0] = Read_Data;
 800227e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002282:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		tx[1] = (Address & 0x00FF0000) >> 16;
 8002286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		tx[2] = (Address & 0x0000FF00) >> 8;
 8002292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		tx[3] = (Address & 0x000000FF);
 800229e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		HAL_SPI_Transmit(&hspi2,tx, 4, 100);
 80022a8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80022ac:	2364      	movs	r3, #100	; 0x64
 80022ae:	2204      	movs	r2, #4
 80022b0:	4823      	ldr	r0, [pc, #140]	; (8002340 <getEntryCount+0x134>)
 80022b2:	f005 fcae 	bl	8007c12 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&hspi2, check_bytes, sizeof(check_bytes) , 2000);
 80022b6:	4639      	mov	r1, r7
 80022b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c0:	481f      	ldr	r0, [pc, #124]	; (8002340 <getEntryCount+0x134>)
 80022c2:	f005 fe1b 	bl	8007efc <HAL_SPI_Receive>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2101      	movs	r1, #1
 80022ca:	481c      	ldr	r0, [pc, #112]	; (800233c <getEntryCount+0x130>)
 80022cc:	f002 fd9a 	bl	8004e04 <HAL_GPIO_WritePin>
		for (int j = 0; j < 10; j++);
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80022d6:	e004      	b.n	80022e2 <getEntryCount+0xd6>
 80022d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022dc:	3301      	adds	r3, #1
 80022de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80022e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022e6:	2b09      	cmp	r3, #9
 80022e8:	ddf6      	ble.n	80022d8 <getEntryCount+0xcc>

		if((check_bytes[0] != 0x00) && (check_bytes[0] != 0xFF)){
 80022ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <getEntryCount+0x104>
 80022f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2bff      	cmp	r3, #255	; 0xff
 8002304:	d004      	beq.n	8002310 <getEntryCount+0x104>
			total_Entries++;
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <getEntryCount+0x12c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <getEntryCount+0x12c>)
 800230e:	6013      	str	r3, [r2, #0]
		}
	}while(check_bytes[0] != 0xFF && check_bytes[0] != 0x00);
 8002310:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002314:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d006      	beq.n	800232c <getEntryCount+0x120>
 800231e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002322:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d191      	bne.n	8002250 <getEntryCount+0x44>
}
 800232c:	bf00      	nop
 800232e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000188c 	.word	0x2000188c
 800233c:	48000400 	.word	0x48000400
 8002340:	20000334 	.word	0x20000334

08002344 <readEntry>:
void readEntry(int pos, UART_HandleTypeDef *huart){
 8002344:	b580      	push	{r7, lr}
 8002346:	b0cc      	sub	sp, #304	; 0x130
 8002348:	af00      	add	r7, sp, #0
 800234a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800234e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002352:	6018      	str	r0, [r3, #0]
 8002354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800235c:	6019      	str	r1, [r3, #0]
	uint32_t Address = (pos - 1) * 0x0000100;
 800235e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3b01      	subs	r3, #1
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint8_t Read_Data = 0x03;
 8002370:	2303      	movs	r3, #3
 8002372:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t read_buff[256];
	uint8_t tx[4];
	uint8_t tempSend = 0x00;
 8002376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800237a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	char *MSG = "EMPTY\n";
 8002382:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <readEntry+0x234>)
 8002384:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	for(int i = 0; i < 256; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800238e:	e00d      	b.n	80023ac <readEntry+0x68>
			read_buff[i] = '\0';
 8002390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002394:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800239c:	4413      	add	r3, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 80023a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023a6:	3301      	adds	r3, #1
 80023a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80023ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023b0:	2bff      	cmp	r3, #255	; 0xff
 80023b2:	dded      	ble.n	8002390 <readEntry+0x4c>

	//ENABLE CS PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2101      	movs	r1, #1
 80023b8:	4870      	ldr	r0, [pc, #448]	; (800257c <readEntry+0x238>)
 80023ba:	f002 fd23 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80023c4:	e004      	b.n	80023d0 <readEntry+0x8c>
 80023c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80023d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	ddf6      	ble.n	80023c6 <readEntry+0x82>

	//SEND COMMAND AND ADDRESSING
	tx[0] = Read_Data;
 80023d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023e0:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80023e4:	701a      	strb	r2, [r3, #0]
	tx[1] = (Address & 0x00FF0000) >> 16;
 80023e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023f6:	705a      	strb	r2, [r3, #1]
	tx[2] = (Address & 0x0000FF00) >> 8;
 80023f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002404:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002408:	709a      	strb	r2, [r3, #2]
	tx[3] = (Address & 0x000000FF);
 800240a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800240e:	b2da      	uxtb	r2, r3
 8002410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002414:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002418:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi2,tx, 4, 100);
 800241a:	f107 010c 	add.w	r1, r7, #12
 800241e:	2364      	movs	r3, #100	; 0x64
 8002420:	2204      	movs	r2, #4
 8002422:	4857      	ldr	r0, [pc, #348]	; (8002580 <readEntry+0x23c>)
 8002424:	f005 fbf5 	bl	8007c12 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2, read_buff, sizeof(read_buff) , 2000);
 8002428:	f107 0110 	add.w	r1, r7, #16
 800242c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002434:	4852      	ldr	r0, [pc, #328]	; (8002580 <readEntry+0x23c>)
 8002436:	f005 fd61 	bl	8007efc <HAL_SPI_Receive>

	//END SPI READ
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	2101      	movs	r1, #1
 800243e:	484f      	ldr	r0, [pc, #316]	; (800257c <readEntry+0x238>)
 8002440:	f002 fce0 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800244a:	e004      	b.n	8002456 <readEntry+0x112>
 800244c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002450:	3301      	adds	r3, #1
 8002452:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002456:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800245a:	2b09      	cmp	r3, #9
 800245c:	ddf6      	ble.n	800244c <readEntry+0x108>

	//SEND VALUES TO COMP VIA USART
	if((read_buff[0] == 0xFF) || (read_buff[0] == 0x00)){
 800245e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002462:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2bff      	cmp	r3, #255	; 0xff
 800246a:	d006      	beq.n	800247a <readEntry+0x136>
 800246c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002470:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d138      	bne.n	80024ec <readEntry+0x1a8>
		for(int i = 0; i <= sizeof(MSG); i++){
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002480:	e02f      	b.n	80024e2 <readEntry+0x19e>
			tempSend = MSG[i];
 8002482:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002486:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800248a:	4413      	add	r3, r2
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002492:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8002496:	701a      	strb	r2, [r3, #0]
			if((tempSend != 0x00) && (tempSend != 0xFF))
 8002498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800249c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <readEntry+0x188>
 80024a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024aa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2bff      	cmp	r3, #255	; 0xff
 80024b2:	d00b      	beq.n	80024cc <readEntry+0x188>
				HAL_UART_Transmit(huart, &tempSend, sizeof(tempSend), 1000);
 80024b4:	f107 010b 	add.w	r1, r7, #11
 80024b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024bc:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 80024c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c4:	2201      	movs	r2, #1
 80024c6:	6800      	ldr	r0, [r0, #0]
 80024c8:	f006 fa7c 	bl	80089c4 <HAL_UART_Transmit>
			tempSend = 0x00;
 80024cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i <= sizeof(MSG); i++){
 80024d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024dc:	3301      	adds	r3, #1
 80024de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d9cb      	bls.n	8002482 <readEntry+0x13e>
 80024ea:	e03f      	b.n	800256c <readEntry+0x228>
		}
	}
	else{
		for(int j = 0; j < 256; j++){
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024f2:	e036      	b.n	8002562 <readEntry+0x21e>
				tempSend = read_buff[j];
 80024f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024f8:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80024fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002500:	4413      	add	r3, r2
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002508:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800250c:	701a      	strb	r2, [r3, #0]
				if((read_buff[j] != 0x00) && (read_buff[j] != 0xFF)){
 800250e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002512:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01a      	beq.n	8002558 <readEntry+0x214>
 8002522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002526:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800252a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2bff      	cmp	r3, #255	; 0xff
 8002534:	d010      	beq.n	8002558 <readEntry+0x214>
					HAL_UART_Transmit(huart, &read_buff[j], 1, 100);
 8002536:	f107 0210 	add.w	r2, r7, #16
 800253a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800253e:	18d1      	adds	r1, r2, r3
 8002540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002544:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002548:	2364      	movs	r3, #100	; 0x64
 800254a:	2201      	movs	r2, #1
 800254c:	6800      	ldr	r0, [r0, #0]
 800254e:	f006 fa39 	bl	80089c4 <HAL_UART_Transmit>
					HAL_Delay(5);
 8002552:	2005      	movs	r0, #5
 8002554:	f000 fed6 	bl	8003304 <HAL_Delay>
		for(int j = 0; j < 256; j++){
 8002558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800255c:	3301      	adds	r3, #1
 800255e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002562:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	ddc4      	ble.n	80024f4 <readEntry+0x1b0>
				}
			}
	}

}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	0800d0bc 	.word	0x0800d0bc
 800257c:	48000400 	.word	0x48000400
 8002580:	20000334 	.word	0x20000334

08002584 <totalEntries>:
void totalEntries(){
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af00      	add	r7, sp, #0
	tempSend = total_Entries;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <totalEntries+0x60>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <totalEntries+0x64>)
 8002592:	701a      	strb	r2, [r3, #0]
	char sendStuff[50];
	sprintf(sendStuff, "%d TOTAL DATA ENTRIES\n",tempSend);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <totalEntries+0x64>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	463b      	mov	r3, r7
 800259c:	4913      	ldr	r1, [pc, #76]	; (80025ec <totalEntries+0x68>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f008 fb42 	bl	800ac28 <siprintf>
	for(int i = 0; i < strlen(sendStuff); i++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
 80025a8:	e00f      	b.n	80025ca <totalEntries+0x46>
		tempSend = sendStuff[i];
 80025aa:	463a      	mov	r2, r7
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	4413      	add	r3, r2
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <totalEntries+0x64>)
 80025b4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(who, &tempSend, sizeof(tempSend), 100);
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <totalEntries+0x6c>)
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	2364      	movs	r3, #100	; 0x64
 80025bc:	2201      	movs	r2, #1
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <totalEntries+0x64>)
 80025c0:	f006 fa00 	bl	80089c4 <HAL_UART_Transmit>
	for(int i = 0; i < strlen(sendStuff); i++){
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	3301      	adds	r3, #1
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ca:	463b      	mov	r3, r7
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fe4f 	bl	8000270 <strlen>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d8e7      	bhi.n	80025aa <totalEntries+0x26>
	}
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	3738      	adds	r7, #56	; 0x38
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000188c 	.word	0x2000188c
 80025e8:	20001864 	.word	0x20001864
 80025ec:	0800d0c4 	.word	0x0800d0c4
 80025f0:	20001868 	.word	0x20001868

080025f4 <clearMemory>:
void clearMemory(){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
	//LATCH CS PIN
    uint8_t Erase_Chip = 0x60;
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	71fb      	strb	r3, [r7, #7]
    uint8_t Write_Enable = 0x06;
 80025fe:	2306      	movs	r3, #6
 8002600:	71bb      	strb	r3, [r7, #6]

    //WEL BIT ENABLED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	2101      	movs	r1, #1
 8002606:	4824      	ldr	r0, [pc, #144]	; (8002698 <clearMemory+0xa4>)
 8002608:	f002 fbfc 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e002      	b.n	8002618 <clearMemory+0x24>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b09      	cmp	r3, #9
 800261c:	ddf9      	ble.n	8002612 <clearMemory+0x1e>
	HAL_SPI_Transmit(&hspi2, &Write_Enable, sizeof(Write_Enable), 100);
 800261e:	1db9      	adds	r1, r7, #6
 8002620:	2364      	movs	r3, #100	; 0x64
 8002622:	2201      	movs	r2, #1
 8002624:	481d      	ldr	r0, [pc, #116]	; (800269c <clearMemory+0xa8>)
 8002626:	f005 faf4 	bl	8007c12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	2101      	movs	r1, #1
 800262e:	481a      	ldr	r0, [pc, #104]	; (8002698 <clearMemory+0xa4>)
 8002630:	f002 fbe8 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e002      	b.n	8002640 <clearMemory+0x4c>
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	3301      	adds	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b09      	cmp	r3, #9
 8002644:	ddf9      	ble.n	800263a <clearMemory+0x46>

	//SEND CLEAR CHIP SIGNAL
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);     // CS to low
 8002646:	2200      	movs	r2, #0
 8002648:	2101      	movs	r1, #1
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <clearMemory+0xa4>)
 800264c:	f002 fbda 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e002      	b.n	800265c <clearMemory+0x68>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b09      	cmp	r3, #9
 8002660:	ddf9      	ble.n	8002656 <clearMemory+0x62>
    HAL_SPI_Transmit(&hspi2,&Erase_Chip,sizeof(Erase_Chip),100);   // Erase Chip Command
 8002662:	1df9      	adds	r1, r7, #7
 8002664:	2364      	movs	r3, #100	; 0x64
 8002666:	2201      	movs	r2, #1
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <clearMemory+0xa8>)
 800266a:	f005 fad2 	bl	8007c12 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);       // CS to high
 800266e:	2201      	movs	r2, #1
 8002670:	2101      	movs	r1, #1
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <clearMemory+0xa4>)
 8002674:	f002 fbc6 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 1000; i++);
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	e002      	b.n	8002684 <clearMemory+0x90>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268a:	dbf8      	blt.n	800267e <clearMemory+0x8a>
	//RELEASE CS PIN
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	48000400 	.word	0x48000400
 800269c:	20000334 	.word	0x20000334

080026a0 <getTime>:
void getTime(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80026a4:	2200      	movs	r2, #0
 80026a6:	4905      	ldr	r1, [pc, #20]	; (80026bc <getTime+0x1c>)
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <getTime+0x20>)
 80026aa:	f004 fe78 	bl	800739e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80026ae:	2200      	movs	r2, #0
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <getTime+0x24>)
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <getTime+0x20>)
 80026b4:	f004 ff56 	bl	8007564 <HAL_RTC_GetDate>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200004b4 	.word	0x200004b4
 80026c0:	20000310 	.word	0x20000310
 80026c4:	200004b0 	.word	0x200004b0

080026c8 <deletePage>:
void deletePage(){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
	uint8_t Write_Enable = 0x06;
 80026ce:	2306      	movs	r3, #6
 80026d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Page_Erase = 0x81;
 80026d2:	2381      	movs	r3, #129	; 0x81
 80026d4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[4];
	uint32_t Address = total_Entries * 0x0000100;
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <deletePage+0xc4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80026de:	2200      	movs	r2, #0
 80026e0:	2101      	movs	r1, #1
 80026e2:	482b      	ldr	r0, [pc, #172]	; (8002790 <deletePage+0xc8>)
 80026e4:	f002 fb8e 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	e002      	b.n	80026f4 <deletePage+0x2c>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	ddf9      	ble.n	80026ee <deletePage+0x26>
	HAL_SPI_Transmit(&hspi2, &Write_Enable, sizeof(Write_Enable), 1000);
 80026fa:	1df9      	adds	r1, r7, #7
 80026fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002700:	2201      	movs	r2, #1
 8002702:	4824      	ldr	r0, [pc, #144]	; (8002794 <deletePage+0xcc>)
 8002704:	f005 fa85 	bl	8007c12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	2101      	movs	r1, #1
 800270c:	4820      	ldr	r0, [pc, #128]	; (8002790 <deletePage+0xc8>)
 800270e:	f002 fb79 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e002      	b.n	800271e <deletePage+0x56>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3301      	adds	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b09      	cmp	r3, #9
 8002722:	ddf9      	ble.n	8002718 <deletePage+0x50>

	//START CS PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	4819      	ldr	r0, [pc, #100]	; (8002790 <deletePage+0xc8>)
 800272a:	f002 fb6b 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e002      	b.n	800273a <deletePage+0x72>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b09      	cmp	r3, #9
 800273e:	ddf9      	ble.n	8002734 <deletePage+0x6c>

	//TRANSMIT ADDRESS WITH FIRST COMMAND
	tx[0] = Page_Erase;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	703b      	strb	r3, [r7, #0]
	tx[1] = (Address & 0x00FF0000) >> 16;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0c1b      	lsrs	r3, r3, #16
 8002748:	b2db      	uxtb	r3, r3
 800274a:	707b      	strb	r3, [r7, #1]
	tx[2] = (Address & 0x0000FF00) >> 8;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b2db      	uxtb	r3, r3
 8002752:	70bb      	strb	r3, [r7, #2]
	tx[3] = (Address & 0x000000FF);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi2,tx, 4, 100);
 800275a:	4639      	mov	r1, r7
 800275c:	2364      	movs	r3, #100	; 0x64
 800275e:	2204      	movs	r2, #4
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <deletePage+0xcc>)
 8002762:	f005 fa56 	bl	8007c12 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	2101      	movs	r1, #1
 800276a:	4809      	ldr	r0, [pc, #36]	; (8002790 <deletePage+0xc8>)
 800276c:	f002 fb4a 	bl	8004e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e002      	b.n	800277c <deletePage+0xb4>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3301      	adds	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b09      	cmp	r3, #9
 8002780:	ddf9      	ble.n	8002776 <deletePage+0xae>
	//spam swap until 128
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000188c 	.word	0x2000188c
 8002790:	48000400 	.word	0x48000400
 8002794:	20000334 	.word	0x20000334

08002798 <fetchMoisture>:
void fetchMoisture(){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	double temp;
	HAL_ADC_Start(&hadc1);
 800279e:	4826      	ldr	r0, [pc, #152]	; (8002838 <fetchMoisture+0xa0>)
 80027a0:	f001 f908 	bl	80039b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	4823      	ldr	r0, [pc, #140]	; (8002838 <fetchMoisture+0xa0>)
 80027aa:	f001 f9bd 	bl	8003b28 <HAL_ADC_PollForConversion>
	moisture = HAL_ADC_GetValue(&hadc1);
 80027ae:	4822      	ldr	r0, [pc, #136]	; (8002838 <fetchMoisture+0xa0>)
 80027b0:	f001 fa92 	bl	8003cd8 <HAL_ADC_GetValue>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <fetchMoisture+0xa4>)
 80027b8:	6013      	str	r3, [r2, #0]
	temp = ((((double)moisture - 2700.0)/ 1300.0) * 100.0);
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <fetchMoisture+0xa4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fea0 	bl	8000504 <__aeabi_ui2d>
 80027c4:	a318      	add	r3, pc, #96	; (adr r3, 8002828 <fetchMoisture+0x90>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd fd5d 	bl	8000288 <__aeabi_dsub>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	a316      	add	r3, pc, #88	; (adr r3, 8002830 <fetchMoisture+0x98>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fe f836 	bl	800084c <__aeabi_ddiv>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <fetchMoisture+0xa8>)
 80027ee:	f7fd ff03 	bl	80005f8 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9c7 2300 	strd	r2, r3, [r7]
	ratio = 100 - temp;
 80027fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	490f      	ldr	r1, [pc, #60]	; (8002840 <fetchMoisture+0xa8>)
 8002804:	f7fd fd40 	bl	8000288 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f9a2 	bl	8000b58 <__aeabi_d2iz>
 8002814:	4603      	mov	r3, r0
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <fetchMoisture+0xac>)
 8002818:	6013      	str	r3, [r2, #0]
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	f3af 8000 	nop.w
 8002828:	00000000 	.word	0x00000000
 800282c:	40a51800 	.word	0x40a51800
 8002830:	00000000 	.word	0x00000000
 8002834:	40945000 	.word	0x40945000
 8002838:	200001f4 	.word	0x200001f4
 800283c:	20001870 	.word	0x20001870
 8002840:	40590000 	.word	0x40590000
 8002844:	20001874 	.word	0x20001874

08002848 <readBattery>:
void readBattery(){
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
	double works;
	HAL_ADC_Start(&hadc2);
 800284e:	481a      	ldr	r0, [pc, #104]	; (80028b8 <readBattery+0x70>)
 8002850:	f001 f8b0 	bl	80039b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	4817      	ldr	r0, [pc, #92]	; (80028b8 <readBattery+0x70>)
 800285a:	f001 f965 	bl	8003b28 <HAL_ADC_PollForConversion>
	works = HAL_ADC_GetValue(&hadc2);
 800285e:	4816      	ldr	r0, [pc, #88]	; (80028b8 <readBattery+0x70>)
 8002860:	f001 fa3a 	bl	8003cd8 <HAL_ADC_GetValue>
 8002864:	4603      	mov	r3, r0
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe4c 	bl	8000504 <__aeabi_ui2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	e9c7 2300 	strd	r2, r3, [r7]
	batteryLife = (works / 1300.0) * 100;
 8002874:	a30e      	add	r3, pc, #56	; (adr r3, 80028b0 <readBattery+0x68>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800287e:	f7fd ffe5 	bl	800084c <__aeabi_ddiv>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <readBattery+0x74>)
 8002890:	f7fd feb2 	bl	80005f8 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f95c 	bl	8000b58 <__aeabi_d2iz>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <readBattery+0x78>)
 80028a4:	6013      	str	r3, [r2, #0]

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40945000 	.word	0x40945000
 80028b8:	20000258 	.word	0x20000258
 80028bc:	40590000 	.word	0x40590000
 80028c0:	20001888 	.word	0x20001888
 80028c4:	00000000 	.word	0x00000000

080028c8 <readTempHum>:
void readTempHum(){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
	uint8_t data[4];
	uint8_t reg[2];
	uint16_t tempConversion = 0, humConversion = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	827b      	strh	r3, [r7, #18]
 80028d2:	2300      	movs	r3, #0
 80028d4:	823b      	strh	r3, [r7, #16]

	//init for reading humidity and temp in one transaction
	reg[0] = 0x02;
 80028d6:	2302      	movs	r3, #2
 80028d8:	723b      	strb	r3, [r7, #8]
	reg[1] = 0x10;
 80028da:	2310      	movs	r3, #16
 80028dc:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HDC1080_I2C_ADDR, reg,sizeof(reg), 1000);
 80028de:	f107 0208 	add.w	r2, r7, #8
 80028e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2302      	movs	r3, #2
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	4854      	ldr	r0, [pc, #336]	; (8002a40 <readTempHum+0x178>)
 80028ee:	f002 fb3d 	bl	8004f6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)HDC1080_I2C_ADDR, tempBits, 2, 1000);
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2302      	movs	r3, #2
 80028fa:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <readTempHum+0x17c>)
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	4850      	ldr	r0, [pc, #320]	; (8002a40 <readTempHum+0x178>)
 8002900:	f002 fc4c 	bl	800519c <HAL_I2C_Master_Receive>



	uint8_t ref = 0x00;
 8002904:	2300      	movs	r3, #0
 8002906:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HDC1080_I2C_ADDR, &ref,sizeof(ref), 1000);
 8002908:	1dfa      	adds	r2, r7, #7
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2301      	movs	r3, #1
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	484a      	ldr	r0, [pc, #296]	; (8002a40 <readTempHum+0x178>)
 8002916:	f002 fb29 	bl	8004f6c <HAL_I2C_Master_Transmit>

	for(int i = 0; i < 30000; i++);
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e002      	b.n	8002926 <readTempHum+0x5e>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f247 522f 	movw	r2, #29999	; 0x752f
 800292c:	4293      	cmp	r3, r2
 800292e:	ddf7      	ble.n	8002920 <readTempHum+0x58>

	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)HDC1080_I2C_ADDR, data, 4, 1000);
 8002930:	f107 020c 	add.w	r2, r7, #12
 8002934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2304      	movs	r3, #4
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	4840      	ldr	r0, [pc, #256]	; (8002a40 <readTempHum+0x178>)
 8002940:	f002 fc2c 	bl	800519c <HAL_I2C_Master_Receive>

	tempConversion = tempConversion << 8 | data[0];
 8002944:	8a7b      	ldrh	r3, [r7, #18]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	b21a      	sxth	r2, r3
 800294a:	7b3b      	ldrb	r3, [r7, #12]
 800294c:	b21b      	sxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b21b      	sxth	r3, r3
 8002952:	827b      	strh	r3, [r7, #18]
	tempConversion = tempConversion << 8 | data[1];
 8002954:	8a7b      	ldrh	r3, [r7, #18]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	b21a      	sxth	r2, r3
 800295a:	7b7b      	ldrb	r3, [r7, #13]
 800295c:	b21b      	sxth	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	b21b      	sxth	r3, r3
 8002962:	827b      	strh	r3, [r7, #18]
	humConversion = humConversion << 8 | data[2];
 8002964:	8a3b      	ldrh	r3, [r7, #16]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	b21a      	sxth	r2, r3
 800296a:	7bbb      	ldrb	r3, [r7, #14]
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21b      	sxth	r3, r3
 8002972:	823b      	strh	r3, [r7, #16]
	humConversion = humConversion << 8 | data[3];
 8002974:	8a3b      	ldrh	r3, [r7, #16]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	b21a      	sxth	r2, r3
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21b      	sxth	r3, r3
 8002982:	823b      	strh	r3, [r7, #16]

	temp = (((tempConversion) / 65536.0) * 165.0) - 40.0;
 8002984:	8a7b      	ldrh	r3, [r7, #18]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fdcc 	bl	8000524 <__aeabi_i2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <readTempHum+0x180>)
 8002992:	f7fd ff5b 	bl	800084c <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	a326      	add	r3, pc, #152	; (adr r3, 8002a38 <readTempHum+0x170>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fe28 	bl	80005f8 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <readTempHum+0x184>)
 80029b6:	f7fd fc67 	bl	8000288 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4924      	ldr	r1, [pc, #144]	; (8002a50 <readTempHum+0x188>)
 80029c0:	e9c1 2300 	strd	r2, r3, [r1]
	hum = (((humConversion) / 65536.0) * 100.0);
 80029c4:	8a3b      	ldrh	r3, [r7, #16]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fdac 	bl	8000524 <__aeabi_i2d>
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <readTempHum+0x180>)
 80029d2:	f7fd ff3b 	bl	800084c <__aeabi_ddiv>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <readTempHum+0x18c>)
 80029e4:	f7fd fe08 	bl	80005f8 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	491a      	ldr	r1, [pc, #104]	; (8002a58 <readTempHum+0x190>)
 80029ee:	e9c1 2300 	strd	r2, r3, [r1]

	//temp C to F
	temp = (temp  * 9.0/5.0) + 32;
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <readTempHum+0x188>)
 80029f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <readTempHum+0x194>)
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <readTempHum+0x198>)
 8002a10:	f7fd ff1c 	bl	800084c <__aeabi_ddiv>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <readTempHum+0x19c>)
 8002a22:	f7fd fc33 	bl	800028c <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4909      	ldr	r1, [pc, #36]	; (8002a50 <readTempHum+0x188>)
 8002a2c:	e9c1 2300 	strd	r2, r3, [r1]



}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	4064a000 	.word	0x4064a000
 8002a40:	200002bc 	.word	0x200002bc
 8002a44:	200004ac 	.word	0x200004ac
 8002a48:	40f00000 	.word	0x40f00000
 8002a4c:	40440000 	.word	0x40440000
 8002a50:	20001878 	.word	0x20001878
 8002a54:	40590000 	.word	0x40590000
 8002a58:	20001880 	.word	0x20001880
 8002a5c:	40220000 	.word	0x40220000
 8002a60:	40140000 	.word	0x40140000
 8002a64:	40400000 	.word	0x40400000

08002a68 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	circleBuffer[Buffer_Count++] = UART_Recieve_Buffer[0];
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_UART_RxCpltCallback+0x38>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	490a      	ldr	r1, [pc, #40]	; (8002aa0 <HAL_UART_RxCpltCallback+0x38>)
 8002a78:	600a      	str	r2, [r1, #0]
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_UART_RxCpltCallback+0x3c>)
 8002a7c:	7811      	ldrb	r1, [r2, #0]
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_UART_RxCpltCallback+0x40>)
 8002a80:	54d1      	strb	r1, [r2, r3]


	if(Buffer_Count == 4000)
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_UART_RxCpltCallback+0x38>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002a8a:	d102      	bne.n	8002a92 <HAL_UART_RxCpltCallback+0x2a>
		Buffer_Count = 0;
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_UART_RxCpltCallback+0x38>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20001860 	.word	0x20001860
 8002aa4:	2000185c 	.word	0x2000185c
 8002aa8:	200004d4 	.word	0x200004d4

08002aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab0:	b672      	cpsid	i
}
 8002ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <Error_Handler+0x8>
	...

08002ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_MspInit+0x44>)
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_MspInit+0x44>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_MspInit+0x44>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_MspInit+0x44>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_MspInit+0x44>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_MspInit+0x44>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_ADC_MspInit+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12e      	bne.n	8002b80 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10b      	bne.n	8002b4c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b64:	2302      	movs	r3, #2
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b68:	230b      	movs	r3, #11
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7a:	f001 ff99 	bl	8004ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b7e:	e032      	b.n	8002be6 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_ADC_MspInit+0xfc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12d      	bne.n	8002be6 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_ADC_MspInit+0xf4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_ADC_MspInit+0xf8>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bd0:	230b      	movs	r3, #11
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f001 ff65 	bl	8004ab0 <HAL_GPIO_Init>
}
 8002be6:	bf00      	nop
 8002be8:	3730      	adds	r7, #48	; 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	50040000 	.word	0x50040000
 8002bf4:	200018a0 	.word	0x200018a0
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	50040100 	.word	0x50040100

08002c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b0ac      	sub	sp, #176	; 0xb0
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2288      	movs	r2, #136	; 0x88
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f008 f864 	bl	800acee <memset>
  if(hi2c->Instance==I2C1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d13b      	bne.n	8002ca8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fdbd 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c48:	f7ff ff30 	bl	8002aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002c64:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6c:	2312      	movs	r3, #18
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <HAL_I2C_MspInit+0xb8>)
 8002c8c:	f001 ff10 	bl	8004ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ca8:	bf00      	nop
 8002caa:	37b0      	adds	r7, #176	; 0xb0
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	48000400 	.word	0x48000400

08002cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0a4      	sub	sp, #144	; 0x90
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	2288      	movs	r2, #136	; 0x88
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f008 f80e 	bl	800acee <memset>
  if(hrtc->Instance==RTC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_RTC_MspInit+0x6c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d120      	bne.n	8002d1e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fd64 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002cfa:	f7ff fed7 	bl	8002aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RTC_MspInit+0x70>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RTC_MspInit+0x70>)
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2029      	movs	r0, #41	; 0x29
 8002d14:	f001 fe17 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d18:	2029      	movs	r0, #41	; 0x29
 8002d1a:	f001 fe30 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d1e:	bf00      	nop
 8002d20:	3790      	adds	r7, #144	; 0x90
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40002800 	.word	0x40002800
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <HAL_SPI_MspInit+0xb4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d144      	bne.n	8002ddc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_SPI_MspInit+0xb8>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002daa:	2305      	movs	r3, #5
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <HAL_SPI_MspInit+0xbc>)
 8002db6:	f001 fe7b 	bl	8004ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4806      	ldr	r0, [pc, #24]	; (8002df0 <HAL_SPI_MspInit+0xc0>)
 8002dd8:	f001 fe6a 	bl	8004ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40021000 	.word	0x40021000
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000400 	.word	0x48000400

08002df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0ae      	sub	sp, #184	; 0xb8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	2288      	movs	r2, #136	; 0x88
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f007 ff6a 	bl	800acee <memset>
  if(huart->Instance==USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4a      	ldr	r2, [pc, #296]	; (8002f48 <HAL_UART_MspInit+0x154>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d145      	bne.n	8002eb0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fcc3 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e3c:	f7ff fe36 	bl	8002aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	4a41      	ldr	r2, [pc, #260]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4c:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e94:	4619      	mov	r1, r3
 8002e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9a:	f001 fe09 	bl	8004ab0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2025      	movs	r0, #37	; 0x25
 8002ea4:	f001 fd4f 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ea8:	2025      	movs	r0, #37	; 0x25
 8002eaa:	f001 fd68 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002eae:	e047      	b.n	8002f40 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d142      	bne.n	8002f40 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002eba:	2304      	movs	r3, #4
 8002ebc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fc78 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002ed2:	f7ff fdeb 	bl	8002aac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f06:	2330      	movs	r3, #48	; 0x30
 8002f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f1e:	2307      	movs	r3, #7
 8002f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480a      	ldr	r0, [pc, #40]	; (8002f54 <HAL_UART_MspInit+0x160>)
 8002f2c:	f001 fdc0 	bl	8004ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	2027      	movs	r0, #39	; 0x27
 8002f36:	f001 fd06 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f3a:	2027      	movs	r0, #39	; 0x27
 8002f3c:	f001 fd1f 	bl	800497e <HAL_NVIC_EnableIRQ>
}
 8002f40:	bf00      	nop
 8002f42:	37b8      	adds	r7, #184	; 0xb8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013800 	.word	0x40013800
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40004800 	.word	0x40004800
 8002f54:	48000800 	.word	0x48000800

08002f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f5c:	e7fe      	b.n	8002f5c <NMI_Handler+0x4>

08002f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <BusFault_Handler+0x4>

08002f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <UsageFault_Handler+0x4>

08002f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa4:	f000 f98e 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART1_IRQHandler+0x10>)
 8002fb2:	f005 fddd 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000398 	.word	0x20000398

08002fc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fc4:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <USART3_IRQHandler+0x20>)
 8002fc6:	f005 fdd3 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  channel = 0;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <USART3_IRQHandler+0x24>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART_Recieve_Buffer, 1);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4905      	ldr	r1, [pc, #20]	; (8002fe8 <USART3_IRQHandler+0x28>)
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <USART3_IRQHandler+0x20>)
 8002fd6:	f005 fd7f 	bl	8008ad8 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000420 	.word	0x20000420
 8002fe4:	2000186c 	.word	0x2000186c
 8002fe8:	2000185c 	.word	0x2000185c

08002fec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	hourlyReading = 1;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <RTC_Alarm_IRQHandler+0x14>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ff6:	4803      	ldr	r0, [pc, #12]	; (8003004 <RTC_Alarm_IRQHandler+0x18>)
 8002ff8:	f004 fc3e 	bl	8007878 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	2000189c 	.word	0x2000189c
 8003004:	20000310 	.word	0x20000310

08003008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_kill>:

int _kill(int pid, int sig)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003022:	f007 ff25 	bl	800ae70 <__errno>
 8003026:	4603      	mov	r3, r0
 8003028:	2216      	movs	r2, #22
 800302a:	601a      	str	r2, [r3, #0]
  return -1;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_exit>:

void _exit (int status)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ffe7 	bl	8003018 <_kill>
  while (1) {}    /* Make sure we hang here */
 800304a:	e7fe      	b.n	800304a <_exit+0x12>

0800304c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e00a      	b.n	8003074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800305e:	f3af 8000 	nop.w
 8003062:	4601      	mov	r1, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	b2ca      	uxtb	r2, r1
 800306c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	dbf0      	blt.n	800305e <_read+0x12>
  }

  return len;
 800307c:	687b      	ldr	r3, [r7, #4]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e009      	b.n	80030ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	60ba      	str	r2, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dbf1      	blt.n	8003098 <_write+0x12>
  }
  return len;
 80030b4:	687b      	ldr	r3, [r7, #4]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_close>:

int _close(int file)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030e6:	605a      	str	r2, [r3, #4]
  return 0;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_isatty>:

int _isatty(int file)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <_sbrk+0x5c>)
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_sbrk+0x60>)
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003158:	f007 fe8a 	bl	800ae70 <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20018000 	.word	0x20018000
 8003188:	00000400 	.word	0x00000400
 800318c:	200018a4 	.word	0x200018a4
 8003190:	200019f8 	.word	0x200019f8

08003194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <SystemInit+0x20>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <SystemInit+0x20>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031bc:	f7ff ffea 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031c2:	490d      	ldr	r1, [pc, #52]	; (80031f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <LoopForever+0xe>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d8:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <LoopForever+0x16>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031e6:	f007 fe49 	bl	800ae7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ea:	f7fd fe5b 	bl	8000ea4 <main>

080031ee <LoopForever>:

LoopForever:
    b LoopForever
 80031ee:	e7fe      	b.n	80031ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80031fc:	0800d500 	.word	0x0800d500
  ldr r2, =_sbss
 8003200:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003204:	200019f8 	.word	0x200019f8

08003208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC1_2_IRQHandler>
	...

0800320c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_Init+0x3c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <HAL_Init+0x3c>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003222:	2003      	movs	r0, #3
 8003224:	f001 fb84 	bl	8004930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003228:	2000      	movs	r0, #0
 800322a:	f000 f80f 	bl	800324c <HAL_InitTick>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	71fb      	strb	r3, [r7, #7]
 8003238:	e001      	b.n	800323e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323a:	f7ff fc3d 	bl	8002ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800323e:	79fb      	ldrb	r3, [r7, #7]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40022000 	.word	0x40022000

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_InitTick+0x6c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_InitTick+0x70>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_InitTick+0x6c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fb8f 	bl	800499a <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d809      	bhi.n	800329c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f001 fb59 	bl	8004946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_InitTick+0x74>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e007      	b.n	80032ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e004      	b.n	80032ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e001      	b.n	80032ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008
 80032e8:	200018a8 	.word	0x200018a8

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200018a8 	.word	0x200018a8

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000008 	.word	0x20000008

0800334c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	461a      	mov	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <LL_ADC_SetOffset+0x44>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	03fff000 	.word	0x03fff000

080033fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3360      	adds	r3, #96	; 0x60
 800340a:	461a      	mov	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3330      	adds	r3, #48	; 0x30
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	4413      	add	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	211f      	movs	r1, #31
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	f003 011f 	and.w	r1, r3, #31
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3314      	adds	r3, #20
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0e5b      	lsrs	r3, r3, #25
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0d1b      	lsrs	r3, r3, #20
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2107      	movs	r1, #7
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	401a      	ands	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0d1b      	lsrs	r3, r3, #20
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	431a      	orrs	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0318 	and.w	r3, r3, #24
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003558:	40d9      	lsrs	r1, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	400b      	ands	r3, r1
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	0007ffff 	.word	0x0007ffff

0800357c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 031f 	and.w	r3, r3, #31
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6093      	str	r3, [r2, #8]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003614:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363c:	d101      	bne.n	8003642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <LL_ADC_IsEnabled+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_ADC_IsEnabled+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d101      	bne.n	80036de <LL_ADC_REG_IsConversionOngoing+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d101      	bne.n	8003704 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e130      	b.n	8003990 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff f9df 	bl	8002b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff3f 	bl	80035d8 <LL_ADC_IsDeepPowerDownEnabled>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff25 	bl	80035b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff5a 	bl	8003628 <LL_ADC_IsInternalRegulatorEnabled>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff3e 	bl	8003600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003784:	4b84      	ldr	r3, [pc, #528]	; (8003998 <HAL_ADC_Init+0x284>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	4a84      	ldr	r2, [pc, #528]	; (800399c <HAL_ADC_Init+0x288>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003798:	e002      	b.n	80037a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3b01      	subs	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f9      	bne.n	800379a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff3c 	bl	8003628 <LL_ADC_IsInternalRegulatorEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff75 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 80037dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80c9 	bne.w	800397e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80c5 	bne.w	800397e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff35 	bl	8003678 <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003814:	4862      	ldr	r0, [pc, #392]	; (80039a0 <HAL_ADC_Init+0x28c>)
 8003816:	f7ff ff2f 	bl	8003678 <LL_ADC_IsEnabled>
 800381a:	4604      	mov	r4, r0
 800381c:	4861      	ldr	r0, [pc, #388]	; (80039a4 <HAL_ADC_Init+0x290>)
 800381e:	f7ff ff2b 	bl	8003678 <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	431c      	orrs	r4, r3
 8003826:	4860      	ldr	r0, [pc, #384]	; (80039a8 <HAL_ADC_Init+0x294>)
 8003828:	f7ff ff26 	bl	8003678 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4619      	mov	r1, r3
 800383a:	485c      	ldr	r0, [pc, #368]	; (80039ac <HAL_ADC_Init+0x298>)
 800383c:	f7ff fd86 	bl	800334c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7e5b      	ldrb	r3, [r3, #25]
 8003844:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800384a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003850:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003856:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	3b01      	subs	r3, #1
 8003874:	045b      	lsls	r3, r3, #17
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4b44      	ldr	r3, [pc, #272]	; (80039b0 <HAL_ADC_Init+0x29c>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	69b9      	ldr	r1, [r7, #24]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff1b 	bl	80036ec <LL_ADC_INJ_IsConversionOngoing>
 80038b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d13d      	bne.n	800393a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13a      	bne.n	800393a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e0:	f023 0302 	bic.w	r3, r3, #2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	69b9      	ldr	r1, [r7, #24]
 80038ea:	430b      	orrs	r3, r1
 80038ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d118      	bne.n	800392a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800391a:	430a      	orrs	r2, r1
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	611a      	str	r2, [r3, #16]
 8003928:	e007      	b.n	800393a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10c      	bne.n	800395c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f023 010f 	bic.w	r1, r3, #15
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
 800395a:	e007      	b.n	800396c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 020f 	bic.w	r2, r2, #15
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
 800397c:	e007      	b.n	800398e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800398e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3724      	adds	r7, #36	; 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	20000000 	.word	0x20000000
 800399c:	053e2d63 	.word	0x053e2d63
 80039a0:	50040000 	.word	0x50040000
 80039a4:	50040100 	.word	0x50040100
 80039a8:	50040200 	.word	0x50040200
 80039ac:	50040300 	.word	0x50040300
 80039b0:	fff0c007 	.word	0xfff0c007

080039b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039bc:	4857      	ldr	r0, [pc, #348]	; (8003b1c <HAL_ADC_Start+0x168>)
 80039be:	f7ff fddd 	bl	800357c <LL_ADC_GetMultimode>
 80039c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fe7c 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 809c 	bne.w	8003b0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_ADC_Start+0x30>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e097      	b.n	8003b14 <HAL_ADC_Start+0x160>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fd73 	bl	80044d8 <ADC_Enable>
 80039f2:	4603      	mov	r3, r0
 80039f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 8083 	bne.w	8003b04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <HAL_ADC_Start+0x16c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d002      	beq.n	8003a22 <HAL_ADC_Start+0x6e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	e000      	b.n	8003a24 <HAL_ADC_Start+0x70>
 8003a22:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <HAL_ADC_Start+0x170>)
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d002      	beq.n	8003a32 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d106      	bne.n	8003a5a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f023 0206 	bic.w	r2, r3, #6
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	659a      	str	r2, [r3, #88]	; 0x58
 8003a58:	e002      	b.n	8003a60 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	221c      	movs	r2, #28
 8003a66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <HAL_ADC_Start+0x16c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d002      	beq.n	8003a80 <HAL_ADC_Start+0xcc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	e000      	b.n	8003a82 <HAL_ADC_Start+0xce>
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_ADC_Start+0x170>)
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d008      	beq.n	8003a9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d002      	beq.n	8003a9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d114      	bne.n	8003ac6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ab2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fded 	bl	800369e <LL_ADC_REG_StartConversion>
 8003ac4:	e025      	b.n	8003b12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_ADC_Start+0x16c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d002      	beq.n	8003ae2 <HAL_ADC_Start+0x12e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e000      	b.n	8003ae4 <HAL_ADC_Start+0x130>
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_ADC_Start+0x170>)
 8003ae4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00f      	beq.n	8003b12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
 8003b02:	e006      	b.n	8003b12 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b0c:	e001      	b.n	8003b12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	50040300 	.word	0x50040300
 8003b20:	50040100 	.word	0x50040100
 8003b24:	50040000 	.word	0x50040000

08003b28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b32:	4866      	ldr	r0, [pc, #408]	; (8003ccc <HAL_ADC_PollForConversion+0x1a4>)
 8003b34:	f7ff fd22 	bl	800357c <LL_ADC_GetMultimode>
 8003b38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d102      	bne.n	8003b48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b42:	2308      	movs	r3, #8
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e02a      	b.n	8003b9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d002      	beq.n	8003b5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d111      	bne.n	8003b7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0a4      	b.n	8003cc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b78:	2304      	movs	r3, #4
 8003b7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b7c:	e00f      	b.n	8003b9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b7e:	4853      	ldr	r0, [pc, #332]	; (8003ccc <HAL_ADC_PollForConversion+0x1a4>)
 8003b80:	f7ff fd0a 	bl	8003598 <LL_ADC_GetMultiDMATransfer>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e093      	b.n	8003cc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b9e:	f7ff fba5 	bl	80032ec <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ba4:	e021      	b.n	8003bea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01d      	beq.n	8003bea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bae:	f7ff fb9d 	bl	80032ec <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <HAL_ADC_PollForConversion+0x9c>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d112      	bne.n	8003bea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e06b      	b.n	8003cc2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0d6      	beq.n	8003ba6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fc28 	bl	800345e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01c      	beq.n	8003c4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e5b      	ldrb	r3, [r3, #25]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d118      	bne.n	8003c4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d111      	bne.n	8003c4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_ADC_PollForConversion+0x1a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d002      	beq.n	8003c5e <HAL_ADC_PollForConversion+0x136>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e000      	b.n	8003c60 <HAL_ADC_PollForConversion+0x138>
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_ADC_PollForConversion+0x1ac>)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d008      	beq.n	8003c7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d002      	beq.n	8003c7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	d104      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e00c      	b.n	8003c9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_ADC_PollForConversion+0x1a8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d002      	beq.n	8003c94 <HAL_ADC_PollForConversion+0x16c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e000      	b.n	8003c96 <HAL_ADC_PollForConversion+0x16e>
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_ADC_PollForConversion+0x1ac>)
 8003c96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d104      	bne.n	8003cae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e008      	b.n	8003cc0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	50040300 	.word	0x50040300
 8003cd0:	50040100 	.word	0x50040100
 8003cd4:	50040000 	.word	0x50040000

08003cd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0b6      	sub	sp, #216	; 0xd8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x22>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e3c9      	b.n	80044aa <HAL_ADC_ConfigChannel+0x7b6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fccf 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 83aa 	bne.w	8004484 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d824      	bhi.n	8003d8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3b02      	subs	r3, #2
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d81b      	bhi.n	8003d82 <HAL_ADC_ConfigChannel+0x8e>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_ADC_ConfigChannel+0x5c>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d69 	.word	0x08003d69
 8003d58:	08003d71 	.word	0x08003d71
 8003d5c:	08003d79 	.word	0x08003d79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003d60:	230c      	movs	r3, #12
 8003d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d66:	e010      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003d68:	2312      	movs	r3, #18
 8003d6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003d70:	2318      	movs	r3, #24
 8003d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d76:	e008      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003d82:	2306      	movs	r3, #6
 8003d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003d98:	f7ff fb74 	bl	8003484 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fc90 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 8003da6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fc9c 	bl	80036ec <LL_ADC_INJ_IsConversionOngoing>
 8003db4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 81a4 	bne.w	800410a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 819f 	bne.w	800410a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f7ff fb7f 	bl	80034dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d00a      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6919      	ldr	r1, [r3, #16]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e10:	f7ff fad0 	bl	80033b4 <LL_ADC_SetOffset>
 8003e14:	e179      	b.n	800410a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff faed 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x14e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fae2 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	0e9b      	lsrs	r3, r3, #26
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	e01e      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x18c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fad7 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003e70:	2320      	movs	r3, #32
 8003e72:	e004      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x1a4>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	e018      	b.n	8003eca <HAL_ADC_ConfigChannel+0x1d6>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d106      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff faa6 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fa8a 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x214>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fa7f 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	0e9b      	lsrs	r3, r3, #26
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	e01e      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x252>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fa74 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003f36:	2320      	movs	r3, #32
 8003f38:	e004      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x26a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0e9b      	lsrs	r3, r3, #26
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	e018      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x29c>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e004      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fa43 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fa27 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x2da>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fa1c 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	0e9b      	lsrs	r3, r3, #26
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	e01e      	b.n	800400c <HAL_ADC_ConfigChannel+0x318>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fa11 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e004      	b.n	800400a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x330>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	e014      	b.n	800404e <HAL_ADC_ConfigChannel+0x35a>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e004      	b.n	800404e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800404e:	429a      	cmp	r2, r3
 8004050:	d106      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff f9e4 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2103      	movs	r1, #3
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff f9c8 	bl	80033fc <LL_ADC_GetOffsetChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_ADC_ConfigChannel+0x398>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2103      	movs	r1, #3
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff f9bd 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 021f 	and.w	r2, r3, #31
 800408a:	e017      	b.n	80040bc <HAL_ADC_ConfigChannel+0x3c8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2103      	movs	r1, #3
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff f9b2 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80040b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x3e0>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	e011      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x404>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80040f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d106      	bne.n	800410a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	2103      	movs	r1, #3
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff f98f 	bl	8003428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fab2 	bl	8003678 <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 8140 	bne.w	800439c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	461a      	mov	r2, r3
 800412a:	f7ff fa03 	bl	8003534 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a8f      	ldr	r2, [pc, #572]	; (8004370 <HAL_ADC_ConfigChannel+0x67c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	f040 8131 	bne.w	800439c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x46e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0e9b      	lsrs	r3, r3, #26
 8004150:	3301      	adds	r3, #1
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2b09      	cmp	r3, #9
 8004158:	bf94      	ite	ls
 800415a:	2301      	movls	r3, #1
 800415c:	2300      	movhi	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e019      	b.n	8004196 <HAL_ADC_ConfigChannel+0x4a2>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800417a:	2320      	movs	r3, #32
 800417c:	e003      	b.n	8004186 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2b09      	cmp	r3, #9
 800418e:	bf94      	ite	ls
 8004190:	2301      	movls	r3, #1
 8004192:	2300      	movhi	r3, #0
 8004194:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004196:	2b00      	cmp	r3, #0
 8004198:	d079      	beq.n	800428e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x4c2>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	3301      	adds	r3, #1
 80041ae:	069b      	lsls	r3, r3, #26
 80041b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b4:	e015      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x4ee>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e003      	b.n	80041da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	069b      	lsls	r3, r3, #26
 80041de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x50e>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0e9b      	lsrs	r3, r3, #26
 80041f4:	3301      	adds	r3, #1
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	e017      	b.n	8004232 <HAL_ADC_ConfigChannel+0x53e>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800421a:	2320      	movs	r3, #32
 800421c:	e003      	b.n	8004226 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800421e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	ea42 0103 	orr.w	r1, r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x564>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0e9b      	lsrs	r3, r3, #26
 8004248:	3301      	adds	r3, #1
 800424a:	f003 021f 	and.w	r2, r3, #31
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	051b      	lsls	r3, r3, #20
 8004256:	e018      	b.n	800428a <HAL_ADC_ConfigChannel+0x596>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004270:	2320      	movs	r3, #32
 8004272:	e003      	b.n	800427c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f003 021f 	and.w	r2, r3, #31
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800428a:	430b      	orrs	r3, r1
 800428c:	e081      	b.n	8004392 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x5b6>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0e9b      	lsrs	r3, r3, #26
 80042a0:	3301      	adds	r3, #1
 80042a2:	069b      	lsls	r3, r3, #26
 80042a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042a8:	e015      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x5e2>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80042c2:	2320      	movs	r3, #32
 80042c4:	e003      	b.n	80042ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	069b      	lsls	r3, r3, #26
 80042d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x602>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0e9b      	lsrs	r3, r3, #26
 80042e8:	3301      	adds	r3, #1
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	e017      	b.n	8004326 <HAL_ADC_ConfigChannel+0x632>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	61bb      	str	r3, [r7, #24]
  return result;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800430e:	2320      	movs	r3, #32
 8004310:	e003      	b.n	800431a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	3301      	adds	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	ea42 0103 	orr.w	r1, r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x65e>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	0e9b      	lsrs	r3, r3, #26
 800433c:	3301      	adds	r3, #1
 800433e:	f003 021f 	and.w	r2, r3, #31
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	3b1e      	subs	r3, #30
 800434a:	051b      	lsls	r3, r3, #20
 800434c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004350:	e01e      	b.n	8004390 <HAL_ADC_ConfigChannel+0x69c>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	60fb      	str	r3, [r7, #12]
  return result;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800436a:	2320      	movs	r3, #32
 800436c:	e006      	b.n	800437c <HAL_ADC_ConfigChannel+0x688>
 800436e:	bf00      	nop
 8004370:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f003 021f 	and.w	r2, r3, #31
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	3b1e      	subs	r3, #30
 800438a:	051b      	lsls	r3, r3, #20
 800438c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004390:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004396:	4619      	mov	r1, r3
 8004398:	f7ff f8a0 	bl	80034dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d07a      	beq.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a8:	4843      	ldr	r0, [pc, #268]	; (80044b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80043aa:	f7fe fff5 	bl	8003398 <LL_ADC_GetCommonPathInternalCh>
 80043ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a41      	ldr	r2, [pc, #260]	; (80044bc <HAL_ADC_ConfigChannel+0x7c8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d12c      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d126      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x6e8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <HAL_ADC_ConfigChannel+0x7d0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d15d      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043e4:	4619      	mov	r1, r3
 80043e6:	4834      	ldr	r0, [pc, #208]	; (80044b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80043e8:	f7fe ffc3 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_ADC_ConfigChannel+0x7d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	4a36      	ldr	r2, [pc, #216]	; (80044cc <HAL_ADC_ConfigChannel+0x7d8>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004406:	e002      	b.n	800440e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3b01      	subs	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f9      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004414:	e040      	b.n	8004498 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d118      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d112      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_ADC_ConfigChannel+0x74c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d12d      	bne.n	800449c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004448:	4619      	mov	r1, r3
 800444a:	481b      	ldr	r0, [pc, #108]	; (80044b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800444c:	f7fe ff91 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004450:	e024      	b.n	800449c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d120      	bne.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800445c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11a      	bne.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d115      	bne.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800447a:	4619      	mov	r1, r3
 800447c:	480e      	ldr	r0, [pc, #56]	; (80044b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800447e:	f7fe ff78 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
 8004482:	e00c      	b.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	f043 0220 	orr.w	r2, r3, #32
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004496:	e002      	b.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004498:	bf00      	nop
 800449a:	e000      	b.n	800449e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800449c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	37d8      	adds	r7, #216	; 0xd8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	80080000 	.word	0x80080000
 80044b8:	50040300 	.word	0x50040300
 80044bc:	c7520000 	.word	0xc7520000
 80044c0:	50040000 	.word	0x50040000
 80044c4:	50040200 	.word	0x50040200
 80044c8:	20000000 	.word	0x20000000
 80044cc:	053e2d63 	.word	0x053e2d63
 80044d0:	cb840000 	.word	0xcb840000
 80044d4:	80000001 	.word	0x80000001

080044d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff f8c5 	bl	8003678 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d169      	bne.n	80045c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <ADC_Enable+0xfc>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0210 	orr.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e055      	b.n	80045ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f894 	bl	8003650 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004528:	482b      	ldr	r0, [pc, #172]	; (80045d8 <ADC_Enable+0x100>)
 800452a:	f7fe ff35 	bl	8003398 <LL_ADC_GetCommonPathInternalCh>
 800452e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <ADC_Enable+0x104>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <ADC_Enable+0x108>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004552:	e002      	b.n	800455a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3b01      	subs	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f9      	bne.n	8004554 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004560:	f7fe fec4 	bl	80032ec <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004566:	e028      	b.n	80045ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f883 	bl	8003678 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f867 	bl	8003650 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004582:	f7fe feb3 	bl	80032ec <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d914      	bls.n	80045ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d00d      	beq.n	80045ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e007      	b.n	80045ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d1cf      	bne.n	8004568 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	8000003f 	.word	0x8000003f
 80045d8:	50040300 	.word	0x50040300
 80045dc:	20000000 	.word	0x20000000
 80045e0:	053e2d63 	.word	0x053e2d63

080045e4 <LL_ADC_IsEnabled>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <LL_ADC_IsEnabled+0x18>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <LL_ADC_IsEnabled+0x1a>
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_ADC_REG_IsConversionOngoing>:
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b04      	cmp	r3, #4
 800461c:	d101      	bne.n	8004622 <LL_ADC_REG_IsConversionOngoing+0x18>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b09f      	sub	sp, #124	; 0x7c
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800464a:	2302      	movs	r3, #2
 800464c:	e093      	b.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004656:	2300      	movs	r3, #0
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800465a:	2300      	movs	r3, #0
 800465c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a47      	ldr	r2, [pc, #284]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d102      	bne.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004668:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	e001      	b.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e072      	b.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ffb9 	bl	800460a <LL_ADC_REG_IsConversionOngoing>
 8004698:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ffb3 	bl	800460a <LL_ADC_REG_IsConversionOngoing>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d154      	bne.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d151      	bne.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80046b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02c      	beq.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ce:	035b      	lsls	r3, r3, #13
 80046d0:	430b      	orrs	r3, r1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046d8:	4829      	ldr	r0, [pc, #164]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046da:	f7ff ff83 	bl	80045e4 <LL_ADC_IsEnabled>
 80046de:	4604      	mov	r4, r0
 80046e0:	4828      	ldr	r0, [pc, #160]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046e2:	f7ff ff7f 	bl	80045e4 <LL_ADC_IsEnabled>
 80046e6:	4603      	mov	r3, r0
 80046e8:	431c      	orrs	r4, r3
 80046ea:	4828      	ldr	r0, [pc, #160]	; (800478c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80046ec:	f7ff ff7a 	bl	80045e4 <LL_ADC_IsEnabled>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4323      	orrs	r3, r4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d137      	bne.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004700:	f023 030f 	bic.w	r3, r3, #15
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	430a      	orrs	r2, r1
 800470e:	431a      	orrs	r2, r3
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004714:	e028      	b.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004722:	4817      	ldr	r0, [pc, #92]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004724:	f7ff ff5e 	bl	80045e4 <LL_ADC_IsEnabled>
 8004728:	4604      	mov	r4, r0
 800472a:	4816      	ldr	r0, [pc, #88]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800472c:	f7ff ff5a 	bl	80045e4 <LL_ADC_IsEnabled>
 8004730:	4603      	mov	r3, r0
 8004732:	431c      	orrs	r4, r3
 8004734:	4815      	ldr	r0, [pc, #84]	; (800478c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004736:	f7ff ff55 	bl	80045e4 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	4323      	orrs	r3, r4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d112      	bne.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800474a:	f023 030f 	bic.w	r3, r3, #15
 800474e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004750:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004752:	e009      	b.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004766:	e000      	b.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004768:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004772:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004776:	4618      	mov	r0, r3
 8004778:	377c      	adds	r7, #124	; 0x7c
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}
 800477e:	bf00      	nop
 8004780:	50040000 	.word	0x50040000
 8004784:	50040100 	.word	0x50040100
 8004788:	50040300 	.word	0x50040300
 800478c:	50040200 	.word	0x50040200

08004790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047ac:	4013      	ands	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047c2:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	60d3      	str	r3, [r2, #12]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <__NVIC_GetPriorityGrouping+0x18>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 0307 	and.w	r3, r3, #7
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	2b00      	cmp	r3, #0
 8004804:	db0b      	blt.n	800481e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	f003 021f 	and.w	r2, r3, #31
 800480c:	4907      	ldr	r1, [pc, #28]	; (800482c <__NVIC_EnableIRQ+0x38>)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2001      	movs	r0, #1
 8004816:	fa00 f202 	lsl.w	r2, r0, r2
 800481a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000e100 	.word	0xe000e100

08004830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	2b00      	cmp	r3, #0
 8004842:	db0a      	blt.n	800485a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <__NVIC_SetPriority+0x4c>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	440b      	add	r3, r1
 8004854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004858:	e00a      	b.n	8004870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4908      	ldr	r1, [pc, #32]	; (8004880 <__NVIC_SetPriority+0x50>)
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3b04      	subs	r3, #4
 8004868:	0112      	lsls	r2, r2, #4
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	440b      	add	r3, r1
 800486e:	761a      	strb	r2, [r3, #24]
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000e100 	.word	0xe000e100
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f1c3 0307 	rsb	r3, r3, #7
 800489e:	2b04      	cmp	r3, #4
 80048a0:	bf28      	it	cs
 80048a2:	2304      	movcs	r3, #4
 80048a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d902      	bls.n	80048b4 <NVIC_EncodePriority+0x30>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3b03      	subs	r3, #3
 80048b2:	e000      	b.n	80048b6 <NVIC_EncodePriority+0x32>
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	401a      	ands	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048cc:	f04f 31ff 	mov.w	r1, #4294967295
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	43d9      	mvns	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	4313      	orrs	r3, r2
         );
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048fc:	d301      	bcc.n	8004902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048fe:	2301      	movs	r3, #1
 8004900:	e00f      	b.n	8004922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <SysTick_Config+0x40>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490a:	210f      	movs	r1, #15
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	f7ff ff8e 	bl	8004830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <SysTick_Config+0x40>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <SysTick_Config+0x40>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010

08004930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff29 	bl	8004790 <__NVIC_SetPriorityGrouping>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004958:	f7ff ff3e 	bl	80047d8 <__NVIC_GetPriorityGrouping>
 800495c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff ff8e 	bl	8004884 <NVIC_EncodePriority>
 8004968:	4602      	mov	r2, r0
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff5d 	bl	8004830 <__NVIC_SetPriority>
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff31 	bl	80047f4 <__NVIC_EnableIRQ>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ffa2 	bl	80048ec <SysTick_Config>
 80049a8:	4603      	mov	r3, r0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d008      	beq.n	80049dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e022      	b.n	8004a22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 020e 	bic.w	r2, r2, #14
 80049ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	f003 021c 	and.w	r2, r3, #28
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d005      	beq.n	8004a52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e029      	b.n	8004aa6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 020e 	bic.w	r2, r2, #14
 8004a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f003 021c 	and.w	r2, r3, #28
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
    }
  }
  return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004abe:	e17f      	b.n	8004dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8171 	beq.w	8004dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d005      	beq.n	8004af0 <HAL_GPIO_Init+0x40>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d130      	bne.n	8004b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	2203      	movs	r2, #3
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b26:	2201      	movs	r2, #1
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0201 	and.w	r2, r3, #1
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d118      	bne.n	8004b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004b64:	2201      	movs	r2, #1
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4013      	ands	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	08db      	lsrs	r3, r3, #3
 8004b7a:	f003 0201 	and.w	r2, r3, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d017      	beq.n	8004bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d123      	bne.n	8004c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	08da      	lsrs	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3208      	adds	r2, #8
 8004be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	220f      	movs	r2, #15
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	08da      	lsrs	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3208      	adds	r2, #8
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0203 	and.w	r2, r3, #3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80ac 	beq.w	8004dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c62:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_GPIO_Init+0x330>)
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	4a5e      	ldr	r2, [pc, #376]	; (8004de0 <HAL_GPIO_Init+0x330>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	; (8004de0 <HAL_GPIO_Init+0x330>)
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c7a:	4a5a      	ldr	r2, [pc, #360]	; (8004de4 <HAL_GPIO_Init+0x334>)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3302      	adds	r3, #2
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	220f      	movs	r2, #15
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ca4:	d025      	beq.n	8004cf2 <HAL_GPIO_Init+0x242>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a4f      	ldr	r2, [pc, #316]	; (8004de8 <HAL_GPIO_Init+0x338>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01f      	beq.n	8004cee <HAL_GPIO_Init+0x23e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <HAL_GPIO_Init+0x33c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d019      	beq.n	8004cea <HAL_GPIO_Init+0x23a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4d      	ldr	r2, [pc, #308]	; (8004df0 <HAL_GPIO_Init+0x340>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_GPIO_Init+0x236>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a4c      	ldr	r2, [pc, #304]	; (8004df4 <HAL_GPIO_Init+0x344>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_GPIO_Init+0x232>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4b      	ldr	r2, [pc, #300]	; (8004df8 <HAL_GPIO_Init+0x348>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <HAL_GPIO_Init+0x22e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4a      	ldr	r2, [pc, #296]	; (8004dfc <HAL_GPIO_Init+0x34c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_GPIO_Init+0x22a>
 8004cd6:	2306      	movs	r3, #6
 8004cd8:	e00c      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e00a      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004cde:	2305      	movs	r3, #5
 8004ce0:	e008      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e006      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e004      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e002      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_GPIO_Init+0x244>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	f002 0203 	and.w	r2, r2, #3
 8004cfa:	0092      	lsls	r2, r2, #2
 8004cfc:	4093      	lsls	r3, r2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d04:	4937      	ldr	r1, [pc, #220]	; (8004de4 <HAL_GPIO_Init+0x334>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d36:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d3c:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d60:	4a27      	ldr	r2, [pc, #156]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004db4:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <HAL_GPIO_Init+0x350>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f47f ae78 	bne.w	8004ac0 <HAL_GPIO_Init+0x10>
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40010000 	.word	0x40010000
 8004de8:	48000400 	.word	0x48000400
 8004dec:	48000800 	.word	0x48000800
 8004df0:	48000c00 	.word	0x48000c00
 8004df4:	48001000 	.word	0x48001000
 8004df8:	48001400 	.word	0x48001400
 8004dfc:	48001800 	.word	0x48001800
 8004e00:	40010400 	.word	0x40010400

08004e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	807b      	strh	r3, [r7, #2]
 8004e10:	4613      	mov	r3, r2
 8004e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e14:	787b      	ldrb	r3, [r7, #1]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e20:	e002      	b.n	8004e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e08d      	b.n	8004f62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd fed0 	bl	8002c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	; 0x24
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e006      	b.n	8004ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d108      	bne.n	8004ed6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	e007      	b.n	8004ee6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	460b      	mov	r3, r1
 8004f7a:	817b      	strh	r3, [r7, #10]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	f040 80fd 	bne.w	8005188 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2C_Master_Transmit+0x30>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0f6      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fe f9a2 	bl	80032ec <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2319      	movs	r3, #25
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa0a 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0e1      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2221      	movs	r2, #33	; 0x21
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	893a      	ldrh	r2, [r7, #8]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2bff      	cmp	r3, #255	; 0xff
 8004ff6:	d906      	bls.n	8005006 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	22ff      	movs	r2, #255	; 0xff
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e007      	b.n	8005016 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005014:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d024      	beq.n	8005068 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	8979      	ldrh	r1, [r7, #10]
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <HAL_I2C_Master_Transmit+0x228>)
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fbf1 	bl	8005848 <I2C_TransferConfig>
 8005066:	e066      	b.n	8005136 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	b2da      	uxtb	r2, r3
 800506e:	8979      	ldrh	r1, [r7, #10]
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <HAL_I2C_Master_Transmit+0x228>)
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fbe6 	bl	8005848 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800507c:	e05b      	b.n	8005136 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f9f3 	bl	800546e <I2C_WaitOnTXISFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07b      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	781a      	ldrb	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d034      	beq.n	8005136 <HAL_I2C_Master_Transmit+0x1ca>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d130      	bne.n	8005136 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2200      	movs	r2, #0
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f976 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e04d      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2bff      	cmp	r3, #255	; 0xff
 80050f6:	d90e      	bls.n	8005116 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	b2da      	uxtb	r2, r3
 8005104:	8979      	ldrh	r1, [r7, #10]
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fb9a 	bl	8005848 <I2C_TransferConfig>
 8005114:	e00f      	b.n	8005136 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fb89 	bl	8005848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d19e      	bne.n	800507e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d9 	bl	80054fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e01a      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2220      	movs	r2, #32
 800515a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <HAL_I2C_Master_Transmit+0x22c>)
 8005168:	400b      	ands	r3, r1
 800516a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	80002000 	.word	0x80002000
 8005198:	fe00e800 	.word	0xfe00e800

0800519c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	460b      	mov	r3, r1
 80051aa:	817b      	strh	r3, [r7, #10]
 80051ac:	4613      	mov	r3, r2
 80051ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	f040 80db 	bne.w	8005374 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_I2C_Master_Receive+0x30>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e0d4      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051d4:	f7fe f88a 	bl	80032ec <HAL_GetTick>
 80051d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2319      	movs	r3, #25
 80051e0:	2201      	movs	r2, #1
 80051e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f8f2 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0bf      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2222      	movs	r2, #34	; 0x22
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2210      	movs	r2, #16
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	893a      	ldrh	r2, [r7, #8]
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	2bff      	cmp	r3, #255	; 0xff
 8005226:	d90e      	bls.n	8005246 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8979      	ldrh	r1, [r7, #10]
 8005236:	4b52      	ldr	r3, [pc, #328]	; (8005380 <HAL_I2C_Master_Receive+0x1e4>)
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fb02 	bl	8005848 <I2C_TransferConfig>
 8005244:	e06d      	b.n	8005322 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	4b49      	ldr	r3, [pc, #292]	; (8005380 <HAL_I2C_Master_Receive+0x1e4>)
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 faf1 	bl	8005848 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005266:	e05c      	b.n	8005322 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	6a39      	ldr	r1, [r7, #32]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f989 	bl	8005584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e07c      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d034      	beq.n	8005322 <HAL_I2C_Master_Receive+0x186>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d130      	bne.n	8005322 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f880 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e04d      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2bff      	cmp	r3, #255	; 0xff
 80052e2:	d90e      	bls.n	8005302 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	22ff      	movs	r2, #255	; 0xff
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	8979      	ldrh	r1, [r7, #10]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 faa4 	bl	8005848 <I2C_TransferConfig>
 8005300:	e00f      	b.n	8005322 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fa93 	bl	8005848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d19d      	bne.n	8005268 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	6a39      	ldr	r1, [r7, #32]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f8e3 	bl	80054fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01a      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2220      	movs	r2, #32
 8005346:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_I2C_Master_Receive+0x1e8>)
 8005354:	400b      	ands	r3, r1
 8005356:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	80002400 	.word	0x80002400
 8005384:	fe00e800 	.word	0xfe00e800

08005388 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d007      	beq.n	80053c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	619a      	str	r2, [r3, #24]
  }
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e0:	e031      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d02d      	beq.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fd ff7f 	bl	80032ec <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d122      	bne.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	d113      	bne.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00f      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d0be      	beq.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800547a:	e033      	b.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f901 	bl	8005688 <I2C_IsErrorOccurred>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e031      	b.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d025      	beq.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fd ff28 	bl	80032ec <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11a      	bne.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d013      	beq.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e007      	b.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d1c4      	bne.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005508:	e02f      	b.n	800556a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8ba 	bl	8005688 <I2C_IsErrorOccurred>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e02d      	b.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fd fee5 	bl	80032ec <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11a      	bne.n	800556a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b20      	cmp	r3, #32
 8005540:	d013      	beq.n	800556a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e007      	b.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d1c8      	bne.n	800550a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005590:	e06b      	b.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f876 	bl	8005688 <I2C_IsErrorOccurred>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e069      	b.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d138      	bne.n	8005626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d105      	bne.n	80055ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e055      	b.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d107      	bne.n	80055ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2210      	movs	r2, #16
 80055e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2204      	movs	r2, #4
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
 80055ea:	e002      	b.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2220      	movs	r2, #32
 80055f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005606:	400b      	ands	r3, r1
 8005608:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e029      	b.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fd fe61 	bl	80032ec <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d116      	bne.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00f      	beq.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e007      	b.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d18c      	bne.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	fe00e800 	.word	0xfe00e800

08005688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d068      	beq.n	8005786 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056bc:	e049      	b.n	8005752 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d045      	beq.n	8005752 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fd fe11 	bl	80032ec <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_IsErrorOccurred+0x54>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d13a      	bne.n	8005752 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fe:	d121      	bne.n	8005744 <I2C_IsErrorOccurred+0xbc>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005706:	d01d      	beq.n	8005744 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b20      	cmp	r3, #32
 800570c:	d01a      	beq.n	8005744 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800571c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800571e:	f7fd fde5 	bl	80032ec <HAL_GetTick>
 8005722:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005724:	e00e      	b.n	8005744 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005726:	f7fd fde1 	bl	80032ec <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b19      	cmp	r3, #25
 8005732:	d907      	bls.n	8005744 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005742:	e006      	b.n	8005752 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	d1e9      	bne.n	8005726 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b20      	cmp	r3, #32
 800575e:	d003      	beq.n	8005768 <I2C_IsErrorOccurred+0xe0>
 8005760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0aa      	beq.n	80056be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2220      	movs	r2, #32
 8005776:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f043 0304 	orr.w	r3, r3, #4
 800577e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f043 0308 	orr.w	r3, r3, #8
 80057c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80057f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01c      	beq.n	8005836 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff fdc3 	bl	8005388 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <I2C_IsErrorOccurred+0x1bc>)
 800580e:	400b      	ands	r3, r1
 8005810:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800583a:	4618      	mov	r0, r3
 800583c:	3728      	adds	r7, #40	; 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	fe00e800 	.word	0xfe00e800

08005848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	4613      	mov	r3, r2
 8005858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005860:	7a7b      	ldrb	r3, [r7, #9]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005868:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	4313      	orrs	r3, r2
 8005872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005876:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	0d5b      	lsrs	r3, r3, #21
 8005882:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <I2C_TransferConfig+0x60>)
 8005888:	430b      	orrs	r3, r1
 800588a:	43db      	mvns	r3, r3
 800588c:	ea02 0103 	and.w	r1, r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	03ff63ff 	.word	0x03ff63ff

080058ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d138      	bne.n	8005934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e032      	b.n	8005936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b20      	cmp	r3, #32
 8005956:	d139      	bne.n	80059cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005962:	2302      	movs	r3, #2
 8005964:	e033      	b.n	80059ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2224      	movs	r2, #36	; 0x24
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40007000 	.word	0x40007000

080059fc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1a:	d10e      	bne.n	8005a3a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005a1c:	f000 f896 	bl	8005b4c <HAL_PWREx_DisableLowPowerRunMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005a26:	e016      	b.n	8005a56 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a34:	d001      	beq.n	8005a3a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005a36:	f000 f879 	bl	8005b2c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005a4c:	bf30      	wfi
 8005a4e:	e002      	b.n	8005a56 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a50:	bf40      	sev
    __WFE();
 8005a52:	bf20      	wfe
    __WFE();
 8005a54:	bf20      	wfe
  }

}
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	e000ed00 	.word	0xe000ed00

08005a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40007000 	.word	0x40007000

08005a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8e:	d130      	bne.n	8005af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a90:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d038      	beq.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2232      	movs	r2, #50	; 0x32
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0c9b      	lsrs	r3, r3, #18
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac4:	e002      	b.n	8005acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d102      	bne.n	8005ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f2      	bne.n	8005ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aec:	d110      	bne.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e00f      	b.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afe:	d007      	beq.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b08:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40007000 	.word	0x40007000
 8005b24:	20000000 	.word	0x20000000
 8005b28:	431bde83 	.word	0x431bde83

08005b2c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40007000 	.word	0x40007000

08005b4c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b5c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2232      	movs	r2, #50	; 0x32
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	0c9b      	lsrs	r3, r3, #18
 8005b70:	3301      	adds	r3, #1
 8005b72:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005b74:	e002      	b.n	8005b7c <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d102      	bne.n	8005b90 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f2      	bne.n	8005b76 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d101      	bne.n	8005ba2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e000      	b.n	8005ba4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	20000000 	.word	0x20000000
 8005bb8:	431bde83 	.word	0x431bde83

08005bbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e3ca      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bce:	4b97      	ldr	r3, [pc, #604]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd8:	4b94      	ldr	r3, [pc, #592]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80e4 	beq.w	8005db8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_RCC_OscConfig+0x4a>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	f040 808b 	bne.w	8005d14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f040 8087 	bne.w	8005d14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c06:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_RCC_OscConfig+0x62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e3a2      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	4b82      	ldr	r3, [pc, #520]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_RCC_OscConfig+0x7c>
 8005c2e:	4b7f      	ldr	r3, [pc, #508]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c36:	e005      	b.n	8005c44 <HAL_RCC_OscConfig+0x88>
 8005c38:	4b7c      	ldr	r3, [pc, #496]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d223      	bcs.n	8005c90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fd55 	bl	80066fc <RCC_SetFlashLatencyFromMSIRange>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e383      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c5c:	4b73      	ldr	r3, [pc, #460]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a72      	ldr	r2, [pc, #456]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c62:	f043 0308 	orr.w	r3, r3, #8
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b70      	ldr	r3, [pc, #448]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	496d      	ldr	r1, [pc, #436]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c7a:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	4968      	ldr	r1, [pc, #416]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	604b      	str	r3, [r1, #4]
 8005c8e:	e025      	b.n	8005cdc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c90:	4b66      	ldr	r3, [pc, #408]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a65      	ldr	r2, [pc, #404]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	4960      	ldr	r1, [pc, #384]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cae:	4b5f      	ldr	r3, [pc, #380]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	495b      	ldr	r1, [pc, #364]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fd15 	bl	80066fc <RCC_SetFlashLatencyFromMSIRange>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e343      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cdc:	f000 fc4a 	bl	8006574 <HAL_RCC_GetSysClockFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b52      	ldr	r3, [pc, #328]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	4950      	ldr	r1, [pc, #320]	; (8005e30 <HAL_RCC_OscConfig+0x274>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	4a4e      	ldr	r2, [pc, #312]	; (8005e34 <HAL_RCC_OscConfig+0x278>)
 8005cfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <HAL_RCC_OscConfig+0x27c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd faa3 	bl	800324c <HAL_InitTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d052      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	e327      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d032      	beq.n	8005d82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d1c:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a42      	ldr	r2, [pc, #264]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d28:	f7fd fae0 	bl	80032ec <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d30:	f7fd fadc 	bl	80032ec <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e310      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d42:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d4e:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a36      	ldr	r2, [pc, #216]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d54:	f043 0308 	orr.w	r3, r3, #8
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b34      	ldr	r3, [pc, #208]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4931      	ldr	r1, [pc, #196]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d6c:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	492c      	ldr	r1, [pc, #176]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	e01a      	b.n	8005db8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d82:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd faad 	bl	80032ec <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d96:	f7fd faa9 	bl	80032ec <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e2dd      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x1da>
 8005db4:	e000      	b.n	8005db8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005db6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d074      	beq.n	8005eae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d005      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x21a>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d10e      	bne.n	8005dee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d064      	beq.n	8005eac <HAL_RCC_OscConfig+0x2f0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d160      	bne.n	8005eac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e2ba      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x24a>
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e026      	b.n	8005e54 <HAL_RCC_OscConfig+0x298>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0e:	d115      	bne.n	8005e3c <HAL_RCC_OscConfig+0x280>
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a02      	ldr	r2, [pc, #8]	; (8005e2c <HAL_RCC_OscConfig+0x270>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e014      	b.n	8005e54 <HAL_RCC_OscConfig+0x298>
 8005e2a:	bf00      	nop
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	0800d0dc 	.word	0x0800d0dc
 8005e34:	20000000 	.word	0x20000000
 8005e38:	20000004 	.word	0x20000004
 8005e3c:	4ba0      	ldr	r3, [pc, #640]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a9f      	ldr	r2, [pc, #636]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b9d      	ldr	r3, [pc, #628]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a9c      	ldr	r2, [pc, #624]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fd fa46 	bl	80032ec <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fd fa42 	bl	80032ec <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	; 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e276      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e76:	4b92      	ldr	r3, [pc, #584]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x2a8>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fd fa32 	bl	80032ec <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fd fa2e 	bl	80032ec <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	; 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e262      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e9e:	4b88      	ldr	r3, [pc, #544]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x2d0>
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d060      	beq.n	8005f7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d005      	beq.n	8005ecc <HAL_RCC_OscConfig+0x310>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b0c      	cmp	r3, #12
 8005ec4:	d119      	bne.n	8005efa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d116      	bne.n	8005efa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ecc:	4b7c      	ldr	r3, [pc, #496]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x328>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e23f      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee4:	4b76      	ldr	r3, [pc, #472]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	061b      	lsls	r3, r3, #24
 8005ef2:	4973      	ldr	r1, [pc, #460]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef8:	e040      	b.n	8005f7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d023      	beq.n	8005f4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f02:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6e      	ldr	r2, [pc, #440]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fd f9ed 	bl	80032ec <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fd f9e9 	bl	80032ec <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e21d      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f28:	4b65      	ldr	r3, [pc, #404]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	495f      	ldr	r1, [pc, #380]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
 8005f48:	e018      	b.n	8005f7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4a:	4b5d      	ldr	r3, [pc, #372]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a5c      	ldr	r2, [pc, #368]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fd f9c9 	bl	80032ec <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fd f9c5 	bl	80032ec <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1f9      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f70:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f0      	bne.n	8005f5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d03c      	beq.n	8006002 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01c      	beq.n	8005fca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f90:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f96:	4a4a      	ldr	r2, [pc, #296]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa0:	f7fd f9a4 	bl	80032ec <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa8:	f7fd f9a0 	bl	80032ec <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e1d4      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fba:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ef      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x3ec>
 8005fc8:	e01b      	b.n	8006002 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fca:	4b3d      	ldr	r3, [pc, #244]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd0:	4a3b      	ldr	r2, [pc, #236]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fda:	f7fd f987 	bl	80032ec <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe2:	f7fd f983 	bl	80032ec <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e1b7      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ff4:	4b32      	ldr	r3, [pc, #200]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8005ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ef      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80a6 	beq.w	800615c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006010:	2300      	movs	r3, #0
 8006012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	6593      	str	r3, [r2, #88]	; 0x58
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006038:	2301      	movs	r3, #1
 800603a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603c:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <HAL_RCC_OscConfig+0x508>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d118      	bne.n	800607a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_RCC_OscConfig+0x508>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <HAL_RCC_OscConfig+0x508>)
 800604e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006054:	f7fd f94a 	bl	80032ec <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605c:	f7fd f946 	bl	80032ec <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e17a      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <HAL_RCC_OscConfig+0x508>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d108      	bne.n	8006094 <HAL_RCC_OscConfig+0x4d8>
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006092:	e029      	b.n	80060e8 <HAL_RCC_OscConfig+0x52c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b05      	cmp	r3, #5
 800609a:	d115      	bne.n	80060c8 <HAL_RCC_OscConfig+0x50c>
 800609c:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 80060a4:	f043 0304 	orr.w	r3, r3, #4
 80060a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b2:	4a03      	ldr	r2, [pc, #12]	; (80060c0 <HAL_RCC_OscConfig+0x504>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060bc:	e014      	b.n	80060e8 <HAL_RCC_OscConfig+0x52c>
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40007000 	.word	0x40007000
 80060c8:	4b9c      	ldr	r3, [pc, #624]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	4a9b      	ldr	r2, [pc, #620]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060d8:	4b98      	ldr	r3, [pc, #608]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	4a97      	ldr	r2, [pc, #604]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f0:	f7fd f8fc 	bl	80032ec <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f6:	e00a      	b.n	800610e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fd f8f8 	bl	80032ec <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e12a      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800610e:	4b8b      	ldr	r3, [pc, #556]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ed      	beq.n	80060f8 <HAL_RCC_OscConfig+0x53c>
 800611c:	e015      	b.n	800614a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611e:	f7fd f8e5 	bl	80032ec <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006124:	e00a      	b.n	800613c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006126:	f7fd f8e1 	bl	80032ec <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	4293      	cmp	r3, r2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e113      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800613c:	4b7f      	ldr	r3, [pc, #508]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1ed      	bne.n	8006126 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006150:	4b7a      	ldr	r3, [pc, #488]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	4a79      	ldr	r2, [pc, #484]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80fe 	beq.w	8006362 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	2b02      	cmp	r3, #2
 800616c:	f040 80d0 	bne.w	8006310 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006170:	4b72      	ldr	r3, [pc, #456]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 0203 	and.w	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d130      	bne.n	80061e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	3b01      	subs	r3, #1
 8006190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d127      	bne.n	80061e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d11f      	bne.n	80061e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061b0:	2a07      	cmp	r2, #7
 80061b2:	bf14      	ite	ne
 80061b4:	2201      	movne	r2, #1
 80061b6:	2200      	moveq	r2, #0
 80061b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d113      	bne.n	80061e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	3b01      	subs	r3, #1
 80061cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d109      	bne.n	80061e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d06e      	beq.n	80062c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d069      	beq.n	80062c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061ec:	4b53      	ldr	r3, [pc, #332]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0ad      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006208:	4b4c      	ldr	r3, [pc, #304]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a4b      	ldr	r2, [pc, #300]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006212:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006214:	f7fd f86a 	bl	80032ec <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621c:	f7fd f866 	bl	80032ec <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e09a      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800622e:	4b43      	ldr	r3, [pc, #268]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800623a:	4b40      	ldr	r3, [pc, #256]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	4b40      	ldr	r3, [pc, #256]	; (8006340 <HAL_RCC_OscConfig+0x784>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800624a:	3a01      	subs	r2, #1
 800624c:	0112      	lsls	r2, r2, #4
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006254:	0212      	lsls	r2, r2, #8
 8006256:	4311      	orrs	r1, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800625c:	0852      	lsrs	r2, r2, #1
 800625e:	3a01      	subs	r2, #1
 8006260:	0552      	lsls	r2, r2, #21
 8006262:	4311      	orrs	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006268:	0852      	lsrs	r2, r2, #1
 800626a:	3a01      	subs	r2, #1
 800626c:	0652      	lsls	r2, r2, #25
 800626e:	4311      	orrs	r1, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006274:	0912      	lsrs	r2, r2, #4
 8006276:	0452      	lsls	r2, r2, #17
 8006278:	430a      	orrs	r2, r1
 800627a:	4930      	ldr	r1, [pc, #192]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800627c:	4313      	orrs	r3, r2
 800627e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006280:	4b2e      	ldr	r3, [pc, #184]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2d      	ldr	r2, [pc, #180]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800628a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800628c:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4a2a      	ldr	r2, [pc, #168]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006298:	f7fd f828 	bl	80032ec <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fd f824 	bl	80032ec <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e058      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062be:	e050      	b.n	8006362 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e04f      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c4:	4b1d      	ldr	r3, [pc, #116]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d148      	bne.n	8006362 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062d0:	4b1a      	ldr	r3, [pc, #104]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062dc:	4b17      	ldr	r3, [pc, #92]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4a16      	ldr	r2, [pc, #88]	; (800633c <HAL_RCC_OscConfig+0x780>)
 80062e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062e8:	f7fd f800 	bl	80032ec <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f0:	f7fc fffc 	bl	80032ec <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e030      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0f0      	beq.n	80062f0 <HAL_RCC_OscConfig+0x734>
 800630e:	e028      	b.n	8006362 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d023      	beq.n	800635e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <HAL_RCC_OscConfig+0x780>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <HAL_RCC_OscConfig+0x780>)
 800631c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc ffe3 	bl	80032ec <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006328:	e00c      	b.n	8006344 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632a:	f7fc ffdf 	bl	80032ec <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d905      	bls.n	8006344 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e013      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
 800633c:	40021000 	.word	0x40021000
 8006340:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <HAL_RCC_OscConfig+0x7b0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ec      	bne.n	800632a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <HAL_RCC_OscConfig+0x7b0>)
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	4905      	ldr	r1, [pc, #20]	; (800636c <HAL_RCC_OscConfig+0x7b0>)
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCC_OscConfig+0x7b4>)
 8006358:	4013      	ands	r3, r2
 800635a:	60cb      	str	r3, [r1, #12]
 800635c:	e001      	b.n	8006362 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40021000 	.word	0x40021000
 8006370:	feeefffc 	.word	0xfeeefffc

08006374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0e7      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006388:	4b75      	ldr	r3, [pc, #468]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d910      	bls.n	80063b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b72      	ldr	r3, [pc, #456]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 0207 	bic.w	r2, r3, #7
 800639e:	4970      	ldr	r1, [pc, #448]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	4b6e      	ldr	r3, [pc, #440]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0cf      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	4b66      	ldr	r3, [pc, #408]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d908      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d4:	4b63      	ldr	r3, [pc, #396]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4960      	ldr	r1, [pc, #384]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04c      	beq.n	800648c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d107      	bne.n	800640a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063fa:	4b5a      	ldr	r3, [pc, #360]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d121      	bne.n	800644a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0a6      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d107      	bne.n	8006422 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006412:	4b54      	ldr	r3, [pc, #336]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d115      	bne.n	800644a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e09a      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800642a:	4b4e      	ldr	r3, [pc, #312]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e08e      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643a:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e086      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800644a:	4b46      	ldr	r3, [pc, #280]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 0203 	bic.w	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4943      	ldr	r1, [pc, #268]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006458:	4313      	orrs	r3, r2
 800645a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800645c:	f7fc ff46 	bl	80032ec <HAL_GetTick>
 8006460:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006462:	e00a      	b.n	800647a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006464:	f7fc ff42 	bl	80032ec <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006472:	4293      	cmp	r3, r2
 8006474:	d901      	bls.n	800647a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e06e      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647a:	4b3a      	ldr	r3, [pc, #232]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 020c 	and.w	r2, r3, #12
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	429a      	cmp	r2, r3
 800648a:	d1eb      	bne.n	8006464 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	4b31      	ldr	r3, [pc, #196]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d208      	bcs.n	80064ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a8:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	492b      	ldr	r1, [pc, #172]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d210      	bcs.n	80064ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 0207 	bic.w	r2, r3, #7
 80064d0:	4923      	ldr	r1, [pc, #140]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d8:	4b21      	ldr	r3, [pc, #132]	; (8006560 <HAL_RCC_ClockConfig+0x1ec>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d001      	beq.n	80064ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e036      	b.n	8006558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f6:	4b1b      	ldr	r3, [pc, #108]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	4918      	ldr	r1, [pc, #96]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006504:	4313      	orrs	r3, r2
 8006506:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4910      	ldr	r1, [pc, #64]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006528:	f000 f824 	bl	8006574 <HAL_RCC_GetSysClockFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <HAL_RCC_ClockConfig+0x1f0>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	490b      	ldr	r1, [pc, #44]	; (8006568 <HAL_RCC_ClockConfig+0x1f4>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	4a09      	ldr	r2, [pc, #36]	; (800656c <HAL_RCC_ClockConfig+0x1f8>)
 8006546:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <HAL_RCC_ClockConfig+0x1fc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7fc fe7d 	bl	800324c <HAL_InitTick>
 8006552:	4603      	mov	r3, r0
 8006554:	72fb      	strb	r3, [r7, #11]

  return status;
 8006556:	7afb      	ldrb	r3, [r7, #11]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40022000 	.word	0x40022000
 8006564:	40021000 	.word	0x40021000
 8006568:	0800d0dc 	.word	0x0800d0dc
 800656c:	20000000 	.word	0x20000000
 8006570:	20000004 	.word	0x20000004

08006574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006582:	4b3e      	ldr	r3, [pc, #248]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800658c:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0x34>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d121      	bne.n	80065e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d11e      	bne.n	80065e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80065a8:	4b34      	ldr	r3, [pc, #208]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80065b4:	4b31      	ldr	r3, [pc, #196]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	e005      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80065c4:	4b2d      	ldr	r3, [pc, #180]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80065d0:	4a2b      	ldr	r2, [pc, #172]	; (8006680 <HAL_RCC_GetSysClockFreq+0x10c>)
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10d      	bne.n	80065fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065e4:	e00a      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d102      	bne.n	80065f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_RCC_GetSysClockFreq+0x110>)
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e004      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065f8:	4b23      	ldr	r3, [pc, #140]	; (8006688 <HAL_RCC_GetSysClockFreq+0x114>)
 80065fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d134      	bne.n	800666c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d003      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0xa6>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d003      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0xac>
 8006618:	e005      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_RCC_GetSysClockFreq+0x110>)
 800661c:	617b      	str	r3, [r7, #20]
      break;
 800661e:	e005      	b.n	800662c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <HAL_RCC_GetSysClockFreq+0x114>)
 8006622:	617b      	str	r3, [r7, #20]
      break;
 8006624:	e002      	b.n	800662c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	617b      	str	r3, [r7, #20]
      break;
 800662a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800662c:	4b13      	ldr	r3, [pc, #76]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	3301      	adds	r3, #1
 8006638:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800663a:	4b10      	ldr	r3, [pc, #64]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	fb03 f202 	mul.w	r2, r3, r2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_GetSysClockFreq+0x108>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	0e5b      	lsrs	r3, r3, #25
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	3301      	adds	r3, #1
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	fbb2 f3f3 	udiv	r3, r2, r3
 800666a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800666c:	69bb      	ldr	r3, [r7, #24]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3724      	adds	r7, #36	; 0x24
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40021000 	.word	0x40021000
 8006680:	0800d0f4 	.word	0x0800d0f4
 8006684:	00f42400 	.word	0x00f42400
 8006688:	007a1200 	.word	0x007a1200

0800668c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006692:	681b      	ldr	r3, [r3, #0]
}
 8006694:	4618      	mov	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000000 	.word	0x20000000

080066a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066a8:	f7ff fff0 	bl	800668c <HAL_RCC_GetHCLKFreq>
 80066ac:	4602      	mov	r2, r0
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	4904      	ldr	r1, [pc, #16]	; (80066cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80066ba:	5ccb      	ldrb	r3, [r1, r3]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40021000 	.word	0x40021000
 80066cc:	0800d0ec 	.word	0x0800d0ec

080066d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066d4:	f7ff ffda 	bl	800668c <HAL_RCC_GetHCLKFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	0adb      	lsrs	r3, r3, #11
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	4904      	ldr	r1, [pc, #16]	; (80066f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066e6:	5ccb      	ldrb	r3, [r1, r3]
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40021000 	.word	0x40021000
 80066f8:	0800d0ec 	.word	0x0800d0ec

080066fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006708:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006714:	f7ff f9a6 	bl	8005a64 <HAL_PWREx_GetVoltageRange>
 8006718:	6178      	str	r0, [r7, #20]
 800671a:	e014      	b.n	8006746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800671c:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	4a24      	ldr	r2, [pc, #144]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006726:	6593      	str	r3, [r2, #88]	; 0x58
 8006728:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006734:	f7ff f996 	bl	8005a64 <HAL_PWREx_GetVoltageRange>
 8006738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800673a:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006744:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674c:	d10b      	bne.n	8006766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d919      	bls.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2ba0      	cmp	r3, #160	; 0xa0
 8006758:	d902      	bls.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800675a:	2302      	movs	r3, #2
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	e013      	b.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006760:	2301      	movs	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	e010      	b.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d902      	bls.n	8006772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800676c:	2303      	movs	r3, #3
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	e00a      	b.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d102      	bne.n	800677e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006778:	2302      	movs	r3, #2
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e004      	b.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d101      	bne.n	8006788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006784:	2301      	movs	r3, #1
 8006786:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 0207 	bic.w	r2, r3, #7
 8006790:	4909      	ldr	r1, [pc, #36]	; (80067b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d001      	beq.n	80067aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000
 80067b8:	40022000 	.word	0x40022000

080067bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067c4:	2300      	movs	r3, #0
 80067c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067c8:	2300      	movs	r3, #0
 80067ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d041      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067e0:	d02a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80067e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067e6:	d824      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ec:	d008      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067f2:	d81e      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80067f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067fc:	d010      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067fe:	e018      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006800:	4b86      	ldr	r3, [pc, #536]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4a85      	ldr	r2, [pc, #532]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800680c:	e015      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f000 facb 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800681e:	e00c      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3320      	adds	r3, #32
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fbb6 	bl	8006f98 <RCCEx_PLLSAI2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006830:	e003      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	74fb      	strb	r3, [r7, #19]
      break;
 8006836:	e000      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683a:	7cfb      	ldrb	r3, [r7, #19]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006840:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684e:	4973      	ldr	r1, [pc, #460]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006856:	e001      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d041      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800686c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006870:	d02a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006876:	d824      	bhi.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800687c:	d008      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800687e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006882:	d81e      	bhi.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800688c:	d010      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800688e:	e018      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006890:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a61      	ldr	r2, [pc, #388]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800689c:	e015      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fa83 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068ae:	e00c      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3320      	adds	r3, #32
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb6e 	bl	8006f98 <RCCEx_PLLSAI2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	74fb      	strb	r3, [r7, #19]
      break;
 80068c6:	e000      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80068c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068d0:	4b52      	ldr	r3, [pc, #328]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068de:	494f      	ldr	r1, [pc, #316]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068e6:	e001      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80a0 	beq.w	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fa:	2300      	movs	r3, #0
 80068fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006914:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006918:	4a40      	ldr	r2, [pc, #256]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691e:	6593      	str	r3, [r2, #88]	; 0x58
 8006920:	4b3e      	ldr	r3, [pc, #248]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692c:	2301      	movs	r3, #1
 800692e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006930:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800693c:	f7fc fcd6 	bl	80032ec <HAL_GetTick>
 8006940:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006942:	e009      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006944:	f7fc fcd2 	bl	80032ec <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d902      	bls.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	74fb      	strb	r3, [r7, #19]
        break;
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006958:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ef      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006964:	7cfb      	ldrb	r3, [r7, #19]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d15c      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800696a:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01f      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	d019      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006988:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006994:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069b4:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fc fc91 	bl	80032ec <HAL_GetTick>
 80069ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069cc:	e00b      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fc fc8d 	bl	80032ec <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069dc:	4293      	cmp	r3, r2
 80069de:	d902      	bls.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	74fb      	strb	r3, [r7, #19]
            break;
 80069e4:	e006      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ec      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	4904      	ldr	r1, [pc, #16]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a12:	e009      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	74bb      	strb	r3, [r7, #18]
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006a1a:	bf00      	nop
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	7cfb      	ldrb	r3, [r7, #19]
 8006a26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a28:	7c7b      	ldrb	r3, [r7, #17]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d105      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2e:	4b9e      	ldr	r3, [pc, #632]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a32:	4a9d      	ldr	r2, [pc, #628]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a46:	4b98      	ldr	r3, [pc, #608]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	f023 0203 	bic.w	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	4994      	ldr	r1, [pc, #592]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a68:	4b8f      	ldr	r3, [pc, #572]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6e:	f023 020c 	bic.w	r2, r3, #12
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	498c      	ldr	r1, [pc, #560]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a8a:	4b87      	ldr	r3, [pc, #540]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	4983      	ldr	r1, [pc, #524]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aac:	4b7e      	ldr	r3, [pc, #504]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	497b      	ldr	r1, [pc, #492]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ace:	4b76      	ldr	r3, [pc, #472]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006adc:	4972      	ldr	r1, [pc, #456]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00a      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006af0:	4b6d      	ldr	r3, [pc, #436]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	496a      	ldr	r1, [pc, #424]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b12:	4b65      	ldr	r3, [pc, #404]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	4961      	ldr	r1, [pc, #388]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b34:	4b5c      	ldr	r3, [pc, #368]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b42:	4959      	ldr	r1, [pc, #356]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	4950      	ldr	r1, [pc, #320]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b78:	4b4b      	ldr	r3, [pc, #300]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	4948      	ldr	r1, [pc, #288]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b9a:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba8:	493f      	ldr	r1, [pc, #252]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d028      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bca:	4937      	ldr	r1, [pc, #220]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bda:	d106      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bdc:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a31      	ldr	r2, [pc, #196]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be6:	60d3      	str	r3, [r2, #12]
 8006be8:	e011      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f8d8 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c04:	7cfb      	ldrb	r3, [r7, #19]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006c0a:	7cfb      	ldrb	r3, [r7, #19]
 8006c0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d028      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c1a:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	491f      	ldr	r1, [pc, #124]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c38:	d106      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c44:	60d3      	str	r3, [r2, #12]
 8006c46:	e011      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2101      	movs	r1, #1
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f8a9 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02b      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c86:	4908      	ldr	r1, [pc, #32]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c96:	d109      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c98:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	4a02      	ldr	r2, [pc, #8]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca2:	60d3      	str	r3, [r2, #12]
 8006ca4:	e014      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006ca6:	bf00      	nop
 8006ca8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f877 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006ccc:	7cfb      	ldrb	r3, [r7, #19]
 8006cce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02f      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cea:	4928      	ldr	r1, [pc, #160]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d10d      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	2102      	movs	r1, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f854 	bl	8006db0 <RCCEx_PLLSAI1_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d0c:	7cfb      	ldrb	r3, [r7, #19]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	74bb      	strb	r3, [r7, #18]
 8006d16:	e011      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d20:	d10c      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3320      	adds	r3, #32
 8006d26:	2102      	movs	r1, #2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f935 	bl	8006f98 <RCCEx_PLLSAI2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d32:	7cfb      	ldrb	r3, [r7, #19]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d48:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d56:	490d      	ldr	r1, [pc, #52]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7a:	4904      	ldr	r1, [pc, #16]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d82:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000

08006d90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a04      	ldr	r2, [pc, #16]	; (8006dac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d9a:	f043 0304 	orr.w	r3, r3, #4
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40021000 	.word	0x40021000

08006db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dbe:	4b75      	ldr	r3, [pc, #468]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006dca:	4b72      	ldr	r3, [pc, #456]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0203 	and.w	r2, r3, #3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d10d      	bne.n	8006df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006de2:	4b6c      	ldr	r3, [pc, #432]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
       ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d047      	beq.n	8006e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	73fb      	strb	r3, [r7, #15]
 8006dfa:	e044      	b.n	8006e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d018      	beq.n	8006e36 <RCCEx_PLLSAI1_Config+0x86>
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d825      	bhi.n	8006e54 <RCCEx_PLLSAI1_Config+0xa4>
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d002      	beq.n	8006e12 <RCCEx_PLLSAI1_Config+0x62>
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d009      	beq.n	8006e24 <RCCEx_PLLSAI1_Config+0x74>
 8006e10:	e020      	b.n	8006e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e12:	4b60      	ldr	r3, [pc, #384]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11d      	bne.n	8006e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e22:	e01a      	b.n	8006e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e24:	4b5b      	ldr	r3, [pc, #364]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d116      	bne.n	8006e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e34:	e013      	b.n	8006e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e36:	4b57      	ldr	r3, [pc, #348]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e42:	4b54      	ldr	r3, [pc, #336]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e52:	e006      	b.n	8006e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e004      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e002      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e6a:	4b4a      	ldr	r3, [pc, #296]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	4944      	ldr	r1, [pc, #272]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d17d      	bne.n	8006f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e8c:	4b41      	ldr	r3, [pc, #260]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a40      	ldr	r2, [pc, #256]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e98:	f7fc fa28 	bl	80032ec <HAL_GetTick>
 8006e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e9e:	e009      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ea0:	f7fc fa24 	bl	80032ec <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d902      	bls.n	8006eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8006eb2:	e005      	b.n	8006ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ef      	bne.n	8006ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d160      	bne.n	8006f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d111      	bne.n	8006ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ecc:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6892      	ldr	r2, [r2, #8]
 8006edc:	0211      	lsls	r1, r2, #8
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68d2      	ldr	r2, [r2, #12]
 8006ee2:	0912      	lsrs	r2, r2, #4
 8006ee4:	0452      	lsls	r2, r2, #17
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	492a      	ldr	r1, [pc, #168]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	610b      	str	r3, [r1, #16]
 8006eee:	e027      	b.n	8006f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d112      	bne.n	8006f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ef6:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6892      	ldr	r2, [r2, #8]
 8006f06:	0211      	lsls	r1, r2, #8
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6912      	ldr	r2, [r2, #16]
 8006f0c:	0852      	lsrs	r2, r2, #1
 8006f0e:	3a01      	subs	r2, #1
 8006f10:	0552      	lsls	r2, r2, #21
 8006f12:	430a      	orrs	r2, r1
 8006f14:	491f      	ldr	r1, [pc, #124]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	610b      	str	r3, [r1, #16]
 8006f1a:	e011      	b.n	8006f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f1c:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6892      	ldr	r2, [r2, #8]
 8006f2c:	0211      	lsls	r1, r2, #8
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6952      	ldr	r2, [r2, #20]
 8006f32:	0852      	lsrs	r2, r2, #1
 8006f34:	3a01      	subs	r2, #1
 8006f36:	0652      	lsls	r2, r2, #25
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	4916      	ldr	r1, [pc, #88]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f40:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f4c:	f7fc f9ce 	bl	80032ec <HAL_GetTick>
 8006f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f52:	e009      	b.n	8006f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f54:	f7fc f9ca 	bl	80032ec <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d902      	bls.n	8006f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	73fb      	strb	r3, [r7, #15]
          break;
 8006f66:	e005      	b.n	8006f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0ef      	beq.n	8006f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	4904      	ldr	r1, [pc, #16]	; (8006f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40021000 	.word	0x40021000

08006f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d018      	beq.n	8006fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006fb2:	4b67      	ldr	r3, [pc, #412]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0203 	and.w	r2, r3, #3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d10d      	bne.n	8006fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006fca:	4b61      	ldr	r3, [pc, #388]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d047      	beq.n	800706e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	73fb      	strb	r3, [r7, #15]
 8006fe2:	e044      	b.n	800706e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d018      	beq.n	800701e <RCCEx_PLLSAI2_Config+0x86>
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d825      	bhi.n	800703c <RCCEx_PLLSAI2_Config+0xa4>
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d002      	beq.n	8006ffa <RCCEx_PLLSAI2_Config+0x62>
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d009      	beq.n	800700c <RCCEx_PLLSAI2_Config+0x74>
 8006ff8:	e020      	b.n	800703c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ffa:	4b55      	ldr	r3, [pc, #340]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11d      	bne.n	8007042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800700a:	e01a      	b.n	8007042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800700c:	4b50      	ldr	r3, [pc, #320]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007014:	2b00      	cmp	r3, #0
 8007016:	d116      	bne.n	8007046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800701c:	e013      	b.n	8007046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800701e:	4b4c      	ldr	r3, [pc, #304]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10f      	bne.n	800704a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800702a:	4b49      	ldr	r3, [pc, #292]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800703a:	e006      	b.n	800704a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
      break;
 8007040:	e004      	b.n	800704c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800704a:	bf00      	nop
    }

    if(status == HAL_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10d      	bne.n	800706e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007052:	4b3f      	ldr	r3, [pc, #252]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	3b01      	subs	r3, #1
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	430b      	orrs	r3, r1
 8007068:	4939      	ldr	r1, [pc, #228]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800706a:	4313      	orrs	r3, r2
 800706c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d167      	bne.n	8007144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a35      	ldr	r2, [pc, #212]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800707e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007080:	f7fc f934 	bl	80032ec <HAL_GetTick>
 8007084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007086:	e009      	b.n	800709c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007088:	f7fc f930 	bl	80032ec <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d902      	bls.n	800709c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
        break;
 800709a:	e005      	b.n	80070a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800709c:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ef      	bne.n	8007088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d14a      	bne.n	8007144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d111      	bne.n	80070d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070b4:	4b26      	ldr	r3, [pc, #152]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80070bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6892      	ldr	r2, [r2, #8]
 80070c4:	0211      	lsls	r1, r2, #8
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	0912      	lsrs	r2, r2, #4
 80070cc:	0452      	lsls	r2, r2, #17
 80070ce:	430a      	orrs	r2, r1
 80070d0:	491f      	ldr	r1, [pc, #124]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	614b      	str	r3, [r1, #20]
 80070d6:	e011      	b.n	80070fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6892      	ldr	r2, [r2, #8]
 80070e8:	0211      	lsls	r1, r2, #8
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6912      	ldr	r2, [r2, #16]
 80070ee:	0852      	lsrs	r2, r2, #1
 80070f0:	3a01      	subs	r2, #1
 80070f2:	0652      	lsls	r2, r2, #25
 80070f4:	430a      	orrs	r2, r1
 80070f6:	4916      	ldr	r1, [pc, #88]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007108:	f7fc f8f0 	bl	80032ec <HAL_GetTick>
 800710c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800710e:	e009      	b.n	8007124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007110:	f7fc f8ec 	bl	80032ec <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d902      	bls.n	8007124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	73fb      	strb	r3, [r7, #15]
          break;
 8007122:	e005      	b.n	8007130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ef      	beq.n	8007110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4904      	ldr	r1, [pc, #16]	; (8007150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007140:	4313      	orrs	r3, r2
 8007142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40021000 	.word	0x40021000

08007154 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d079      	beq.n	800725a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fb fd9e 	bl	8002cbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	2b10      	cmp	r3, #16
 8007194:	d058      	beq.n	8007248 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	22ca      	movs	r2, #202	; 0xca
 800719c:	625a      	str	r2, [r3, #36]	; 0x24
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2253      	movs	r2, #83	; 0x53
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fbda 	bl	8007960 <RTC_EnterInitMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d127      	bne.n	8007206 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6899      	ldr	r1, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68d2      	ldr	r2, [r2, #12]
 80071f0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6919      	ldr	r1, [r3, #16]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	041a      	lsls	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fbde 	bl	80079c8 <RTC_ExitInitMode>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d113      	bne.n	800723e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0203 	bic.w	r2, r2, #3
 8007224:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	22ff      	movs	r2, #255	; 0xff
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
 8007246:	e001      	b.n	800724c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_RTC_SetTime+0x1a>
 800727a:	2302      	movs	r3, #2
 800727c:	e08b      	b.n	8007396 <HAL_RTC_SetTime+0x132>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	22ca      	movs	r2, #202	; 0xca
 8007294:	625a      	str	r2, [r3, #36]	; 0x24
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2253      	movs	r2, #83	; 0x53
 800729c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fb5e 	bl	8007960 <RTC_EnterInitMode>
 80072a4:	4603      	mov	r3, r0
 80072a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d163      	bne.n	8007376 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d126      	bne.n	8007302 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fbb9 	bl	8007a44 <RTC_ByteToBcd2>
 80072d2:	4603      	mov	r3, r0
 80072d4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fbb2 	bl	8007a44 <RTC_ByteToBcd2>
 80072e0:	4603      	mov	r3, r0
 80072e2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072e4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	789b      	ldrb	r3, [r3, #2]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fbaa 	bl	8007a44 <RTC_ByteToBcd2>
 80072f0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072f2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	78db      	ldrb	r3, [r3, #3]
 80072fa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e018      	b.n	8007334 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007322:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007328:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	78db      	ldrb	r3, [r3, #3]
 800732e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800733e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007342:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007352:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fb2b 	bl	80079c8 <RTC_ExitInitMode>
 8007372:	4603      	mov	r3, r0
 8007374:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	22ff      	movs	r2, #255	; 0xff
 800737c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800737e:	7cfb      	ldrb	r3, [r7, #19]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007394:	7cfb      	ldrb	r3, [r7, #19]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}

0800739e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80073cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80073d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	0d9b      	lsrs	r3, r3, #22
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d11a      	bne.n	800744c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fb32 	bl	8007a84 <RTC_Bcd2ToByte>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fb29 	bl	8007a84 <RTC_Bcd2ToByte>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fb20 	bl	8007a84 <RTC_Bcd2ToByte>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007456:	b590      	push	{r4, r7, lr}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_RTC_SetDate+0x1a>
 800746c:	2302      	movs	r3, #2
 800746e:	e075      	b.n	800755c <HAL_RTC_SetDate+0x106>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10e      	bne.n	80074a4 <HAL_RTC_SetDate+0x4e>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	b2db      	uxtb	r3, r3
 800749c:	330a      	adds	r3, #10
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d11c      	bne.n	80074e4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fac8 	bl	8007a44 <RTC_ByteToBcd2>
 80074b4:	4603      	mov	r3, r0
 80074b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fac1 	bl	8007a44 <RTC_ByteToBcd2>
 80074c2:	4603      	mov	r3, r0
 80074c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80074c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	789b      	ldrb	r3, [r3, #2]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fab9 	bl	8007a44 <RTC_ByteToBcd2>
 80074d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e00e      	b.n	8007502 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	78db      	ldrb	r3, [r3, #3]
 80074e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80074f0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80074f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	22ca      	movs	r2, #202	; 0xca
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2253      	movs	r2, #83	; 0x53
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fa24 	bl	8007960 <RTC_EnterInitMode>
 8007518:	4603      	mov	r3, r0
 800751a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800751c:	7cfb      	ldrb	r3, [r7, #19]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10c      	bne.n	800753c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007530:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 fa48 	bl	80079c8 <RTC_ExitInitMode>
 8007538:	4603      	mov	r3, r0
 800753a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007544:	7cfb      	ldrb	r3, [r7, #19]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800755a:	7cfb      	ldrb	r3, [r7, #19]
}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}

08007564 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800757e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	b2da      	uxtb	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	b2da      	uxtb	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	0b5b      	lsrs	r3, r3, #13
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11a      	bne.n	80075f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fa5e 	bl	8007a84 <RTC_Bcd2ToByte>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fa55 	bl	8007a84 <RTC_Bcd2ToByte>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	789b      	ldrb	r3, [r3, #2]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fa4c 	bl	8007a84 <RTC_Bcd2ToByte>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461a      	mov	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007600:	b590      	push	{r4, r7, lr}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_RTC_SetAlarm_IT+0x1a>
 8007616:	2302      	movs	r3, #2
 8007618:	e127      	b.n	800786a <HAL_RTC_SetAlarm_IT+0x26a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d137      	bne.n	80076a0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f9fb 	bl	8007a44 <RTC_ByteToBcd2>
 800764e:	4603      	mov	r3, r0
 8007650:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f9f4 	bl	8007a44 <RTC_ByteToBcd2>
 800765c:	4603      	mov	r3, r0
 800765e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007660:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	789b      	ldrb	r3, [r3, #2]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f9ec 	bl	8007a44 <RTC_ByteToBcd2>
 800766c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800766e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	78db      	ldrb	r3, [r3, #3]
 8007676:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007678:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f9de 	bl	8007a44 <RTC_ByteToBcd2>
 8007688:	4603      	mov	r3, r0
 800768a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800768c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007694:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800769a:	4313      	orrs	r3, r2
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e023      	b.n	80076e8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076c0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80076c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	22ca      	movs	r2, #202	; 0xca
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2253      	movs	r2, #83	; 0x53
 8007702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d14a      	bne.n	80077a4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800771c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800772e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007730:	f7fb fddc 	bl	80032ec <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007736:	e015      	b.n	8007764 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007738:	f7fb fdd8 	bl	80032ec <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007746:	d90d      	bls.n	8007764 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	22ff      	movs	r2, #255	; 0xff
 800774e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2203      	movs	r2, #3
 8007754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e082      	b.n	800786a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0e2      	beq.n	8007738 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007790:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	e049      	b.n	8007838 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077b2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80077c4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80077c6:	f7fb fd91 	bl	80032ec <HAL_GetTick>
 80077ca:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077cc:	e015      	b.n	80077fa <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077ce:	f7fb fd8d 	bl	80032ec <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077dc:	d90d      	bls.n	80077fa <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	22ff      	movs	r2, #255	; 0xff
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2203      	movs	r2, #3
 80077ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e037      	b.n	800786a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0e2      	beq.n	80077ce <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007826:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007836:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <HAL_RTC_SetAlarm_IT+0x274>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0d      	ldr	r2, [pc, #52]	; (8007874 <HAL_RTC_SetAlarm_IT+0x274>)
 800783e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007842:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RTC_SetAlarm_IT+0x274>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <HAL_RTC_SetAlarm_IT+0x274>)
 800784a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800784e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3724      	adds	r7, #36	; 0x24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd90      	pop	{r4, r7, pc}
 8007872:	bf00      	nop
 8007874:	40010400 	.word	0x40010400

08007878 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007880:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007882:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007886:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d012      	beq.n	80078bc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80078b4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f824 	bl	8007904 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d012      	beq.n	80078f0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80078e8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8e4 	bl	8007ab8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40010400 	.word	0x40010400

08007904 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <HAL_RTC_WaitForSynchro+0x44>)
 8007926:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007928:	f7fb fce0 	bl	80032ec <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800792e:	e009      	b.n	8007944 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007930:	f7fb fcdc 	bl	80032ec <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793e:	d901      	bls.n	8007944 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e007      	b.n	8007954 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0ee      	beq.n	8007930 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	0003ff5f 	.word	0x0003ff5f

08007960 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d120      	bne.n	80079bc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f04f 32ff 	mov.w	r2, #4294967295
 8007982:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007984:	f7fb fcb2 	bl	80032ec <HAL_GetTick>
 8007988:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800798a:	e00d      	b.n	80079a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800798c:	f7fb fcae 	bl	80032ec <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800799a:	d905      	bls.n	80079a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <RTC_EnterInitMode+0x5c>
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d1e7      	bne.n	800798c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80079d4:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <RTC_ExitInitMode+0x78>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <RTC_ExitInitMode+0x78>)
 80079da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079de:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <RTC_ExitInitMode+0x78>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10c      	bne.n	8007a06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff93 	bl	8007918 <HAL_RTC_WaitForSynchro>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01e      	beq.n	8007a36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2203      	movs	r2, #3
 80079fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	73fb      	strb	r3, [r7, #15]
 8007a04:	e017      	b.n	8007a36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <RTC_ExitInitMode+0x78>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	; (8007a40 <RTC_ExitInitMode+0x78>)
 8007a0c:	f023 0320 	bic.w	r3, r3, #32
 8007a10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff ff80 	bl	8007918 <HAL_RTC_WaitForSynchro>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2203      	movs	r2, #3
 8007a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <RTC_ExitInitMode+0x78>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <RTC_ExitInitMode+0x78>)
 8007a30:	f043 0320 	orr.w	r3, r3, #32
 8007a34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40002800 	.word	0x40002800

08007a44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007a56:	e005      	b.n	8007a64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	3b0a      	subs	r3, #10
 8007a62:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	2b09      	cmp	r3, #9
 8007a68:	d8f6      	bhi.n	8007a58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b2db      	uxtb	r3, r3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	0092      	lsls	r2, r2, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	b2db      	uxtb	r3, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e095      	b.n	8007c0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d108      	bne.n	8007af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aee:	d009      	beq.n	8007b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	61da      	str	r2, [r3, #28]
 8007af6:	e005      	b.n	8007b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fb f906 	bl	8002d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b44:	d902      	bls.n	8007b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e002      	b.n	8007b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b5a:	d007      	beq.n	8007b6c <HAL_SPI_Init+0xa0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b64:	d002      	beq.n	8007b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	ea42 0103 	orr.w	r1, r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	0c1b      	lsrs	r3, r3, #16
 8007bc8:	f003 0204 	and.w	r2, r3, #4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007be8:	ea42 0103 	orr.w	r1, r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_SPI_Transmit+0x22>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e15f      	b.n	8007ef4 <HAL_SPI_Transmit+0x2e2>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c3c:	f7fb fb56 	bl	80032ec <HAL_GetTick>
 8007c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d002      	beq.n	8007c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
 8007c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c56:	e148      	b.n	8007eea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0x52>
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c68:	e13f      	b.n	8007eea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d007      	beq.n	8007cf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cfc:	d94f      	bls.n	8007d9e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_Transmit+0xfa>
 8007d06:	8afb      	ldrh	r3, [r7, #22]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d142      	bne.n	8007d92 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d30:	e02f      	b.n	8007d92 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d112      	bne.n	8007d66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d64:	e015      	b.n	8007d92 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d66:	f7fb fac1 	bl	80032ec <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d803      	bhi.n	8007d7e <HAL_SPI_Transmit+0x16c>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_Transmit+0x172>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007d90:	e0ab      	b.n	8007eea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1ca      	bne.n	8007d32 <HAL_SPI_Transmit+0x120>
 8007d9c:	e080      	b.n	8007ea0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_Transmit+0x19a>
 8007da6:	8afb      	ldrh	r3, [r7, #22]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d174      	bne.n	8007e96 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d912      	bls.n	8007ddc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	881a      	ldrh	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	1c9a      	adds	r2, r3, #2
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b02      	subs	r3, #2
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dda:	e05c      	b.n	8007e96 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e02:	e048      	b.n	8007e96 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d12b      	bne.n	8007e6a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d912      	bls.n	8007e42 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	881a      	ldrh	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b02      	subs	r3, #2
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e40:	e029      	b.n	8007e96 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e68:	e015      	b.n	8007e96 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e6a:	f7fb fa3f 	bl	80032ec <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d803      	bhi.n	8007e82 <HAL_SPI_Transmit+0x270>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d102      	bne.n	8007e88 <HAL_SPI_Transmit+0x276>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007e94:	e029      	b.n	8007eea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1b1      	bne.n	8007e04 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fcf9 	bl	800889c <SPI_EndRxTxTransaction>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	613b      	str	r3, [r7, #16]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	77fb      	strb	r3, [r7, #31]
 8007ee0:	e003      	b.n	8007eea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d002      	beq.n	8007f22 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f20:	e11a      	b.n	8008158 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2a:	d112      	bne.n	8007f52 <HAL_SPI_Receive+0x56>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10e      	bne.n	8007f52 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2204      	movs	r2, #4
 8007f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f90e 	bl	800816a <HAL_SPI_TransmitReceive>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e107      	b.n	8008162 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_SPI_Receive+0x64>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e100      	b.n	8008162 <HAL_SPI_Receive+0x266>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f68:	f7fb f9c0 	bl	80032ec <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <HAL_SPI_Receive+0x7e>
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d102      	bne.n	8007f80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f7e:	e0eb      	b.n	8008158 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2204      	movs	r2, #4
 8007f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	88fa      	ldrh	r2, [r7, #6]
 8007f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fca:	d908      	bls.n	8007fde <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fda:	605a      	str	r2, [r3, #4]
 8007fdc:	e007      	b.n	8007fee <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	d10f      	bne.n	8008018 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008006:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008016:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d007      	beq.n	8008036 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800803e:	d86f      	bhi.n	8008120 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008040:	e034      	b.n	80080ac <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b01      	cmp	r3, #1
 800804e:	d117      	bne.n	8008080 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f103 020c 	add.w	r2, r3, #12
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800807e:	e015      	b.n	80080ac <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008080:	f7fb f934 	bl	80032ec <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d803      	bhi.n	8008098 <HAL_SPI_Receive+0x19c>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d102      	bne.n	800809e <HAL_SPI_Receive+0x1a2>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80080aa:	e055      	b.n	8008158 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1c4      	bne.n	8008042 <HAL_SPI_Receive+0x146>
 80080b8:	e038      	b.n	800812c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d115      	bne.n	80080f4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	b292      	uxth	r2, r2
 80080d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	1c9a      	adds	r2, r3, #2
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80080f2:	e015      	b.n	8008120 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f4:	f7fb f8fa 	bl	80032ec <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d803      	bhi.n	800810c <HAL_SPI_Receive+0x210>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Receive+0x216>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800811e:	e01b      	b.n	8008158 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1c6      	bne.n	80080ba <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fb5b 	bl	80087ec <SPI_EndRxTransaction>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
 800814e:	e003      	b.n	8008158 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b08a      	sub	sp, #40	; 0x28
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008178:	2301      	movs	r3, #1
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_SPI_TransmitReceive+0x26>
 800818c:	2302      	movs	r3, #2
 800818e:	e20a      	b.n	80085a6 <HAL_SPI_TransmitReceive+0x43c>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008198:	f7fb f8a8 	bl	80032ec <HAL_GetTick>
 800819c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80081ac:	887b      	ldrh	r3, [r7, #2]
 80081ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081b4:	7efb      	ldrb	r3, [r7, #27]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d00e      	beq.n	80081d8 <HAL_SPI_TransmitReceive+0x6e>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c0:	d106      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x66>
 80081ca:	7efb      	ldrb	r3, [r7, #27]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d003      	beq.n	80081d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
 80081d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081d6:	e1e0      	b.n	800859a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x80>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x80>
 80081e4:	887b      	ldrh	r3, [r7, #2]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081f0:	e1d3      	b.n	800859a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d003      	beq.n	8008206 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2205      	movs	r2, #5
 8008202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	887a      	ldrh	r2, [r7, #2]
 8008216:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	887a      	ldrh	r2, [r7, #2]
 800821e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	887a      	ldrh	r2, [r7, #2]
 8008232:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008248:	d802      	bhi.n	8008250 <HAL_SPI_TransmitReceive+0xe6>
 800824a:	8a3b      	ldrh	r3, [r7, #16]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d908      	bls.n	8008262 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	e007      	b.n	8008272 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008270:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b40      	cmp	r3, #64	; 0x40
 800827e:	d007      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800828e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008298:	f240 8081 	bls.w	800839e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_TransmitReceive+0x140>
 80082a4:	8a7b      	ldrh	r3, [r7, #18]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d16d      	bne.n	8008386 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	881a      	ldrh	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ce:	e05a      	b.n	8008386 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d11b      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x1ac>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <HAL_SPI_TransmitReceive+0x1ac>
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d113      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	881a      	ldrh	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	1c9a      	adds	r2, r3, #2
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d11c      	bne.n	800835e <HAL_SPI_TransmitReceive+0x1f4>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d016      	beq.n	800835e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	b292      	uxth	r2, r2
 800833c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835a:	2301      	movs	r3, #1
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800835e:	f7fa ffc5 	bl	80032ec <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836a:	429a      	cmp	r2, r3
 800836c:	d80b      	bhi.n	8008386 <HAL_SPI_TransmitReceive+0x21c>
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d007      	beq.n	8008386 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008384:	e109      	b.n	800859a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d19f      	bne.n	80082d0 <HAL_SPI_TransmitReceive+0x166>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d199      	bne.n	80082d0 <HAL_SPI_TransmitReceive+0x166>
 800839c:	e0e3      	b.n	8008566 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_SPI_TransmitReceive+0x244>
 80083a6:	8a7b      	ldrh	r3, [r7, #18]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	f040 80cf 	bne.w	800854c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d912      	bls.n	80083de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	1c9a      	adds	r2, r3, #2
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b02      	subs	r3, #2
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083dc:	e0b6      	b.n	800854c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008404:	e0a2      	b.n	800854c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b02      	cmp	r3, #2
 8008412:	d134      	bne.n	800847e <HAL_SPI_TransmitReceive+0x314>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008418:	b29b      	uxth	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d02f      	beq.n	800847e <HAL_SPI_TransmitReceive+0x314>
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2b01      	cmp	r3, #1
 8008422:	d12c      	bne.n	800847e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b01      	cmp	r3, #1
 800842c:	d912      	bls.n	8008454 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	1c9a      	adds	r2, r3, #2
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b02      	subs	r3, #2
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008452:	e012      	b.n	800847a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	d148      	bne.n	800851e <HAL_SPI_TransmitReceive+0x3b4>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008492:	b29b      	uxth	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	d042      	beq.n	800851e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800849e:	b29b      	uxth	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d923      	bls.n	80084ec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	b292      	uxth	r2, r2
 80084b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b02      	subs	r3, #2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d81f      	bhi.n	800851a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	e016      	b.n	800851a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f103 020c 	add.w	r2, r3, #12
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	7812      	ldrb	r2, [r2, #0]
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800851a:	2301      	movs	r3, #1
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800851e:	f7fa fee5 	bl	80032ec <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852a:	429a      	cmp	r2, r3
 800852c:	d803      	bhi.n	8008536 <HAL_SPI_TransmitReceive+0x3cc>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d102      	bne.n	800853c <HAL_SPI_TransmitReceive+0x3d2>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800854a:	e026      	b.n	800859a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f47f af57 	bne.w	8008406 <HAL_SPI_TransmitReceive+0x29c>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	f47f af50 	bne.w	8008406 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f996 	bl	800889c <SPI_EndRxTxTransaction>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008590:	e003      	b.n	800859a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80085a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3728      	adds	r7, #40	; 0x28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085c0:	f7fa fe94 	bl	80032ec <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085d0:	f7fa fe8c 	bl	80032ec <HAL_GetTick>
 80085d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	015b      	lsls	r3, r3, #5
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085e6:	e054      	b.n	8008692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d050      	beq.n	8008692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085f0:	f7fa fe7c 	bl	80032ec <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d902      	bls.n	8008606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d13d      	bne.n	8008682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800861e:	d111      	bne.n	8008644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008628:	d004      	beq.n	8008634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008632:	d107      	bne.n	8008644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864c:	d10f      	bne.n	800866e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800866c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e017      	b.n	80086b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	3b01      	subs	r3, #1
 8008690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	bf0c      	ite	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	2300      	movne	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d19b      	bne.n	80085e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3720      	adds	r7, #32
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000000 	.word	0x20000000

080086c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086d2:	f7fa fe0b 	bl	80032ec <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	4413      	add	r3, r2
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80086e2:	f7fa fe03 	bl	80032ec <HAL_GetTick>
 80086e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086f0:	4b3d      	ldr	r3, [pc, #244]	; (80087e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	00da      	lsls	r2, r3, #3
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	0d1b      	lsrs	r3, r3, #20
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008708:	e060      	b.n	80087cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008710:	d107      	bne.n	8008722 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008720:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d050      	beq.n	80087cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872a:	f7fa fddf 	bl	80032ec <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	429a      	cmp	r2, r3
 8008738:	d902      	bls.n	8008740 <SPI_WaitFifoStateUntilTimeout+0x80>
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d13d      	bne.n	80087bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800874e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008758:	d111      	bne.n	800877e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008762:	d004      	beq.n	800876e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876c:	d107      	bne.n	800877e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008786:	d10f      	bne.n	80087a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e010      	b.n	80087de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d196      	bne.n	800870a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3728      	adds	r7, #40	; 0x28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000000 	.word	0x20000000

080087ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008800:	d111      	bne.n	8008826 <SPI_EndRxTransaction+0x3a>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800880a:	d004      	beq.n	8008816 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d107      	bne.n	8008826 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008824:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	2180      	movs	r1, #128	; 0x80
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff febd 	bl	80085b0 <SPI_WaitFlagStateUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e023      	b.n	8008894 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008854:	d11d      	bne.n	8008892 <SPI_EndRxTransaction+0xa6>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885e:	d004      	beq.n	800886a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008868:	d113      	bne.n	8008892 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2200      	movs	r2, #0
 8008872:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff ff22 	bl	80086c0 <SPI_WaitFifoStateUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008886:	f043 0220 	orr.w	r2, r3, #32
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e000      	b.n	8008894 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff ff03 	bl	80086c0 <SPI_WaitFifoStateUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c4:	f043 0220 	orr.w	r2, r3, #32
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e027      	b.n	8008920 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	2180      	movs	r1, #128	; 0x80
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fe68 	bl	80085b0 <SPI_WaitFlagStateUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d007      	beq.n	80088f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ea:	f043 0220 	orr.w	r2, r3, #32
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e014      	b.n	8008920 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fedc 	bl	80086c0 <SPI_WaitFifoStateUntilTimeout>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	f043 0220 	orr.w	r2, r3, #32
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e000      	b.n	8008920 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e040      	b.n	80089bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fa fa52 	bl	8002df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	; 0x24
 8008954:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fec0 	bl	80096f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc05 	bl	8009184 <UART_SetConfig>
 800897a:	4603      	mov	r3, r0
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e01b      	b.n	80089bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0201 	orr.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 ff3f 	bl	8009838 <UART_CheckIdleState>
 80089ba:	4603      	mov	r3, r0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d178      	bne.n	8008ace <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_UART_Transmit+0x24>
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e071      	b.n	8008ad0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2221      	movs	r2, #33	; 0x21
 80089f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089fa:	f7fa fc77 	bl	80032ec <HAL_GetTick>
 80089fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	88fa      	ldrh	r2, [r7, #6]
 8008a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	88fa      	ldrh	r2, [r7, #6]
 8008a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a18:	d108      	bne.n	8008a2c <HAL_UART_Transmit+0x68>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	61bb      	str	r3, [r7, #24]
 8008a2a:	e003      	b.n	8008a34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a34:	e030      	b.n	8008a98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2180      	movs	r1, #128	; 0x80
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 ffa1 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e03c      	b.n	8008ad0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10b      	bne.n	8008a74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	881a      	ldrh	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a68:	b292      	uxth	r2, r2
 8008a6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	e008      	b.n	8008a86 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	3301      	adds	r3, #1
 8008a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1c8      	bne.n	8008a36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2140      	movs	r1, #64	; 0x40
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 ff6a 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2220      	movs	r2, #32
 8008abe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e005      	b.n	8008ad0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	e000      	b.n	8008ad0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	d137      	bne.n	8008b60 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_UART_Receive_IT+0x24>
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e030      	b.n	8008b62 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <HAL_UART_Receive_IT+0x94>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d01f      	beq.n	8008b50 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d018      	beq.n	8008b50 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	69f9      	ldr	r1, [r7, #28]
 8008b42:	6a3a      	ldr	r2, [r7, #32]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	461a      	mov	r2, r3
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 ff7e 	bl	8009a58 <UART_Start_Receive_IT>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	e000      	b.n	8008b62 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3728      	adds	r7, #40	; 0x28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40008000 	.word	0x40008000

08008b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b0ba      	sub	sp, #232	; 0xe8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008b9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d115      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00f      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 82ae 	beq.w	800912a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
      }
      return;
 8008bd6:	e2a8      	b.n	800912a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8117 	beq.w	8008e10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008bf2:	4b85      	ldr	r3, [pc, #532]	; (8008e08 <HAL_UART_IRQHandler+0x298>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 810a 	beq.w	8008e10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d011      	beq.n	8008c2c <HAL_UART_IRQHandler+0xbc>
 8008c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c22:	f043 0201 	orr.w	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d011      	beq.n	8008c5c <HAL_UART_IRQHandler+0xec>
 8008c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c52:	f043 0204 	orr.w	r2, r3, #4
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d011      	beq.n	8008c8c <HAL_UART_IRQHandler+0x11c>
 8008c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2204      	movs	r2, #4
 8008c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	f043 0202 	orr.w	r2, r3, #2
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d017      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ca8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cbe:	f043 0208 	orr.w	r2, r3, #8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d012      	beq.n	8008cfa <HAL_UART_IRQHandler+0x18a>
 8008cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00c      	beq.n	8008cfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf0:	f043 0220 	orr.w	r2, r3, #32
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8214 	beq.w	800912e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00d      	beq.n	8008d2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d42:	2b40      	cmp	r3, #64	; 0x40
 8008d44:	d005      	beq.n	8008d52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d04f      	beq.n	8008df2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 ff46 	bl	8009be4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d141      	bne.n	8008dea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1d9      	bne.n	8008d66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d013      	beq.n	8008de2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dbe:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <HAL_UART_IRQHandler+0x29c>)
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fb fe31 	bl	8004a2e <HAL_DMA_Abort_IT>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d017      	beq.n	8008e02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de0:	e00f      	b.n	8008e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9b8 	bl	8009158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	e00b      	b.n	8008e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9b4 	bl	8009158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df0:	e007      	b.n	8008e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f9b0 	bl	8009158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008e00:	e195      	b.n	800912e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e02:	bf00      	nop
    return;
 8008e04:	e193      	b.n	800912e <HAL_UART_IRQHandler+0x5be>
 8008e06:	bf00      	nop
 8008e08:	04000120 	.word	0x04000120
 8008e0c:	08009cad 	.word	0x08009cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	f040 814e 	bne.w	80090b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8147 	beq.w	80090b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2c:	f003 0310 	and.w	r3, r3, #16
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8140 	beq.w	80090b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	f040 80b8 	bne.w	8008fbe <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8167 	beq.w	8009132 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	f080 815f 	bcs.w	8009132 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f040 8086 	bne.w	8008f9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ebe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1da      	bne.n	8008e90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e1      	bne.n	8008eda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3308      	adds	r3, #8
 8008f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e3      	bne.n	8008f16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6c:	f023 0310 	bic.w	r3, r3, #16
 8008f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e4      	bne.n	8008f5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fb fd0b 	bl	80049b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f8d8 	bl	800916c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fbc:	e0b9      	b.n	8009132 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80ab 	beq.w	8009136 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80a6 	beq.w	8009136 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800900c:	647b      	str	r3, [r7, #68]	; 0x44
 800900e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e4      	bne.n	8008fea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	623b      	str	r3, [r7, #32]
   return(result);
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	f023 0301 	bic.w	r3, r3, #1
 8009036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009044:	633a      	str	r2, [r7, #48]	; 0x30
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800904a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e3      	bne.n	8009020 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	60fb      	str	r3, [r7, #12]
   return(result);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	69b9      	ldr	r1, [r7, #24]
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	617b      	str	r3, [r7, #20]
   return(result);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e4      	bne.n	800906c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f85c 	bl	800916c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090b4:	e03f      	b.n	8009136 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <HAL_UART_IRQHandler+0x570>
 80090c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ffe3 	bl	800a0a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090de:	e02d      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80090e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00e      	beq.n	800910a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01c      	beq.n	800913a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
    }
    return;
 8009108:	e017      	b.n	800913a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800910a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d012      	beq.n	800913c <HAL_UART_IRQHandler+0x5cc>
 8009116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800911a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00c      	beq.n	800913c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fdd8 	bl	8009cd8 <UART_EndTransmit_IT>
    return;
 8009128:	e008      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
      return;
 800912a:	bf00      	nop
 800912c:	e006      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
    return;
 800912e:	bf00      	nop
 8009130:	e004      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
      return;
 8009132:	bf00      	nop
 8009134:	e002      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
      return;
 8009136:	bf00      	nop
 8009138:	e000      	b.n	800913c <HAL_UART_IRQHandler+0x5cc>
    return;
 800913a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800913c:	37e8      	adds	r7, #232	; 0xe8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop

08009144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009188:	b08a      	sub	sp, #40	; 0x28
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	431a      	orrs	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	431a      	orrs	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4ba4      	ldr	r3, [pc, #656]	; (8009444 <UART_SetConfig+0x2c0>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091bc:	430b      	orrs	r3, r1
 80091be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a99      	ldr	r2, [pc, #612]	; (8009448 <UART_SetConfig+0x2c4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ec:	4313      	orrs	r3, r2
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009200:	430a      	orrs	r2, r1
 8009202:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a90      	ldr	r2, [pc, #576]	; (800944c <UART_SetConfig+0x2c8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d126      	bne.n	800925c <UART_SetConfig+0xd8>
 800920e:	4b90      	ldr	r3, [pc, #576]	; (8009450 <UART_SetConfig+0x2cc>)
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	2b03      	cmp	r3, #3
 800921a:	d81b      	bhi.n	8009254 <UART_SetConfig+0xd0>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <UART_SetConfig+0xa0>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009235 	.word	0x08009235
 8009228:	08009245 	.word	0x08009245
 800922c:	0800923d 	.word	0x0800923d
 8009230:	0800924d 	.word	0x0800924d
 8009234:	2301      	movs	r3, #1
 8009236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800923a:	e116      	b.n	800946a <UART_SetConfig+0x2e6>
 800923c:	2302      	movs	r3, #2
 800923e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009242:	e112      	b.n	800946a <UART_SetConfig+0x2e6>
 8009244:	2304      	movs	r3, #4
 8009246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800924a:	e10e      	b.n	800946a <UART_SetConfig+0x2e6>
 800924c:	2308      	movs	r3, #8
 800924e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009252:	e10a      	b.n	800946a <UART_SetConfig+0x2e6>
 8009254:	2310      	movs	r3, #16
 8009256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800925a:	e106      	b.n	800946a <UART_SetConfig+0x2e6>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a7c      	ldr	r2, [pc, #496]	; (8009454 <UART_SetConfig+0x2d0>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d138      	bne.n	80092d8 <UART_SetConfig+0x154>
 8009266:	4b7a      	ldr	r3, [pc, #488]	; (8009450 <UART_SetConfig+0x2cc>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	f003 030c 	and.w	r3, r3, #12
 8009270:	2b0c      	cmp	r3, #12
 8009272:	d82d      	bhi.n	80092d0 <UART_SetConfig+0x14c>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0xf8>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080092d1 	.word	0x080092d1
 8009284:	080092d1 	.word	0x080092d1
 8009288:	080092d1 	.word	0x080092d1
 800928c:	080092c1 	.word	0x080092c1
 8009290:	080092d1 	.word	0x080092d1
 8009294:	080092d1 	.word	0x080092d1
 8009298:	080092d1 	.word	0x080092d1
 800929c:	080092b9 	.word	0x080092b9
 80092a0:	080092d1 	.word	0x080092d1
 80092a4:	080092d1 	.word	0x080092d1
 80092a8:	080092d1 	.word	0x080092d1
 80092ac:	080092c9 	.word	0x080092c9
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092b6:	e0d8      	b.n	800946a <UART_SetConfig+0x2e6>
 80092b8:	2302      	movs	r3, #2
 80092ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092be:	e0d4      	b.n	800946a <UART_SetConfig+0x2e6>
 80092c0:	2304      	movs	r3, #4
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092c6:	e0d0      	b.n	800946a <UART_SetConfig+0x2e6>
 80092c8:	2308      	movs	r3, #8
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ce:	e0cc      	b.n	800946a <UART_SetConfig+0x2e6>
 80092d0:	2310      	movs	r3, #16
 80092d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092d6:	e0c8      	b.n	800946a <UART_SetConfig+0x2e6>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a5e      	ldr	r2, [pc, #376]	; (8009458 <UART_SetConfig+0x2d4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d125      	bne.n	800932e <UART_SetConfig+0x1aa>
 80092e2:	4b5b      	ldr	r3, [pc, #364]	; (8009450 <UART_SetConfig+0x2cc>)
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092ec:	2b30      	cmp	r3, #48	; 0x30
 80092ee:	d016      	beq.n	800931e <UART_SetConfig+0x19a>
 80092f0:	2b30      	cmp	r3, #48	; 0x30
 80092f2:	d818      	bhi.n	8009326 <UART_SetConfig+0x1a2>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d00a      	beq.n	800930e <UART_SetConfig+0x18a>
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d814      	bhi.n	8009326 <UART_SetConfig+0x1a2>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <UART_SetConfig+0x182>
 8009300:	2b10      	cmp	r3, #16
 8009302:	d008      	beq.n	8009316 <UART_SetConfig+0x192>
 8009304:	e00f      	b.n	8009326 <UART_SetConfig+0x1a2>
 8009306:	2300      	movs	r3, #0
 8009308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800930c:	e0ad      	b.n	800946a <UART_SetConfig+0x2e6>
 800930e:	2302      	movs	r3, #2
 8009310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009314:	e0a9      	b.n	800946a <UART_SetConfig+0x2e6>
 8009316:	2304      	movs	r3, #4
 8009318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800931c:	e0a5      	b.n	800946a <UART_SetConfig+0x2e6>
 800931e:	2308      	movs	r3, #8
 8009320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009324:	e0a1      	b.n	800946a <UART_SetConfig+0x2e6>
 8009326:	2310      	movs	r3, #16
 8009328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932c:	e09d      	b.n	800946a <UART_SetConfig+0x2e6>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a4a      	ldr	r2, [pc, #296]	; (800945c <UART_SetConfig+0x2d8>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d125      	bne.n	8009384 <UART_SetConfig+0x200>
 8009338:	4b45      	ldr	r3, [pc, #276]	; (8009450 <UART_SetConfig+0x2cc>)
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009342:	2bc0      	cmp	r3, #192	; 0xc0
 8009344:	d016      	beq.n	8009374 <UART_SetConfig+0x1f0>
 8009346:	2bc0      	cmp	r3, #192	; 0xc0
 8009348:	d818      	bhi.n	800937c <UART_SetConfig+0x1f8>
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d00a      	beq.n	8009364 <UART_SetConfig+0x1e0>
 800934e:	2b80      	cmp	r3, #128	; 0x80
 8009350:	d814      	bhi.n	800937c <UART_SetConfig+0x1f8>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <UART_SetConfig+0x1d8>
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d008      	beq.n	800936c <UART_SetConfig+0x1e8>
 800935a:	e00f      	b.n	800937c <UART_SetConfig+0x1f8>
 800935c:	2300      	movs	r3, #0
 800935e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009362:	e082      	b.n	800946a <UART_SetConfig+0x2e6>
 8009364:	2302      	movs	r3, #2
 8009366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800936a:	e07e      	b.n	800946a <UART_SetConfig+0x2e6>
 800936c:	2304      	movs	r3, #4
 800936e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009372:	e07a      	b.n	800946a <UART_SetConfig+0x2e6>
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937a:	e076      	b.n	800946a <UART_SetConfig+0x2e6>
 800937c:	2310      	movs	r3, #16
 800937e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009382:	e072      	b.n	800946a <UART_SetConfig+0x2e6>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a35      	ldr	r2, [pc, #212]	; (8009460 <UART_SetConfig+0x2dc>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d12a      	bne.n	80093e4 <UART_SetConfig+0x260>
 800938e:	4b30      	ldr	r3, [pc, #192]	; (8009450 <UART_SetConfig+0x2cc>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800939c:	d01a      	beq.n	80093d4 <UART_SetConfig+0x250>
 800939e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093a2:	d81b      	bhi.n	80093dc <UART_SetConfig+0x258>
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a8:	d00c      	beq.n	80093c4 <UART_SetConfig+0x240>
 80093aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ae:	d815      	bhi.n	80093dc <UART_SetConfig+0x258>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <UART_SetConfig+0x238>
 80093b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b8:	d008      	beq.n	80093cc <UART_SetConfig+0x248>
 80093ba:	e00f      	b.n	80093dc <UART_SetConfig+0x258>
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093c2:	e052      	b.n	800946a <UART_SetConfig+0x2e6>
 80093c4:	2302      	movs	r3, #2
 80093c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093ca:	e04e      	b.n	800946a <UART_SetConfig+0x2e6>
 80093cc:	2304      	movs	r3, #4
 80093ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093d2:	e04a      	b.n	800946a <UART_SetConfig+0x2e6>
 80093d4:	2308      	movs	r3, #8
 80093d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093da:	e046      	b.n	800946a <UART_SetConfig+0x2e6>
 80093dc:	2310      	movs	r3, #16
 80093de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093e2:	e042      	b.n	800946a <UART_SetConfig+0x2e6>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a17      	ldr	r2, [pc, #92]	; (8009448 <UART_SetConfig+0x2c4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d13a      	bne.n	8009464 <UART_SetConfig+0x2e0>
 80093ee:	4b18      	ldr	r3, [pc, #96]	; (8009450 <UART_SetConfig+0x2cc>)
 80093f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093fc:	d01a      	beq.n	8009434 <UART_SetConfig+0x2b0>
 80093fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009402:	d81b      	bhi.n	800943c <UART_SetConfig+0x2b8>
 8009404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009408:	d00c      	beq.n	8009424 <UART_SetConfig+0x2a0>
 800940a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800940e:	d815      	bhi.n	800943c <UART_SetConfig+0x2b8>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <UART_SetConfig+0x298>
 8009414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009418:	d008      	beq.n	800942c <UART_SetConfig+0x2a8>
 800941a:	e00f      	b.n	800943c <UART_SetConfig+0x2b8>
 800941c:	2300      	movs	r3, #0
 800941e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009422:	e022      	b.n	800946a <UART_SetConfig+0x2e6>
 8009424:	2302      	movs	r3, #2
 8009426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800942a:	e01e      	b.n	800946a <UART_SetConfig+0x2e6>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009432:	e01a      	b.n	800946a <UART_SetConfig+0x2e6>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800943a:	e016      	b.n	800946a <UART_SetConfig+0x2e6>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009442:	e012      	b.n	800946a <UART_SetConfig+0x2e6>
 8009444:	efff69f3 	.word	0xefff69f3
 8009448:	40008000 	.word	0x40008000
 800944c:	40013800 	.word	0x40013800
 8009450:	40021000 	.word	0x40021000
 8009454:	40004400 	.word	0x40004400
 8009458:	40004800 	.word	0x40004800
 800945c:	40004c00 	.word	0x40004c00
 8009460:	40005000 	.word	0x40005000
 8009464:	2310      	movs	r3, #16
 8009466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a9f      	ldr	r2, [pc, #636]	; (80096ec <UART_SetConfig+0x568>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d17a      	bne.n	800956a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009478:	2b08      	cmp	r3, #8
 800947a:	d824      	bhi.n	80094c6 <UART_SetConfig+0x342>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <UART_SetConfig+0x300>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	080094a9 	.word	0x080094a9
 8009488:	080094c7 	.word	0x080094c7
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094c7 	.word	0x080094c7
 8009494:	080094b7 	.word	0x080094b7
 8009498:	080094c7 	.word	0x080094c7
 800949c:	080094c7 	.word	0x080094c7
 80094a0:	080094c7 	.word	0x080094c7
 80094a4:	080094bf 	.word	0x080094bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a8:	f7fd f8fc 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 80094ac:	61f8      	str	r0, [r7, #28]
        break;
 80094ae:	e010      	b.n	80094d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b0:	4b8f      	ldr	r3, [pc, #572]	; (80096f0 <UART_SetConfig+0x56c>)
 80094b2:	61fb      	str	r3, [r7, #28]
        break;
 80094b4:	e00d      	b.n	80094d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094b6:	f7fd f85d 	bl	8006574 <HAL_RCC_GetSysClockFreq>
 80094ba:	61f8      	str	r0, [r7, #28]
        break;
 80094bc:	e009      	b.n	80094d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c2:	61fb      	str	r3, [r7, #28]
        break;
 80094c4:	e005      	b.n	80094d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80094d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80fb 	beq.w	80096d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	4413      	add	r3, r2
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d305      	bcc.n	80094f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d903      	bls.n	80094fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094fc:	e0e8      	b.n	80096d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	2200      	movs	r2, #0
 8009502:	461c      	mov	r4, r3
 8009504:	4615      	mov	r5, r2
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	022b      	lsls	r3, r5, #8
 8009510:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009514:	0222      	lsls	r2, r4, #8
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	6849      	ldr	r1, [r1, #4]
 800951a:	0849      	lsrs	r1, r1, #1
 800951c:	2000      	movs	r0, #0
 800951e:	4688      	mov	r8, r1
 8009520:	4681      	mov	r9, r0
 8009522:	eb12 0a08 	adds.w	sl, r2, r8
 8009526:	eb43 0b09 	adc.w	fp, r3, r9
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	603b      	str	r3, [r7, #0]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009538:	4650      	mov	r0, sl
 800953a:	4659      	mov	r1, fp
 800953c:	f7f7 fb34 	bl	8000ba8 <__aeabi_uldivmod>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4613      	mov	r3, r2
 8009546:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800954e:	d308      	bcc.n	8009562 <UART_SetConfig+0x3de>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009556:	d204      	bcs.n	8009562 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	60da      	str	r2, [r3, #12]
 8009560:	e0b6      	b.n	80096d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009568:	e0b2      	b.n	80096d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009572:	d15e      	bne.n	8009632 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009578:	2b08      	cmp	r3, #8
 800957a:	d828      	bhi.n	80095ce <UART_SetConfig+0x44a>
 800957c:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <UART_SetConfig+0x400>)
 800957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009582:	bf00      	nop
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	080095cf 	.word	0x080095cf
 8009594:	080095bf 	.word	0x080095bf
 8009598:	080095cf 	.word	0x080095cf
 800959c:	080095cf 	.word	0x080095cf
 80095a0:	080095cf 	.word	0x080095cf
 80095a4:	080095c7 	.word	0x080095c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095a8:	f7fd f87c 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 80095ac:	61f8      	str	r0, [r7, #28]
        break;
 80095ae:	e014      	b.n	80095da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b0:	f7fd f88e 	bl	80066d0 <HAL_RCC_GetPCLK2Freq>
 80095b4:	61f8      	str	r0, [r7, #28]
        break;
 80095b6:	e010      	b.n	80095da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095b8:	4b4d      	ldr	r3, [pc, #308]	; (80096f0 <UART_SetConfig+0x56c>)
 80095ba:	61fb      	str	r3, [r7, #28]
        break;
 80095bc:	e00d      	b.n	80095da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095be:	f7fc ffd9 	bl	8006574 <HAL_RCC_GetSysClockFreq>
 80095c2:	61f8      	str	r0, [r7, #28]
        break;
 80095c4:	e009      	b.n	80095da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ca:	61fb      	str	r3, [r7, #28]
        break;
 80095cc:	e005      	b.n	80095da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80095d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d077      	beq.n	80096d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	005a      	lsls	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	441a      	add	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b0f      	cmp	r3, #15
 80095fa:	d916      	bls.n	800962a <UART_SetConfig+0x4a6>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009602:	d212      	bcs.n	800962a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	b29b      	uxth	r3, r3
 8009608:	f023 030f 	bic.w	r3, r3, #15
 800960c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	085b      	lsrs	r3, r3, #1
 8009612:	b29b      	uxth	r3, r3
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	b29a      	uxth	r2, r3
 800961a:	8afb      	ldrh	r3, [r7, #22]
 800961c:	4313      	orrs	r3, r2
 800961e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	8afa      	ldrh	r2, [r7, #22]
 8009626:	60da      	str	r2, [r3, #12]
 8009628:	e052      	b.n	80096d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009630:	e04e      	b.n	80096d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009636:	2b08      	cmp	r3, #8
 8009638:	d827      	bhi.n	800968a <UART_SetConfig+0x506>
 800963a:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <UART_SetConfig+0x4bc>)
 800963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009640:	08009665 	.word	0x08009665
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009675 	.word	0x08009675
 800964c:	0800968b 	.word	0x0800968b
 8009650:	0800967b 	.word	0x0800967b
 8009654:	0800968b 	.word	0x0800968b
 8009658:	0800968b 	.word	0x0800968b
 800965c:	0800968b 	.word	0x0800968b
 8009660:	08009683 	.word	0x08009683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009664:	f7fd f81e 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8009668:	61f8      	str	r0, [r7, #28]
        break;
 800966a:	e014      	b.n	8009696 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800966c:	f7fd f830 	bl	80066d0 <HAL_RCC_GetPCLK2Freq>
 8009670:	61f8      	str	r0, [r7, #28]
        break;
 8009672:	e010      	b.n	8009696 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009674:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <UART_SetConfig+0x56c>)
 8009676:	61fb      	str	r3, [r7, #28]
        break;
 8009678:	e00d      	b.n	8009696 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800967a:	f7fc ff7b 	bl	8006574 <HAL_RCC_GetSysClockFreq>
 800967e:	61f8      	str	r0, [r7, #28]
        break;
 8009680:	e009      	b.n	8009696 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009686:	61fb      	str	r3, [r7, #28]
        break;
 8009688:	e005      	b.n	8009696 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009694:	bf00      	nop
    }

    if (pclk != 0U)
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d019      	beq.n	80096d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	085a      	lsrs	r2, r3, #1
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	441a      	add	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	2b0f      	cmp	r3, #15
 80096b4:	d909      	bls.n	80096ca <UART_SetConfig+0x546>
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096bc:	d205      	bcs.n	80096ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60da      	str	r2, [r3, #12]
 80096c8:	e002      	b.n	80096d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80096dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3728      	adds	r7, #40	; 0x28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096ea:	bf00      	nop
 80096ec:	40008000 	.word	0x40008000
 80096f0:	00f42400 	.word	0x00f42400

080096f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01a      	beq.n	800980a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f2:	d10a      	bne.n	800980a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b098      	sub	sp, #96	; 0x60
 800983c:	af02      	add	r7, sp, #8
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009848:	f7f9 fd50 	bl	80032ec <HAL_GetTick>
 800984c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d12e      	bne.n	80098ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009864:	2200      	movs	r2, #0
 8009866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f88c 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d021      	beq.n	80098ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800988a:	653b      	str	r3, [r7, #80]	; 0x50
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009894:	647b      	str	r3, [r7, #68]	; 0x44
 8009896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800989a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e6      	bne.n	8009876 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e062      	b.n	8009980 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d149      	bne.n	800995c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d0:	2200      	movs	r2, #0
 80098d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f856 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03c      	beq.n	800995c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	623b      	str	r3, [r7, #32]
   return(result);
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009900:	633b      	str	r3, [r7, #48]	; 0x30
 8009902:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e6      	bne.n	80098e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3308      	adds	r3, #8
 800991a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	60fb      	str	r3, [r7, #12]
   return(result);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	64bb      	str	r3, [r7, #72]	; 0x48
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3308      	adds	r3, #8
 8009932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009934:	61fa      	str	r2, [r7, #28]
 8009936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	69b9      	ldr	r1, [r7, #24]
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	617b      	str	r3, [r7, #20]
   return(result);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e5      	bne.n	8009914 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2220      	movs	r2, #32
 800994c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e011      	b.n	8009980 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3758      	adds	r7, #88	; 0x58
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	4613      	mov	r3, r2
 8009996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009998:	e049      	b.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d045      	beq.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a2:	f7f9 fca3 	bl	80032ec <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e048      	b.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d031      	beq.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d110      	bne.n	80099fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2208      	movs	r2, #8
 80099de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 f8ff 	bl	8009be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2208      	movs	r2, #8
 80099ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e029      	b.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a08:	d111      	bne.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f8e5 	bl	8009be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e00f      	b.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69da      	ldr	r2, [r3, #28]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	4013      	ands	r3, r2
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	bf0c      	ite	eq
 8009a3e:	2301      	moveq	r3, #1
 8009a40:	2300      	movne	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	461a      	mov	r2, r3
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d0a6      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b097      	sub	sp, #92	; 0x5c
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	88fa      	ldrh	r2, [r7, #6]
 8009a70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	88fa      	ldrh	r2, [r7, #6]
 8009a78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8a:	d10e      	bne.n	8009aaa <UART_Start_Receive_IT+0x52>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <UART_Start_Receive_IT+0x48>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a9e:	e02d      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	22ff      	movs	r2, #255	; 0xff
 8009aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009aa8:	e028      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10d      	bne.n	8009ace <UART_Start_Receive_IT+0x76>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d104      	bne.n	8009ac4 <UART_Start_Receive_IT+0x6c>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	22ff      	movs	r2, #255	; 0xff
 8009abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ac2:	e01b      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	227f      	movs	r2, #127	; 0x7f
 8009ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009acc:	e016      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ad6:	d10d      	bne.n	8009af4 <UART_Start_Receive_IT+0x9c>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d104      	bne.n	8009aea <UART_Start_Receive_IT+0x92>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	227f      	movs	r2, #127	; 0x7f
 8009ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ae8:	e008      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	223f      	movs	r2, #63	; 0x3f
 8009aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009af2:	e003      	b.n	8009afc <UART_Start_Receive_IT+0xa4>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2222      	movs	r2, #34	; 0x22
 8009b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3308      	adds	r3, #8
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	e853 3f00 	ldrex	r3, [r3]
 8009b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	657b      	str	r3, [r7, #84]	; 0x54
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e5      	bne.n	8009b0c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b48:	d107      	bne.n	8009b5a <UART_Start_Receive_IT+0x102>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d103      	bne.n	8009b5a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4a21      	ldr	r2, [pc, #132]	; (8009bdc <UART_Start_Receive_IT+0x184>)
 8009b56:	669a      	str	r2, [r3, #104]	; 0x68
 8009b58:	e002      	b.n	8009b60 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4a20      	ldr	r2, [pc, #128]	; (8009be0 <UART_Start_Receive_IT+0x188>)
 8009b5e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d019      	beq.n	8009b9c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b86:	637b      	str	r3, [r7, #52]	; 0x34
 8009b88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e6      	bne.n	8009b68 <UART_Start_Receive_IT+0x110>
 8009b9a:	e018      	b.n	8009bce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f043 0320 	orr.w	r3, r3, #32
 8009bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bba:	623b      	str	r3, [r7, #32]
 8009bbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	69f9      	ldr	r1, [r7, #28]
 8009bc0:	6a3a      	ldr	r2, [r7, #32]
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	375c      	adds	r7, #92	; 0x5c
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	08009ee9 	.word	0x08009ee9
 8009be0:	08009d2d 	.word	0x08009d2d

08009be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b095      	sub	sp, #84	; 0x54
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e6      	bne.n	8009bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3308      	adds	r3, #8
 8009c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	f023 0301 	bic.w	r3, r3, #1
 8009c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e5      	bne.n	8009c1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d118      	bne.n	8009c8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f023 0310 	bic.w	r3, r3, #16
 8009c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	6979      	ldr	r1, [r7, #20]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	613b      	str	r3, [r7, #16]
   return(result);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e6      	bne.n	8009c5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009ca0:	bf00      	nop
 8009ca2:	3754      	adds	r7, #84	; 0x54
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff fa44 	bl	8009158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cd0:	bf00      	nop
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf4:	61fb      	str	r3, [r7, #28]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	61bb      	str	r3, [r7, #24]
 8009d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6979      	ldr	r1, [r7, #20]
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e6      	bne.n	8009ce0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2220      	movs	r2, #32
 8009d16:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fa10 	bl	8009144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d24:	bf00      	nop
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b09c      	sub	sp, #112	; 0x70
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d44:	2b22      	cmp	r3, #34	; 0x22
 8009d46:	f040 80be 	bne.w	8009ec6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d58:	b2d9      	uxtb	r1, r3
 8009d5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d64:	400a      	ands	r2, r1
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 80a3 	bne.w	8009eda <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e6      	bne.n	8009d94 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009de6:	647a      	str	r2, [r7, #68]	; 0x44
 8009de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e5      	bne.n	8009dc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a34      	ldr	r2, [pc, #208]	; (8009ee4 <UART_RxISR_8BIT+0x1b8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d01f      	beq.n	8009e58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d018      	beq.n	8009e58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	623b      	str	r3, [r7, #32]
   return(result);
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e44:	633b      	str	r3, [r7, #48]	; 0x30
 8009e46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e6      	bne.n	8009e26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d12e      	bne.n	8009ebe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0310 	bic.w	r3, r3, #16
 8009e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e84:	61fb      	str	r3, [r7, #28]
 8009e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	69b9      	ldr	r1, [r7, #24]
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	617b      	str	r3, [r7, #20]
   return(result);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e6      	bne.n	8009e66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	69db      	ldr	r3, [r3, #28]
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d103      	bne.n	8009eae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2210      	movs	r2, #16
 8009eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff f958 	bl	800916c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ebc:	e00d      	b.n	8009eda <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7f8 fdd2 	bl	8002a68 <HAL_UART_RxCpltCallback>
}
 8009ec4:	e009      	b.n	8009eda <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	8b1b      	ldrh	r3, [r3, #24]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0208 	orr.w	r2, r2, #8
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	831a      	strh	r2, [r3, #24]
}
 8009eda:	bf00      	nop
 8009edc:	3770      	adds	r7, #112	; 0x70
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	40008000 	.word	0x40008000

08009ee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b09c      	sub	sp, #112	; 0x70
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ef6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f00:	2b22      	cmp	r3, #34	; 0x22
 8009f02:	f040 80be 	bne.w	800a082 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f14:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f1e:	4013      	ands	r3, r2
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	1c9a      	adds	r2, r3, #2
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f040 80a3 	bne.w	800a096 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f64:	667b      	str	r3, [r7, #100]	; 0x64
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f70:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e6      	bne.n	8009f50 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	663b      	str	r3, [r7, #96]	; 0x60
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fa2:	643a      	str	r2, [r7, #64]	; 0x40
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e5      	bne.n	8009f82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a34      	ldr	r2, [pc, #208]	; (800a0a0 <UART_RxISR_16BIT+0x1b8>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d01f      	beq.n	800a014 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d018      	beq.n	800a014 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a000:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a002:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e6      	bne.n	8009fe2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d12e      	bne.n	800a07a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	65bb      	str	r3, [r7, #88]	; 0x58
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a040:	61bb      	str	r3, [r7, #24]
 800a042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	6979      	ldr	r1, [r7, #20]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	613b      	str	r3, [r7, #16]
   return(result);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e6      	bne.n	800a022 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d103      	bne.n	800a06a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2210      	movs	r2, #16
 800a068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff f87a 	bl	800916c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a078:	e00d      	b.n	800a096 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f8 fcf4 	bl	8002a68 <HAL_UART_RxCpltCallback>
}
 800a080:	e009      	b.n	800a096 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	8b1b      	ldrh	r3, [r3, #24]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0208 	orr.w	r2, r2, #8
 800a092:	b292      	uxth	r2, r2
 800a094:	831a      	strh	r2, [r3, #24]
}
 800a096:	bf00      	nop
 800a098:	3770      	adds	r7, #112	; 0x70
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40008000 	.word	0x40008000

0800a0a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <atoi>:
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	f000 b882 	b.w	800a1c4 <strtol>

0800a0c0 <_strtol_l.constprop.0>:
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c6:	d001      	beq.n	800a0cc <_strtol_l.constprop.0+0xc>
 800a0c8:	2b24      	cmp	r3, #36	; 0x24
 800a0ca:	d906      	bls.n	800a0da <_strtol_l.constprop.0+0x1a>
 800a0cc:	f000 fed0 	bl	800ae70 <__errno>
 800a0d0:	2316      	movs	r3, #22
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a1c0 <_strtol_l.constprop.0+0x100>
 800a0de:	460d      	mov	r5, r1
 800a0e0:	462e      	mov	r6, r5
 800a0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a0ea:	f017 0708 	ands.w	r7, r7, #8
 800a0ee:	d1f7      	bne.n	800a0e0 <_strtol_l.constprop.0+0x20>
 800a0f0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0f2:	d132      	bne.n	800a15a <_strtol_l.constprop.0+0x9a>
 800a0f4:	782c      	ldrb	r4, [r5, #0]
 800a0f6:	2701      	movs	r7, #1
 800a0f8:	1cb5      	adds	r5, r6, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d05b      	beq.n	800a1b6 <_strtol_l.constprop.0+0xf6>
 800a0fe:	2b10      	cmp	r3, #16
 800a100:	d109      	bne.n	800a116 <_strtol_l.constprop.0+0x56>
 800a102:	2c30      	cmp	r4, #48	; 0x30
 800a104:	d107      	bne.n	800a116 <_strtol_l.constprop.0+0x56>
 800a106:	782c      	ldrb	r4, [r5, #0]
 800a108:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a10c:	2c58      	cmp	r4, #88	; 0x58
 800a10e:	d14d      	bne.n	800a1ac <_strtol_l.constprop.0+0xec>
 800a110:	786c      	ldrb	r4, [r5, #1]
 800a112:	2310      	movs	r3, #16
 800a114:	3502      	adds	r5, #2
 800a116:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a11e:	f04f 0e00 	mov.w	lr, #0
 800a122:	fbb8 f9f3 	udiv	r9, r8, r3
 800a126:	4676      	mov	r6, lr
 800a128:	fb03 8a19 	mls	sl, r3, r9, r8
 800a12c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a130:	f1bc 0f09 	cmp.w	ip, #9
 800a134:	d816      	bhi.n	800a164 <_strtol_l.constprop.0+0xa4>
 800a136:	4664      	mov	r4, ip
 800a138:	42a3      	cmp	r3, r4
 800a13a:	dd24      	ble.n	800a186 <_strtol_l.constprop.0+0xc6>
 800a13c:	f1be 3fff 	cmp.w	lr, #4294967295
 800a140:	d008      	beq.n	800a154 <_strtol_l.constprop.0+0x94>
 800a142:	45b1      	cmp	r9, r6
 800a144:	d31c      	bcc.n	800a180 <_strtol_l.constprop.0+0xc0>
 800a146:	d101      	bne.n	800a14c <_strtol_l.constprop.0+0x8c>
 800a148:	45a2      	cmp	sl, r4
 800a14a:	db19      	blt.n	800a180 <_strtol_l.constprop.0+0xc0>
 800a14c:	fb06 4603 	mla	r6, r6, r3, r4
 800a150:	f04f 0e01 	mov.w	lr, #1
 800a154:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a158:	e7e8      	b.n	800a12c <_strtol_l.constprop.0+0x6c>
 800a15a:	2c2b      	cmp	r4, #43	; 0x2b
 800a15c:	bf04      	itt	eq
 800a15e:	782c      	ldrbeq	r4, [r5, #0]
 800a160:	1cb5      	addeq	r5, r6, #2
 800a162:	e7ca      	b.n	800a0fa <_strtol_l.constprop.0+0x3a>
 800a164:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a168:	f1bc 0f19 	cmp.w	ip, #25
 800a16c:	d801      	bhi.n	800a172 <_strtol_l.constprop.0+0xb2>
 800a16e:	3c37      	subs	r4, #55	; 0x37
 800a170:	e7e2      	b.n	800a138 <_strtol_l.constprop.0+0x78>
 800a172:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a176:	f1bc 0f19 	cmp.w	ip, #25
 800a17a:	d804      	bhi.n	800a186 <_strtol_l.constprop.0+0xc6>
 800a17c:	3c57      	subs	r4, #87	; 0x57
 800a17e:	e7db      	b.n	800a138 <_strtol_l.constprop.0+0x78>
 800a180:	f04f 3eff 	mov.w	lr, #4294967295
 800a184:	e7e6      	b.n	800a154 <_strtol_l.constprop.0+0x94>
 800a186:	f1be 3fff 	cmp.w	lr, #4294967295
 800a18a:	d105      	bne.n	800a198 <_strtol_l.constprop.0+0xd8>
 800a18c:	2322      	movs	r3, #34	; 0x22
 800a18e:	6003      	str	r3, [r0, #0]
 800a190:	4646      	mov	r6, r8
 800a192:	b942      	cbnz	r2, 800a1a6 <_strtol_l.constprop.0+0xe6>
 800a194:	4630      	mov	r0, r6
 800a196:	e79e      	b.n	800a0d6 <_strtol_l.constprop.0+0x16>
 800a198:	b107      	cbz	r7, 800a19c <_strtol_l.constprop.0+0xdc>
 800a19a:	4276      	negs	r6, r6
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d0f9      	beq.n	800a194 <_strtol_l.constprop.0+0xd4>
 800a1a0:	f1be 0f00 	cmp.w	lr, #0
 800a1a4:	d000      	beq.n	800a1a8 <_strtol_l.constprop.0+0xe8>
 800a1a6:	1e69      	subs	r1, r5, #1
 800a1a8:	6011      	str	r1, [r2, #0]
 800a1aa:	e7f3      	b.n	800a194 <_strtol_l.constprop.0+0xd4>
 800a1ac:	2430      	movs	r4, #48	; 0x30
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1b1      	bne.n	800a116 <_strtol_l.constprop.0+0x56>
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	e7af      	b.n	800a116 <_strtol_l.constprop.0+0x56>
 800a1b6:	2c30      	cmp	r4, #48	; 0x30
 800a1b8:	d0a5      	beq.n	800a106 <_strtol_l.constprop.0+0x46>
 800a1ba:	230a      	movs	r3, #10
 800a1bc:	e7ab      	b.n	800a116 <_strtol_l.constprop.0+0x56>
 800a1be:	bf00      	nop
 800a1c0:	0800d125 	.word	0x0800d125

0800a1c4 <strtol>:
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	460a      	mov	r2, r1
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	4802      	ldr	r0, [pc, #8]	; (800a1d4 <strtol+0x10>)
 800a1cc:	6800      	ldr	r0, [r0, #0]
 800a1ce:	f7ff bf77 	b.w	800a0c0 <_strtol_l.constprop.0>
 800a1d2:	bf00      	nop
 800a1d4:	20000064 	.word	0x20000064

0800a1d8 <__cvt>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	ec55 4b10 	vmov	r4, r5, d0
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1ee:	461d      	movlt	r5, r3
 800a1f0:	2300      	movge	r3, #0
 800a1f2:	232d      	movlt	r3, #45	; 0x2d
 800a1f4:	700b      	strb	r3, [r1, #0]
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1fc:	4691      	mov	r9, r2
 800a1fe:	f023 0820 	bic.w	r8, r3, #32
 800a202:	bfbc      	itt	lt
 800a204:	4622      	movlt	r2, r4
 800a206:	4614      	movlt	r4, r2
 800a208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a20c:	d005      	beq.n	800a21a <__cvt+0x42>
 800a20e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a212:	d100      	bne.n	800a216 <__cvt+0x3e>
 800a214:	3601      	adds	r6, #1
 800a216:	2102      	movs	r1, #2
 800a218:	e000      	b.n	800a21c <__cvt+0x44>
 800a21a:	2103      	movs	r1, #3
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	ab02      	add	r3, sp, #8
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	4653      	mov	r3, sl
 800a22a:	4632      	mov	r2, r6
 800a22c:	f000 fef4 	bl	800b018 <_dtoa_r>
 800a230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a234:	4607      	mov	r7, r0
 800a236:	d102      	bne.n	800a23e <__cvt+0x66>
 800a238:	f019 0f01 	tst.w	r9, #1
 800a23c:	d022      	beq.n	800a284 <__cvt+0xac>
 800a23e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a242:	eb07 0906 	add.w	r9, r7, r6
 800a246:	d110      	bne.n	800a26a <__cvt+0x92>
 800a248:	783b      	ldrb	r3, [r7, #0]
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d10a      	bne.n	800a264 <__cvt+0x8c>
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a25a:	b918      	cbnz	r0, 800a264 <__cvt+0x8c>
 800a25c:	f1c6 0601 	rsb	r6, r6, #1
 800a260:	f8ca 6000 	str.w	r6, [sl]
 800a264:	f8da 3000 	ldr.w	r3, [sl]
 800a268:	4499      	add	r9, r3
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 800a276:	b108      	cbz	r0, 800a27c <__cvt+0xa4>
 800a278:	f8cd 900c 	str.w	r9, [sp, #12]
 800a27c:	2230      	movs	r2, #48	; 0x30
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	454b      	cmp	r3, r9
 800a282:	d307      	bcc.n	800a294 <__cvt+0xbc>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a288:	1bdb      	subs	r3, r3, r7
 800a28a:	4638      	mov	r0, r7
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	b004      	add	sp, #16
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	1c59      	adds	r1, r3, #1
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e7f0      	b.n	800a27e <__cvt+0xa6>

0800a29c <__exponent>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	4249      	neglt	r1, r1
 800a2a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2aa:	bfb4      	ite	lt
 800a2ac:	222d      	movlt	r2, #45	; 0x2d
 800a2ae:	222b      	movge	r2, #43	; 0x2b
 800a2b0:	2909      	cmp	r1, #9
 800a2b2:	7042      	strb	r2, [r0, #1]
 800a2b4:	dd2a      	ble.n	800a30c <__exponent+0x70>
 800a2b6:	f10d 0207 	add.w	r2, sp, #7
 800a2ba:	4617      	mov	r7, r2
 800a2bc:	260a      	movs	r6, #10
 800a2be:	4694      	mov	ip, r2
 800a2c0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a2c4:	fb06 1415 	mls	r4, r6, r5, r1
 800a2c8:	3430      	adds	r4, #48	; 0x30
 800a2ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	2c63      	cmp	r4, #99	; 0x63
 800a2d2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	dcf1      	bgt.n	800a2be <__exponent+0x22>
 800a2da:	3130      	adds	r1, #48	; 0x30
 800a2dc:	f1ac 0402 	sub.w	r4, ip, #2
 800a2e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a2e4:	1c41      	adds	r1, r0, #1
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	42ba      	cmp	r2, r7
 800a2ea:	d30a      	bcc.n	800a302 <__exponent+0x66>
 800a2ec:	f10d 0209 	add.w	r2, sp, #9
 800a2f0:	eba2 020c 	sub.w	r2, r2, ip
 800a2f4:	42bc      	cmp	r4, r7
 800a2f6:	bf88      	it	hi
 800a2f8:	2200      	movhi	r2, #0
 800a2fa:	4413      	add	r3, r2
 800a2fc:	1a18      	subs	r0, r3, r0
 800a2fe:	b003      	add	sp, #12
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a302:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a306:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a30a:	e7ed      	b.n	800a2e8 <__exponent+0x4c>
 800a30c:	2330      	movs	r3, #48	; 0x30
 800a30e:	3130      	adds	r1, #48	; 0x30
 800a310:	7083      	strb	r3, [r0, #2]
 800a312:	70c1      	strb	r1, [r0, #3]
 800a314:	1d03      	adds	r3, r0, #4
 800a316:	e7f1      	b.n	800a2fc <__exponent+0x60>

0800a318 <_printf_float>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	b08d      	sub	sp, #52	; 0x34
 800a322:	460c      	mov	r4, r1
 800a324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a328:	4616      	mov	r6, r2
 800a32a:	461f      	mov	r7, r3
 800a32c:	4605      	mov	r5, r0
 800a32e:	f000 fd55 	bl	800addc <_localeconv_r>
 800a332:	f8d0 a000 	ldr.w	sl, [r0]
 800a336:	4650      	mov	r0, sl
 800a338:	f7f5 ff9a 	bl	8000270 <strlen>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8d8 3000 	ldr.w	r3, [r8]
 800a348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	f103 0208 	add.w	r2, r3, #8
 800a356:	f8c8 2000 	str.w	r2, [r8]
 800a35a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f8cd 8018 	str.w	r8, [sp, #24]
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a374:	4b9e      	ldr	r3, [pc, #632]	; (800a5f0 <_printf_float+0x2d8>)
 800a376:	f04f 32ff 	mov.w	r2, #4294967295
 800a37a:	f7f6 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800a37e:	bb88      	cbnz	r0, 800a3e4 <_printf_float+0xcc>
 800a380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a384:	4b9a      	ldr	r3, [pc, #616]	; (800a5f0 <_printf_float+0x2d8>)
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	f7f6 fbb1 	bl	8000af0 <__aeabi_dcmple>
 800a38e:	bb48      	cbnz	r0, 800a3e4 <_printf_float+0xcc>
 800a390:	2200      	movs	r2, #0
 800a392:	2300      	movs	r3, #0
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f6 fba0 	bl	8000adc <__aeabi_dcmplt>
 800a39c:	b110      	cbz	r0, 800a3a4 <_printf_float+0x8c>
 800a39e:	232d      	movs	r3, #45	; 0x2d
 800a3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a4:	4a93      	ldr	r2, [pc, #588]	; (800a5f4 <_printf_float+0x2dc>)
 800a3a6:	4b94      	ldr	r3, [pc, #592]	; (800a5f8 <_printf_float+0x2e0>)
 800a3a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3ac:	bf94      	ite	ls
 800a3ae:	4690      	movls	r8, r2
 800a3b0:	4698      	movhi	r8, r3
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	9b05      	ldr	r3, [sp, #20]
 800a3b8:	f023 0304 	bic.w	r3, r3, #4
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	f04f 0900 	mov.w	r9, #0
 800a3c2:	9700      	str	r7, [sp, #0]
 800a3c4:	4633      	mov	r3, r6
 800a3c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f9da 	bl	800a784 <_printf_common>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f040 8090 	bne.w	800a4f6 <_printf_float+0x1de>
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	b00d      	add	sp, #52	; 0x34
 800a3dc:	ecbd 8b02 	vpop	{d8}
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	f7f6 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 800a3f0:	b140      	cbz	r0, 800a404 <_printf_float+0xec>
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfbc      	itt	lt
 800a3f8:	232d      	movlt	r3, #45	; 0x2d
 800a3fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3fe:	4a7f      	ldr	r2, [pc, #508]	; (800a5fc <_printf_float+0x2e4>)
 800a400:	4b7f      	ldr	r3, [pc, #508]	; (800a600 <_printf_float+0x2e8>)
 800a402:	e7d1      	b.n	800a3a8 <_printf_float+0x90>
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a40a:	9206      	str	r2, [sp, #24]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	d13f      	bne.n	800a490 <_printf_float+0x178>
 800a410:	2306      	movs	r3, #6
 800a412:	6063      	str	r3, [r4, #4]
 800a414:	9b05      	ldr	r3, [sp, #20]
 800a416:	6861      	ldr	r1, [r4, #4]
 800a418:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a41c:	2300      	movs	r3, #0
 800a41e:	9303      	str	r3, [sp, #12]
 800a420:	ab0a      	add	r3, sp, #40	; 0x28
 800a422:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a426:	ab09      	add	r3, sp, #36	; 0x24
 800a428:	ec49 8b10 	vmov	d0, r8, r9
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	6022      	str	r2, [r4, #0]
 800a430:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a434:	4628      	mov	r0, r5
 800a436:	f7ff fecf 	bl	800a1d8 <__cvt>
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a43e:	2b47      	cmp	r3, #71	; 0x47
 800a440:	4680      	mov	r8, r0
 800a442:	d108      	bne.n	800a456 <_printf_float+0x13e>
 800a444:	1cc8      	adds	r0, r1, #3
 800a446:	db02      	blt.n	800a44e <_printf_float+0x136>
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	4299      	cmp	r1, r3
 800a44c:	dd41      	ble.n	800a4d2 <_printf_float+0x1ba>
 800a44e:	f1ab 0302 	sub.w	r3, fp, #2
 800a452:	fa5f fb83 	uxtb.w	fp, r3
 800a456:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a45a:	d820      	bhi.n	800a49e <_printf_float+0x186>
 800a45c:	3901      	subs	r1, #1
 800a45e:	465a      	mov	r2, fp
 800a460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a464:	9109      	str	r1, [sp, #36]	; 0x24
 800a466:	f7ff ff19 	bl	800a29c <__exponent>
 800a46a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46c:	1813      	adds	r3, r2, r0
 800a46e:	2a01      	cmp	r2, #1
 800a470:	4681      	mov	r9, r0
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	dc02      	bgt.n	800a47c <_printf_float+0x164>
 800a476:	6822      	ldr	r2, [r4, #0]
 800a478:	07d2      	lsls	r2, r2, #31
 800a47a:	d501      	bpl.n	800a480 <_printf_float+0x168>
 800a47c:	3301      	adds	r3, #1
 800a47e:	6123      	str	r3, [r4, #16]
 800a480:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a484:	2b00      	cmp	r3, #0
 800a486:	d09c      	beq.n	800a3c2 <_printf_float+0xaa>
 800a488:	232d      	movs	r3, #45	; 0x2d
 800a48a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a48e:	e798      	b.n	800a3c2 <_printf_float+0xaa>
 800a490:	9a06      	ldr	r2, [sp, #24]
 800a492:	2a47      	cmp	r2, #71	; 0x47
 800a494:	d1be      	bne.n	800a414 <_printf_float+0xfc>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1bc      	bne.n	800a414 <_printf_float+0xfc>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e7b9      	b.n	800a412 <_printf_float+0xfa>
 800a49e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4a2:	d118      	bne.n	800a4d6 <_printf_float+0x1be>
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	6863      	ldr	r3, [r4, #4]
 800a4a8:	dd0b      	ble.n	800a4c2 <_printf_float+0x1aa>
 800a4aa:	6121      	str	r1, [r4, #16]
 800a4ac:	b913      	cbnz	r3, 800a4b4 <_printf_float+0x19c>
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	07d0      	lsls	r0, r2, #31
 800a4b2:	d502      	bpl.n	800a4ba <_printf_float+0x1a2>
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	440b      	add	r3, r1
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4bc:	f04f 0900 	mov.w	r9, #0
 800a4c0:	e7de      	b.n	800a480 <_printf_float+0x168>
 800a4c2:	b913      	cbnz	r3, 800a4ca <_printf_float+0x1b2>
 800a4c4:	6822      	ldr	r2, [r4, #0]
 800a4c6:	07d2      	lsls	r2, r2, #31
 800a4c8:	d501      	bpl.n	800a4ce <_printf_float+0x1b6>
 800a4ca:	3302      	adds	r3, #2
 800a4cc:	e7f4      	b.n	800a4b8 <_printf_float+0x1a0>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7f2      	b.n	800a4b8 <_printf_float+0x1a0>
 800a4d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d8:	4299      	cmp	r1, r3
 800a4da:	db05      	blt.n	800a4e8 <_printf_float+0x1d0>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	6121      	str	r1, [r4, #16]
 800a4e0:	07d8      	lsls	r0, r3, #31
 800a4e2:	d5ea      	bpl.n	800a4ba <_printf_float+0x1a2>
 800a4e4:	1c4b      	adds	r3, r1, #1
 800a4e6:	e7e7      	b.n	800a4b8 <_printf_float+0x1a0>
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	bfd4      	ite	le
 800a4ec:	f1c1 0202 	rsble	r2, r1, #2
 800a4f0:	2201      	movgt	r2, #1
 800a4f2:	4413      	add	r3, r2
 800a4f4:	e7e0      	b.n	800a4b8 <_printf_float+0x1a0>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	055a      	lsls	r2, r3, #21
 800a4fa:	d407      	bmi.n	800a50c <_printf_float+0x1f4>
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	4642      	mov	r2, r8
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	d12c      	bne.n	800a564 <_printf_float+0x24c>
 800a50a:	e764      	b.n	800a3d6 <_printf_float+0xbe>
 800a50c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a510:	f240 80e0 	bls.w	800a6d4 <_printf_float+0x3bc>
 800a514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a518:	2200      	movs	r2, #0
 800a51a:	2300      	movs	r3, #0
 800a51c:	f7f6 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a520:	2800      	cmp	r0, #0
 800a522:	d034      	beq.n	800a58e <_printf_float+0x276>
 800a524:	4a37      	ldr	r2, [pc, #220]	; (800a604 <_printf_float+0x2ec>)
 800a526:	2301      	movs	r3, #1
 800a528:	4631      	mov	r1, r6
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b8      	blx	r7
 800a52e:	3001      	adds	r0, #1
 800a530:	f43f af51 	beq.w	800a3d6 <_printf_float+0xbe>
 800a534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a538:	429a      	cmp	r2, r3
 800a53a:	db02      	blt.n	800a542 <_printf_float+0x22a>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	07d8      	lsls	r0, r3, #31
 800a540:	d510      	bpl.n	800a564 <_printf_float+0x24c>
 800a542:	ee18 3a10 	vmov	r3, s16
 800a546:	4652      	mov	r2, sl
 800a548:	4631      	mov	r1, r6
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b8      	blx	r7
 800a54e:	3001      	adds	r0, #1
 800a550:	f43f af41 	beq.w	800a3d6 <_printf_float+0xbe>
 800a554:	f04f 0800 	mov.w	r8, #0
 800a558:	f104 091a 	add.w	r9, r4, #26
 800a55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55e:	3b01      	subs	r3, #1
 800a560:	4543      	cmp	r3, r8
 800a562:	dc09      	bgt.n	800a578 <_printf_float+0x260>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	079b      	lsls	r3, r3, #30
 800a568:	f100 8107 	bmi.w	800a77a <_printf_float+0x462>
 800a56c:	68e0      	ldr	r0, [r4, #12]
 800a56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a570:	4298      	cmp	r0, r3
 800a572:	bfb8      	it	lt
 800a574:	4618      	movlt	r0, r3
 800a576:	e730      	b.n	800a3da <_printf_float+0xc2>
 800a578:	2301      	movs	r3, #1
 800a57a:	464a      	mov	r2, r9
 800a57c:	4631      	mov	r1, r6
 800a57e:	4628      	mov	r0, r5
 800a580:	47b8      	blx	r7
 800a582:	3001      	adds	r0, #1
 800a584:	f43f af27 	beq.w	800a3d6 <_printf_float+0xbe>
 800a588:	f108 0801 	add.w	r8, r8, #1
 800a58c:	e7e6      	b.n	800a55c <_printf_float+0x244>
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc39      	bgt.n	800a608 <_printf_float+0x2f0>
 800a594:	4a1b      	ldr	r2, [pc, #108]	; (800a604 <_printf_float+0x2ec>)
 800a596:	2301      	movs	r3, #1
 800a598:	4631      	mov	r1, r6
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b8      	blx	r7
 800a59e:	3001      	adds	r0, #1
 800a5a0:	f43f af19 	beq.w	800a3d6 <_printf_float+0xbe>
 800a5a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	d102      	bne.n	800a5b2 <_printf_float+0x29a>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	07d9      	lsls	r1, r3, #31
 800a5b0:	d5d8      	bpl.n	800a564 <_printf_float+0x24c>
 800a5b2:	ee18 3a10 	vmov	r3, s16
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f43f af09 	beq.w	800a3d6 <_printf_float+0xbe>
 800a5c4:	f04f 0900 	mov.w	r9, #0
 800a5c8:	f104 0a1a 	add.w	sl, r4, #26
 800a5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ce:	425b      	negs	r3, r3
 800a5d0:	454b      	cmp	r3, r9
 800a5d2:	dc01      	bgt.n	800a5d8 <_printf_float+0x2c0>
 800a5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d6:	e792      	b.n	800a4fe <_printf_float+0x1e6>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4652      	mov	r2, sl
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f aef7 	beq.w	800a3d6 <_printf_float+0xbe>
 800a5e8:	f109 0901 	add.w	r9, r9, #1
 800a5ec:	e7ee      	b.n	800a5cc <_printf_float+0x2b4>
 800a5ee:	bf00      	nop
 800a5f0:	7fefffff 	.word	0x7fefffff
 800a5f4:	0800d225 	.word	0x0800d225
 800a5f8:	0800d229 	.word	0x0800d229
 800a5fc:	0800d22d 	.word	0x0800d22d
 800a600:	0800d231 	.word	0x0800d231
 800a604:	0800d235 	.word	0x0800d235
 800a608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a60c:	429a      	cmp	r2, r3
 800a60e:	bfa8      	it	ge
 800a610:	461a      	movge	r2, r3
 800a612:	2a00      	cmp	r2, #0
 800a614:	4691      	mov	r9, r2
 800a616:	dc37      	bgt.n	800a688 <_printf_float+0x370>
 800a618:	f04f 0b00 	mov.w	fp, #0
 800a61c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a620:	f104 021a 	add.w	r2, r4, #26
 800a624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	eba3 0309 	sub.w	r3, r3, r9
 800a62c:	455b      	cmp	r3, fp
 800a62e:	dc33      	bgt.n	800a698 <_printf_float+0x380>
 800a630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a634:	429a      	cmp	r2, r3
 800a636:	db3b      	blt.n	800a6b0 <_printf_float+0x398>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	07da      	lsls	r2, r3, #31
 800a63c:	d438      	bmi.n	800a6b0 <_printf_float+0x398>
 800a63e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a642:	eba2 0903 	sub.w	r9, r2, r3
 800a646:	9b05      	ldr	r3, [sp, #20]
 800a648:	1ad2      	subs	r2, r2, r3
 800a64a:	4591      	cmp	r9, r2
 800a64c:	bfa8      	it	ge
 800a64e:	4691      	movge	r9, r2
 800a650:	f1b9 0f00 	cmp.w	r9, #0
 800a654:	dc35      	bgt.n	800a6c2 <_printf_float+0x3aa>
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a65e:	f104 0a1a 	add.w	sl, r4, #26
 800a662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	eba3 0309 	sub.w	r3, r3, r9
 800a66c:	4543      	cmp	r3, r8
 800a66e:	f77f af79 	ble.w	800a564 <_printf_float+0x24c>
 800a672:	2301      	movs	r3, #1
 800a674:	4652      	mov	r2, sl
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f aeaa 	beq.w	800a3d6 <_printf_float+0xbe>
 800a682:	f108 0801 	add.w	r8, r8, #1
 800a686:	e7ec      	b.n	800a662 <_printf_float+0x34a>
 800a688:	4613      	mov	r3, r2
 800a68a:	4631      	mov	r1, r6
 800a68c:	4642      	mov	r2, r8
 800a68e:	4628      	mov	r0, r5
 800a690:	47b8      	blx	r7
 800a692:	3001      	adds	r0, #1
 800a694:	d1c0      	bne.n	800a618 <_printf_float+0x300>
 800a696:	e69e      	b.n	800a3d6 <_printf_float+0xbe>
 800a698:	2301      	movs	r3, #1
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	9205      	str	r2, [sp, #20]
 800a6a0:	47b8      	blx	r7
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	f43f ae97 	beq.w	800a3d6 <_printf_float+0xbe>
 800a6a8:	9a05      	ldr	r2, [sp, #20]
 800a6aa:	f10b 0b01 	add.w	fp, fp, #1
 800a6ae:	e7b9      	b.n	800a624 <_printf_float+0x30c>
 800a6b0:	ee18 3a10 	vmov	r3, s16
 800a6b4:	4652      	mov	r2, sl
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b8      	blx	r7
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d1be      	bne.n	800a63e <_printf_float+0x326>
 800a6c0:	e689      	b.n	800a3d6 <_printf_float+0xbe>
 800a6c2:	9a05      	ldr	r2, [sp, #20]
 800a6c4:	464b      	mov	r3, r9
 800a6c6:	4442      	add	r2, r8
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	47b8      	blx	r7
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d1c1      	bne.n	800a656 <_printf_float+0x33e>
 800a6d2:	e680      	b.n	800a3d6 <_printf_float+0xbe>
 800a6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d6:	2a01      	cmp	r2, #1
 800a6d8:	dc01      	bgt.n	800a6de <_printf_float+0x3c6>
 800a6da:	07db      	lsls	r3, r3, #31
 800a6dc:	d53a      	bpl.n	800a754 <_printf_float+0x43c>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	47b8      	blx	r7
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	f43f ae74 	beq.w	800a3d6 <_printf_float+0xbe>
 800a6ee:	ee18 3a10 	vmov	r3, s16
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f ae6b 	beq.w	800a3d6 <_printf_float+0xbe>
 800a700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a704:	2200      	movs	r2, #0
 800a706:	2300      	movs	r3, #0
 800a708:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a70c:	f7f6 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a710:	b9d8      	cbnz	r0, 800a74a <_printf_float+0x432>
 800a712:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a716:	f108 0201 	add.w	r2, r8, #1
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d10e      	bne.n	800a742 <_printf_float+0x42a>
 800a724:	e657      	b.n	800a3d6 <_printf_float+0xbe>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae50 	beq.w	800a3d6 <_printf_float+0xbe>
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4543      	cmp	r3, r8
 800a740:	dcf1      	bgt.n	800a726 <_printf_float+0x40e>
 800a742:	464b      	mov	r3, r9
 800a744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a748:	e6da      	b.n	800a500 <_printf_float+0x1e8>
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	f104 0a1a 	add.w	sl, r4, #26
 800a752:	e7f2      	b.n	800a73a <_printf_float+0x422>
 800a754:	2301      	movs	r3, #1
 800a756:	4642      	mov	r2, r8
 800a758:	e7df      	b.n	800a71a <_printf_float+0x402>
 800a75a:	2301      	movs	r3, #1
 800a75c:	464a      	mov	r2, r9
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f ae36 	beq.w	800a3d6 <_printf_float+0xbe>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	4543      	cmp	r3, r8
 800a776:	dcf0      	bgt.n	800a75a <_printf_float+0x442>
 800a778:	e6f8      	b.n	800a56c <_printf_float+0x254>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	f104 0919 	add.w	r9, r4, #25
 800a782:	e7f4      	b.n	800a76e <_printf_float+0x456>

0800a784 <_printf_common>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	4616      	mov	r6, r2
 800a78a:	4699      	mov	r9, r3
 800a78c:	688a      	ldr	r2, [r1, #8]
 800a78e:	690b      	ldr	r3, [r1, #16]
 800a790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a794:	4293      	cmp	r3, r2
 800a796:	bfb8      	it	lt
 800a798:	4613      	movlt	r3, r2
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_printf_common+0x26>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	6833      	ldrmi	r3, [r6, #0]
 800a7b2:	3302      	addmi	r3, #2
 800a7b4:	6033      	strmi	r3, [r6, #0]
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	f015 0506 	ands.w	r5, r5, #6
 800a7bc:	d106      	bne.n	800a7cc <_printf_common+0x48>
 800a7be:	f104 0a19 	add.w	sl, r4, #25
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	6832      	ldr	r2, [r6, #0]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dc26      	bgt.n	800a81a <_printf_common+0x96>
 800a7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d0:	1e13      	subs	r3, r2, #0
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2301      	movne	r3, #1
 800a7d8:	0692      	lsls	r2, r2, #26
 800a7da:	d42b      	bmi.n	800a834 <_printf_common+0xb0>
 800a7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d01e      	beq.n	800a828 <_printf_common+0xa4>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	6922      	ldr	r2, [r4, #16]
 800a7ee:	f003 0306 	and.w	r3, r3, #6
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	bf02      	ittt	eq
 800a7f6:	68e5      	ldreq	r5, [r4, #12]
 800a7f8:	6833      	ldreq	r3, [r6, #0]
 800a7fa:	1aed      	subeq	r5, r5, r3
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	2600      	movs	r6, #0
 800a810:	341a      	adds	r4, #26
 800a812:	42b5      	cmp	r5, r6
 800a814:	d11a      	bne.n	800a84c <_printf_common+0xc8>
 800a816:	2000      	movs	r0, #0
 800a818:	e008      	b.n	800a82c <_printf_common+0xa8>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4652      	mov	r2, sl
 800a81e:	4649      	mov	r1, r9
 800a820:	4638      	mov	r0, r7
 800a822:	47c0      	blx	r8
 800a824:	3001      	adds	r0, #1
 800a826:	d103      	bne.n	800a830 <_printf_common+0xac>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	3501      	adds	r5, #1
 800a832:	e7c6      	b.n	800a7c2 <_printf_common+0x3e>
 800a834:	18e1      	adds	r1, r4, r3
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	2030      	movs	r0, #48	; 0x30
 800a83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a83e:	4422      	add	r2, r4
 800a840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a848:	3302      	adds	r3, #2
 800a84a:	e7c7      	b.n	800a7dc <_printf_common+0x58>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4622      	mov	r2, r4
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d0e6      	beq.n	800a828 <_printf_common+0xa4>
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7d9      	b.n	800a812 <_printf_common+0x8e>
	...

0800a860 <_printf_i>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	7e0f      	ldrb	r7, [r1, #24]
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	2f78      	cmp	r7, #120	; 0x78
 800a86a:	4691      	mov	r9, r2
 800a86c:	4680      	mov	r8, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	469a      	mov	sl, r3
 800a872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a876:	d807      	bhi.n	800a888 <_printf_i+0x28>
 800a878:	2f62      	cmp	r7, #98	; 0x62
 800a87a:	d80a      	bhi.n	800a892 <_printf_i+0x32>
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	f000 80d4 	beq.w	800aa2a <_printf_i+0x1ca>
 800a882:	2f58      	cmp	r7, #88	; 0x58
 800a884:	f000 80c0 	beq.w	800aa08 <_printf_i+0x1a8>
 800a888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a890:	e03a      	b.n	800a908 <_printf_i+0xa8>
 800a892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a896:	2b15      	cmp	r3, #21
 800a898:	d8f6      	bhi.n	800a888 <_printf_i+0x28>
 800a89a:	a101      	add	r1, pc, #4	; (adr r1, 800a8a0 <_printf_i+0x40>)
 800a89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a889 	.word	0x0800a889
 800a8ac:	0800a889 	.word	0x0800a889
 800a8b0:	0800a889 	.word	0x0800a889
 800a8b4:	0800a889 	.word	0x0800a889
 800a8b8:	0800a90d 	.word	0x0800a90d
 800a8bc:	0800a889 	.word	0x0800a889
 800a8c0:	0800a889 	.word	0x0800a889
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800aa11 	.word	0x0800aa11
 800a8d0:	0800a939 	.word	0x0800a939
 800a8d4:	0800a9cb 	.word	0x0800a9cb
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa33 	.word	0x0800aa33
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a939 	.word	0x0800a939
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800a9d3 	.word	0x0800a9d3
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	1d1a      	adds	r2, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a908:	2301      	movs	r3, #1
 800a90a:	e09f      	b.n	800aa4c <_printf_i+0x1ec>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	0607      	lsls	r7, r0, #24
 800a912:	f103 0104 	add.w	r1, r3, #4
 800a916:	6029      	str	r1, [r5, #0]
 800a918:	d501      	bpl.n	800a91e <_printf_i+0xbe>
 800a91a:	681e      	ldr	r6, [r3, #0]
 800a91c:	e003      	b.n	800a926 <_printf_i+0xc6>
 800a91e:	0646      	lsls	r6, r0, #25
 800a920:	d5fb      	bpl.n	800a91a <_printf_i+0xba>
 800a922:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a926:	2e00      	cmp	r6, #0
 800a928:	da03      	bge.n	800a932 <_printf_i+0xd2>
 800a92a:	232d      	movs	r3, #45	; 0x2d
 800a92c:	4276      	negs	r6, r6
 800a92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a932:	485a      	ldr	r0, [pc, #360]	; (800aa9c <_printf_i+0x23c>)
 800a934:	230a      	movs	r3, #10
 800a936:	e012      	b.n	800a95e <_printf_i+0xfe>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	6820      	ldr	r0, [r4, #0]
 800a93c:	1d19      	adds	r1, r3, #4
 800a93e:	6029      	str	r1, [r5, #0]
 800a940:	0605      	lsls	r5, r0, #24
 800a942:	d501      	bpl.n	800a948 <_printf_i+0xe8>
 800a944:	681e      	ldr	r6, [r3, #0]
 800a946:	e002      	b.n	800a94e <_printf_i+0xee>
 800a948:	0641      	lsls	r1, r0, #25
 800a94a:	d5fb      	bpl.n	800a944 <_printf_i+0xe4>
 800a94c:	881e      	ldrh	r6, [r3, #0]
 800a94e:	4853      	ldr	r0, [pc, #332]	; (800aa9c <_printf_i+0x23c>)
 800a950:	2f6f      	cmp	r7, #111	; 0x6f
 800a952:	bf0c      	ite	eq
 800a954:	2308      	moveq	r3, #8
 800a956:	230a      	movne	r3, #10
 800a958:	2100      	movs	r1, #0
 800a95a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a95e:	6865      	ldr	r5, [r4, #4]
 800a960:	60a5      	str	r5, [r4, #8]
 800a962:	2d00      	cmp	r5, #0
 800a964:	bfa2      	ittt	ge
 800a966:	6821      	ldrge	r1, [r4, #0]
 800a968:	f021 0104 	bicge.w	r1, r1, #4
 800a96c:	6021      	strge	r1, [r4, #0]
 800a96e:	b90e      	cbnz	r6, 800a974 <_printf_i+0x114>
 800a970:	2d00      	cmp	r5, #0
 800a972:	d04b      	beq.n	800aa0c <_printf_i+0x1ac>
 800a974:	4615      	mov	r5, r2
 800a976:	fbb6 f1f3 	udiv	r1, r6, r3
 800a97a:	fb03 6711 	mls	r7, r3, r1, r6
 800a97e:	5dc7      	ldrb	r7, [r0, r7]
 800a980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a984:	4637      	mov	r7, r6
 800a986:	42bb      	cmp	r3, r7
 800a988:	460e      	mov	r6, r1
 800a98a:	d9f4      	bls.n	800a976 <_printf_i+0x116>
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d10b      	bne.n	800a9a8 <_printf_i+0x148>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	07de      	lsls	r6, r3, #31
 800a994:	d508      	bpl.n	800a9a8 <_printf_i+0x148>
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	6861      	ldr	r1, [r4, #4]
 800a99a:	4299      	cmp	r1, r3
 800a99c:	bfde      	ittt	le
 800a99e:	2330      	movle	r3, #48	; 0x30
 800a9a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9a8:	1b52      	subs	r2, r2, r5
 800a9aa:	6122      	str	r2, [r4, #16]
 800a9ac:	f8cd a000 	str.w	sl, [sp]
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	aa03      	add	r2, sp, #12
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	f7ff fee4 	bl	800a784 <_printf_common>
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d14a      	bne.n	800aa56 <_printf_i+0x1f6>
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	b004      	add	sp, #16
 800a9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	f043 0320 	orr.w	r3, r3, #32
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	4833      	ldr	r0, [pc, #204]	; (800aaa0 <_printf_i+0x240>)
 800a9d4:	2778      	movs	r7, #120	; 0x78
 800a9d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	6829      	ldr	r1, [r5, #0]
 800a9de:	061f      	lsls	r7, r3, #24
 800a9e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9e4:	d402      	bmi.n	800a9ec <_printf_i+0x18c>
 800a9e6:	065f      	lsls	r7, r3, #25
 800a9e8:	bf48      	it	mi
 800a9ea:	b2b6      	uxthmi	r6, r6
 800a9ec:	07df      	lsls	r7, r3, #31
 800a9ee:	bf48      	it	mi
 800a9f0:	f043 0320 	orrmi.w	r3, r3, #32
 800a9f4:	6029      	str	r1, [r5, #0]
 800a9f6:	bf48      	it	mi
 800a9f8:	6023      	strmi	r3, [r4, #0]
 800a9fa:	b91e      	cbnz	r6, 800aa04 <_printf_i+0x1a4>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	f023 0320 	bic.w	r3, r3, #32
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	2310      	movs	r3, #16
 800aa06:	e7a7      	b.n	800a958 <_printf_i+0xf8>
 800aa08:	4824      	ldr	r0, [pc, #144]	; (800aa9c <_printf_i+0x23c>)
 800aa0a:	e7e4      	b.n	800a9d6 <_printf_i+0x176>
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	e7bd      	b.n	800a98c <_printf_i+0x12c>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	6826      	ldr	r6, [r4, #0]
 800aa14:	6961      	ldr	r1, [r4, #20]
 800aa16:	1d18      	adds	r0, r3, #4
 800aa18:	6028      	str	r0, [r5, #0]
 800aa1a:	0635      	lsls	r5, r6, #24
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	d501      	bpl.n	800aa24 <_printf_i+0x1c4>
 800aa20:	6019      	str	r1, [r3, #0]
 800aa22:	e002      	b.n	800aa2a <_printf_i+0x1ca>
 800aa24:	0670      	lsls	r0, r6, #25
 800aa26:	d5fb      	bpl.n	800aa20 <_printf_i+0x1c0>
 800aa28:	8019      	strh	r1, [r3, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6123      	str	r3, [r4, #16]
 800aa2e:	4615      	mov	r5, r2
 800aa30:	e7bc      	b.n	800a9ac <_printf_i+0x14c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	1d1a      	adds	r2, r3, #4
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	681d      	ldr	r5, [r3, #0]
 800aa3a:	6862      	ldr	r2, [r4, #4]
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7f5 fbc6 	bl	80001d0 <memchr>
 800aa44:	b108      	cbz	r0, 800aa4a <_printf_i+0x1ea>
 800aa46:	1b40      	subs	r0, r0, r5
 800aa48:	6060      	str	r0, [r4, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa54:	e7aa      	b.n	800a9ac <_printf_i+0x14c>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	462a      	mov	r2, r5
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	47d0      	blx	sl
 800aa60:	3001      	adds	r0, #1
 800aa62:	d0ad      	beq.n	800a9c0 <_printf_i+0x160>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	d413      	bmi.n	800aa92 <_printf_i+0x232>
 800aa6a:	68e0      	ldr	r0, [r4, #12]
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	bfb8      	it	lt
 800aa72:	4618      	movlt	r0, r3
 800aa74:	e7a6      	b.n	800a9c4 <_printf_i+0x164>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	47d0      	blx	sl
 800aa80:	3001      	adds	r0, #1
 800aa82:	d09d      	beq.n	800a9c0 <_printf_i+0x160>
 800aa84:	3501      	adds	r5, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dcf2      	bgt.n	800aa76 <_printf_i+0x216>
 800aa90:	e7eb      	b.n	800aa6a <_printf_i+0x20a>
 800aa92:	2500      	movs	r5, #0
 800aa94:	f104 0619 	add.w	r6, r4, #25
 800aa98:	e7f5      	b.n	800aa86 <_printf_i+0x226>
 800aa9a:	bf00      	nop
 800aa9c:	0800d237 	.word	0x0800d237
 800aaa0:	0800d248 	.word	0x0800d248

0800aaa4 <std>:
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	e9c0 3300 	strd	r3, r3, [r0]
 800aaae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aab2:	6083      	str	r3, [r0, #8]
 800aab4:	8181      	strh	r1, [r0, #12]
 800aab6:	6643      	str	r3, [r0, #100]	; 0x64
 800aab8:	81c2      	strh	r2, [r0, #14]
 800aaba:	6183      	str	r3, [r0, #24]
 800aabc:	4619      	mov	r1, r3
 800aabe:	2208      	movs	r2, #8
 800aac0:	305c      	adds	r0, #92	; 0x5c
 800aac2:	f000 f914 	bl	800acee <memset>
 800aac6:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <std+0x58>)
 800aac8:	6263      	str	r3, [r4, #36]	; 0x24
 800aaca:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <std+0x5c>)
 800aacc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aace:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <std+0x60>)
 800aad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aad2:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <std+0x64>)
 800aad4:	6323      	str	r3, [r4, #48]	; 0x30
 800aad6:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <std+0x68>)
 800aad8:	6224      	str	r4, [r4, #32]
 800aada:	429c      	cmp	r4, r3
 800aadc:	d006      	beq.n	800aaec <std+0x48>
 800aade:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aae2:	4294      	cmp	r4, r2
 800aae4:	d002      	beq.n	800aaec <std+0x48>
 800aae6:	33d0      	adds	r3, #208	; 0xd0
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d105      	bne.n	800aaf8 <std+0x54>
 800aaec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf4:	f000 b9e6 	b.w	800aec4 <__retarget_lock_init_recursive>
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	bf00      	nop
 800aafc:	0800ac69 	.word	0x0800ac69
 800ab00:	0800ac8b 	.word	0x0800ac8b
 800ab04:	0800acc3 	.word	0x0800acc3
 800ab08:	0800ace7 	.word	0x0800ace7
 800ab0c:	200018ac 	.word	0x200018ac

0800ab10 <stdio_exit_handler>:
 800ab10:	4a02      	ldr	r2, [pc, #8]	; (800ab1c <stdio_exit_handler+0xc>)
 800ab12:	4903      	ldr	r1, [pc, #12]	; (800ab20 <stdio_exit_handler+0x10>)
 800ab14:	4803      	ldr	r0, [pc, #12]	; (800ab24 <stdio_exit_handler+0x14>)
 800ab16:	f000 b869 	b.w	800abec <_fwalk_sglue>
 800ab1a:	bf00      	nop
 800ab1c:	2000000c 	.word	0x2000000c
 800ab20:	0800c8b1 	.word	0x0800c8b1
 800ab24:	20000018 	.word	0x20000018

0800ab28 <cleanup_stdio>:
 800ab28:	6841      	ldr	r1, [r0, #4]
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <cleanup_stdio+0x34>)
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	d001      	beq.n	800ab38 <cleanup_stdio+0x10>
 800ab34:	f001 febc 	bl	800c8b0 <_fflush_r>
 800ab38:	68a1      	ldr	r1, [r4, #8]
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <cleanup_stdio+0x38>)
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	d002      	beq.n	800ab46 <cleanup_stdio+0x1e>
 800ab40:	4620      	mov	r0, r4
 800ab42:	f001 feb5 	bl	800c8b0 <_fflush_r>
 800ab46:	68e1      	ldr	r1, [r4, #12]
 800ab48:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <cleanup_stdio+0x3c>)
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	d004      	beq.n	800ab58 <cleanup_stdio+0x30>
 800ab4e:	4620      	mov	r0, r4
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f001 beac 	b.w	800c8b0 <_fflush_r>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	200018ac 	.word	0x200018ac
 800ab60:	20001914 	.word	0x20001914
 800ab64:	2000197c 	.word	0x2000197c

0800ab68 <global_stdio_init.part.0>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <global_stdio_init.part.0+0x30>)
 800ab6c:	4c0b      	ldr	r4, [pc, #44]	; (800ab9c <global_stdio_init.part.0+0x34>)
 800ab6e:	4a0c      	ldr	r2, [pc, #48]	; (800aba0 <global_stdio_init.part.0+0x38>)
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	4620      	mov	r0, r4
 800ab74:	2200      	movs	r2, #0
 800ab76:	2104      	movs	r1, #4
 800ab78:	f7ff ff94 	bl	800aaa4 <std>
 800ab7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab80:	2201      	movs	r2, #1
 800ab82:	2109      	movs	r1, #9
 800ab84:	f7ff ff8e 	bl	800aaa4 <std>
 800ab88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab92:	2112      	movs	r1, #18
 800ab94:	f7ff bf86 	b.w	800aaa4 <std>
 800ab98:	200019e4 	.word	0x200019e4
 800ab9c:	200018ac 	.word	0x200018ac
 800aba0:	0800ab11 	.word	0x0800ab11

0800aba4 <__sfp_lock_acquire>:
 800aba4:	4801      	ldr	r0, [pc, #4]	; (800abac <__sfp_lock_acquire+0x8>)
 800aba6:	f000 b98e 	b.w	800aec6 <__retarget_lock_acquire_recursive>
 800abaa:	bf00      	nop
 800abac:	200019ed 	.word	0x200019ed

0800abb0 <__sfp_lock_release>:
 800abb0:	4801      	ldr	r0, [pc, #4]	; (800abb8 <__sfp_lock_release+0x8>)
 800abb2:	f000 b989 	b.w	800aec8 <__retarget_lock_release_recursive>
 800abb6:	bf00      	nop
 800abb8:	200019ed 	.word	0x200019ed

0800abbc <__sinit>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4604      	mov	r4, r0
 800abc0:	f7ff fff0 	bl	800aba4 <__sfp_lock_acquire>
 800abc4:	6a23      	ldr	r3, [r4, #32]
 800abc6:	b11b      	cbz	r3, 800abd0 <__sinit+0x14>
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abcc:	f7ff bff0 	b.w	800abb0 <__sfp_lock_release>
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <__sinit+0x28>)
 800abd2:	6223      	str	r3, [r4, #32]
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <__sinit+0x2c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f5      	bne.n	800abc8 <__sinit+0xc>
 800abdc:	f7ff ffc4 	bl	800ab68 <global_stdio_init.part.0>
 800abe0:	e7f2      	b.n	800abc8 <__sinit+0xc>
 800abe2:	bf00      	nop
 800abe4:	0800ab29 	.word	0x0800ab29
 800abe8:	200019e4 	.word	0x200019e4

0800abec <_fwalk_sglue>:
 800abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf0:	4607      	mov	r7, r0
 800abf2:	4688      	mov	r8, r1
 800abf4:	4614      	mov	r4, r2
 800abf6:	2600      	movs	r6, #0
 800abf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ac00:	d505      	bpl.n	800ac0e <_fwalk_sglue+0x22>
 800ac02:	6824      	ldr	r4, [r4, #0]
 800ac04:	2c00      	cmp	r4, #0
 800ac06:	d1f7      	bne.n	800abf8 <_fwalk_sglue+0xc>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d907      	bls.n	800ac24 <_fwalk_sglue+0x38>
 800ac14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	d003      	beq.n	800ac24 <_fwalk_sglue+0x38>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4638      	mov	r0, r7
 800ac20:	47c0      	blx	r8
 800ac22:	4306      	orrs	r6, r0
 800ac24:	3568      	adds	r5, #104	; 0x68
 800ac26:	e7e9      	b.n	800abfc <_fwalk_sglue+0x10>

0800ac28 <siprintf>:
 800ac28:	b40e      	push	{r1, r2, r3}
 800ac2a:	b500      	push	{lr}
 800ac2c:	b09c      	sub	sp, #112	; 0x70
 800ac2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ac30:	9002      	str	r0, [sp, #8]
 800ac32:	9006      	str	r0, [sp, #24]
 800ac34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac38:	4809      	ldr	r0, [pc, #36]	; (800ac60 <siprintf+0x38>)
 800ac3a:	9107      	str	r1, [sp, #28]
 800ac3c:	9104      	str	r1, [sp, #16]
 800ac3e:	4909      	ldr	r1, [pc, #36]	; (800ac64 <siprintf+0x3c>)
 800ac40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac44:	9105      	str	r1, [sp, #20]
 800ac46:	6800      	ldr	r0, [r0, #0]
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	a902      	add	r1, sp, #8
 800ac4c:	f001 fcac 	bl	800c5a8 <_svfiprintf_r>
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	2200      	movs	r2, #0
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	b01c      	add	sp, #112	; 0x70
 800ac58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac5c:	b003      	add	sp, #12
 800ac5e:	4770      	bx	lr
 800ac60:	20000064 	.word	0x20000064
 800ac64:	ffff0208 	.word	0xffff0208

0800ac68 <__sread>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	f000 f8da 	bl	800ae28 <_read_r>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	bfab      	itete	ge
 800ac78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac7c:	181b      	addge	r3, r3, r0
 800ac7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac82:	bfac      	ite	ge
 800ac84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac86:	81a3      	strhlt	r3, [r4, #12]
 800ac88:	bd10      	pop	{r4, pc}

0800ac8a <__swrite>:
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	461f      	mov	r7, r3
 800ac90:	898b      	ldrh	r3, [r1, #12]
 800ac92:	05db      	lsls	r3, r3, #23
 800ac94:	4605      	mov	r5, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4616      	mov	r6, r2
 800ac9a:	d505      	bpl.n	800aca8 <__swrite+0x1e>
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	2302      	movs	r3, #2
 800aca2:	2200      	movs	r2, #0
 800aca4:	f000 f8ae 	bl	800ae04 <_lseek_r>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	4628      	mov	r0, r5
 800acba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	f000 b8c5 	b.w	800ae4c <_write_r>

0800acc2 <__sseek>:
 800acc2:	b510      	push	{r4, lr}
 800acc4:	460c      	mov	r4, r1
 800acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acca:	f000 f89b 	bl	800ae04 <_lseek_r>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	bf15      	itete	ne
 800acd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acde:	81a3      	strheq	r3, [r4, #12]
 800ace0:	bf18      	it	ne
 800ace2:	81a3      	strhne	r3, [r4, #12]
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__sclose>:
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 b87b 	b.w	800ade4 <_close_r>

0800acee <memset>:
 800acee:	4402      	add	r2, r0
 800acf0:	4603      	mov	r3, r0
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d100      	bne.n	800acf8 <memset+0xa>
 800acf6:	4770      	bx	lr
 800acf8:	f803 1b01 	strb.w	r1, [r3], #1
 800acfc:	e7f9      	b.n	800acf2 <memset+0x4>

0800acfe <strncmp>:
 800acfe:	b510      	push	{r4, lr}
 800ad00:	b16a      	cbz	r2, 800ad1e <strncmp+0x20>
 800ad02:	3901      	subs	r1, #1
 800ad04:	1884      	adds	r4, r0, r2
 800ad06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d103      	bne.n	800ad1a <strncmp+0x1c>
 800ad12:	42a0      	cmp	r0, r4
 800ad14:	d001      	beq.n	800ad1a <strncmp+0x1c>
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	d1f5      	bne.n	800ad06 <strncmp+0x8>
 800ad1a:	1ad0      	subs	r0, r2, r3
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	4610      	mov	r0, r2
 800ad20:	e7fc      	b.n	800ad1c <strncmp+0x1e>
	...

0800ad24 <strtok>:
 800ad24:	4b16      	ldr	r3, [pc, #88]	; (800ad80 <strtok+0x5c>)
 800ad26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad28:	681e      	ldr	r6, [r3, #0]
 800ad2a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	b9fc      	cbnz	r4, 800ad70 <strtok+0x4c>
 800ad30:	2050      	movs	r0, #80	; 0x50
 800ad32:	9101      	str	r1, [sp, #4]
 800ad34:	f000 ffae 	bl	800bc94 <malloc>
 800ad38:	9901      	ldr	r1, [sp, #4]
 800ad3a:	6470      	str	r0, [r6, #68]	; 0x44
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	b920      	cbnz	r0, 800ad4a <strtok+0x26>
 800ad40:	4b10      	ldr	r3, [pc, #64]	; (800ad84 <strtok+0x60>)
 800ad42:	4811      	ldr	r0, [pc, #68]	; (800ad88 <strtok+0x64>)
 800ad44:	215b      	movs	r1, #91	; 0x5b
 800ad46:	f000 f8c1 	bl	800aecc <__assert_func>
 800ad4a:	e9c0 4400 	strd	r4, r4, [r0]
 800ad4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad6a:	6184      	str	r4, [r0, #24]
 800ad6c:	7704      	strb	r4, [r0, #28]
 800ad6e:	6244      	str	r4, [r0, #36]	; 0x24
 800ad70:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ad72:	2301      	movs	r3, #1
 800ad74:	4628      	mov	r0, r5
 800ad76:	b002      	add	sp, #8
 800ad78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad7c:	f000 b806 	b.w	800ad8c <__strtok_r>
 800ad80:	20000064 	.word	0x20000064
 800ad84:	0800d259 	.word	0x0800d259
 800ad88:	0800d270 	.word	0x0800d270

0800ad8c <__strtok_r>:
 800ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad8e:	b908      	cbnz	r0, 800ad94 <__strtok_r+0x8>
 800ad90:	6810      	ldr	r0, [r2, #0]
 800ad92:	b188      	cbz	r0, 800adb8 <__strtok_r+0x2c>
 800ad94:	4604      	mov	r4, r0
 800ad96:	4620      	mov	r0, r4
 800ad98:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ada2:	b91e      	cbnz	r6, 800adac <__strtok_r+0x20>
 800ada4:	b965      	cbnz	r5, 800adc0 <__strtok_r+0x34>
 800ada6:	6015      	str	r5, [r2, #0]
 800ada8:	4628      	mov	r0, r5
 800adaa:	e005      	b.n	800adb8 <__strtok_r+0x2c>
 800adac:	42b5      	cmp	r5, r6
 800adae:	d1f6      	bne.n	800ad9e <__strtok_r+0x12>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1f0      	bne.n	800ad96 <__strtok_r+0xa>
 800adb4:	6014      	str	r4, [r2, #0]
 800adb6:	7003      	strb	r3, [r0, #0]
 800adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adba:	461c      	mov	r4, r3
 800adbc:	e00c      	b.n	800add8 <__strtok_r+0x4c>
 800adbe:	b915      	cbnz	r5, 800adc6 <__strtok_r+0x3a>
 800adc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adc4:	460e      	mov	r6, r1
 800adc6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800adca:	42ab      	cmp	r3, r5
 800adcc:	d1f7      	bne.n	800adbe <__strtok_r+0x32>
 800adce:	2b00      	cmp	r3, #0
 800add0:	d0f3      	beq.n	800adba <__strtok_r+0x2e>
 800add2:	2300      	movs	r3, #0
 800add4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800add8:	6014      	str	r4, [r2, #0]
 800adda:	e7ed      	b.n	800adb8 <__strtok_r+0x2c>

0800addc <_localeconv_r>:
 800addc:	4800      	ldr	r0, [pc, #0]	; (800ade0 <_localeconv_r+0x4>)
 800adde:	4770      	bx	lr
 800ade0:	20000158 	.word	0x20000158

0800ade4 <_close_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d06      	ldr	r5, [pc, #24]	; (800ae00 <_close_r+0x1c>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f8 f965 	bl	80030be <_close>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_close_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_close_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	200019e8 	.word	0x200019e8

0800ae04 <_lseek_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_lseek_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f8 f97a 	bl	800310c <_lseek>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_lseek_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_lseek_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	200019e8 	.word	0x200019e8

0800ae28 <_read_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_read_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f8 f908 	bl	800304c <_read>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_read_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_read_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	200019e8 	.word	0x200019e8

0800ae4c <_write_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	; (800ae6c <_write_r+0x20>)
 800ae50:	4604      	mov	r4, r0
 800ae52:	4608      	mov	r0, r1
 800ae54:	4611      	mov	r1, r2
 800ae56:	2200      	movs	r2, #0
 800ae58:	602a      	str	r2, [r5, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f7f8 f913 	bl	8003086 <_write>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_write_r+0x1e>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_write_r+0x1e>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200019e8 	.word	0x200019e8

0800ae70 <__errno>:
 800ae70:	4b01      	ldr	r3, [pc, #4]	; (800ae78 <__errno+0x8>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	20000064 	.word	0x20000064

0800ae7c <__libc_init_array>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4d0d      	ldr	r5, [pc, #52]	; (800aeb4 <__libc_init_array+0x38>)
 800ae80:	4c0d      	ldr	r4, [pc, #52]	; (800aeb8 <__libc_init_array+0x3c>)
 800ae82:	1b64      	subs	r4, r4, r5
 800ae84:	10a4      	asrs	r4, r4, #2
 800ae86:	2600      	movs	r6, #0
 800ae88:	42a6      	cmp	r6, r4
 800ae8a:	d109      	bne.n	800aea0 <__libc_init_array+0x24>
 800ae8c:	4d0b      	ldr	r5, [pc, #44]	; (800aebc <__libc_init_array+0x40>)
 800ae8e:	4c0c      	ldr	r4, [pc, #48]	; (800aec0 <__libc_init_array+0x44>)
 800ae90:	f002 f894 	bl	800cfbc <_init>
 800ae94:	1b64      	subs	r4, r4, r5
 800ae96:	10a4      	asrs	r4, r4, #2
 800ae98:	2600      	movs	r6, #0
 800ae9a:	42a6      	cmp	r6, r4
 800ae9c:	d105      	bne.n	800aeaa <__libc_init_array+0x2e>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea4:	4798      	blx	r3
 800aea6:	3601      	adds	r6, #1
 800aea8:	e7ee      	b.n	800ae88 <__libc_init_array+0xc>
 800aeaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeae:	4798      	blx	r3
 800aeb0:	3601      	adds	r6, #1
 800aeb2:	e7f2      	b.n	800ae9a <__libc_init_array+0x1e>
 800aeb4:	0800d4f8 	.word	0x0800d4f8
 800aeb8:	0800d4f8 	.word	0x0800d4f8
 800aebc:	0800d4f8 	.word	0x0800d4f8
 800aec0:	0800d4fc 	.word	0x0800d4fc

0800aec4 <__retarget_lock_init_recursive>:
 800aec4:	4770      	bx	lr

0800aec6 <__retarget_lock_acquire_recursive>:
 800aec6:	4770      	bx	lr

0800aec8 <__retarget_lock_release_recursive>:
 800aec8:	4770      	bx	lr
	...

0800aecc <__assert_func>:
 800aecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aece:	4614      	mov	r4, r2
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <__assert_func+0x2c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4605      	mov	r5, r0
 800aed8:	68d8      	ldr	r0, [r3, #12]
 800aeda:	b14c      	cbz	r4, 800aef0 <__assert_func+0x24>
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <__assert_func+0x30>)
 800aede:	9100      	str	r1, [sp, #0]
 800aee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aee4:	4906      	ldr	r1, [pc, #24]	; (800af00 <__assert_func+0x34>)
 800aee6:	462b      	mov	r3, r5
 800aee8:	f001 fd0a 	bl	800c900 <fiprintf>
 800aeec:	f001 fd52 	bl	800c994 <abort>
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <__assert_func+0x38>)
 800aef2:	461c      	mov	r4, r3
 800aef4:	e7f3      	b.n	800aede <__assert_func+0x12>
 800aef6:	bf00      	nop
 800aef8:	20000064 	.word	0x20000064
 800aefc:	0800d2ca 	.word	0x0800d2ca
 800af00:	0800d2d7 	.word	0x0800d2d7
 800af04:	0800d305 	.word	0x0800d305

0800af08 <quorem>:
 800af08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	6903      	ldr	r3, [r0, #16]
 800af0e:	690c      	ldr	r4, [r1, #16]
 800af10:	42a3      	cmp	r3, r4
 800af12:	4607      	mov	r7, r0
 800af14:	db7e      	blt.n	800b014 <quorem+0x10c>
 800af16:	3c01      	subs	r4, #1
 800af18:	f101 0814 	add.w	r8, r1, #20
 800af1c:	f100 0514 	add.w	r5, r0, #20
 800af20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af2e:	3301      	adds	r3, #1
 800af30:	429a      	cmp	r2, r3
 800af32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800af3e:	d331      	bcc.n	800afa4 <quorem+0x9c>
 800af40:	f04f 0e00 	mov.w	lr, #0
 800af44:	4640      	mov	r0, r8
 800af46:	46ac      	mov	ip, r5
 800af48:	46f2      	mov	sl, lr
 800af4a:	f850 2b04 	ldr.w	r2, [r0], #4
 800af4e:	b293      	uxth	r3, r2
 800af50:	fb06 e303 	mla	r3, r6, r3, lr
 800af54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af58:	0c1a      	lsrs	r2, r3, #16
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	ebaa 0303 	sub.w	r3, sl, r3
 800af60:	f8dc a000 	ldr.w	sl, [ip]
 800af64:	fa13 f38a 	uxtah	r3, r3, sl
 800af68:	fb06 220e 	mla	r2, r6, lr, r2
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af74:	b292      	uxth	r2, r2
 800af76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af7e:	f8bd 3000 	ldrh.w	r3, [sp]
 800af82:	4581      	cmp	r9, r0
 800af84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af88:	f84c 3b04 	str.w	r3, [ip], #4
 800af8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af90:	d2db      	bcs.n	800af4a <quorem+0x42>
 800af92:	f855 300b 	ldr.w	r3, [r5, fp]
 800af96:	b92b      	cbnz	r3, 800afa4 <quorem+0x9c>
 800af98:	9b01      	ldr	r3, [sp, #4]
 800af9a:	3b04      	subs	r3, #4
 800af9c:	429d      	cmp	r5, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	d32c      	bcc.n	800affc <quorem+0xf4>
 800afa2:	613c      	str	r4, [r7, #16]
 800afa4:	4638      	mov	r0, r7
 800afa6:	f001 f9a5 	bl	800c2f4 <__mcmp>
 800afaa:	2800      	cmp	r0, #0
 800afac:	db22      	blt.n	800aff4 <quorem+0xec>
 800afae:	3601      	adds	r6, #1
 800afb0:	4629      	mov	r1, r5
 800afb2:	2000      	movs	r0, #0
 800afb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800afb8:	f8d1 c000 	ldr.w	ip, [r1]
 800afbc:	b293      	uxth	r3, r2
 800afbe:	1ac3      	subs	r3, r0, r3
 800afc0:	0c12      	lsrs	r2, r2, #16
 800afc2:	fa13 f38c 	uxtah	r3, r3, ip
 800afc6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800afca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afce:	b29b      	uxth	r3, r3
 800afd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd4:	45c1      	cmp	r9, r8
 800afd6:	f841 3b04 	str.w	r3, [r1], #4
 800afda:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afde:	d2e9      	bcs.n	800afb4 <quorem+0xac>
 800afe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afe8:	b922      	cbnz	r2, 800aff4 <quorem+0xec>
 800afea:	3b04      	subs	r3, #4
 800afec:	429d      	cmp	r5, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	d30a      	bcc.n	800b008 <quorem+0x100>
 800aff2:	613c      	str	r4, [r7, #16]
 800aff4:	4630      	mov	r0, r6
 800aff6:	b003      	add	sp, #12
 800aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	3b04      	subs	r3, #4
 800b000:	2a00      	cmp	r2, #0
 800b002:	d1ce      	bne.n	800afa2 <quorem+0x9a>
 800b004:	3c01      	subs	r4, #1
 800b006:	e7c9      	b.n	800af9c <quorem+0x94>
 800b008:	6812      	ldr	r2, [r2, #0]
 800b00a:	3b04      	subs	r3, #4
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	d1f0      	bne.n	800aff2 <quorem+0xea>
 800b010:	3c01      	subs	r4, #1
 800b012:	e7eb      	b.n	800afec <quorem+0xe4>
 800b014:	2000      	movs	r0, #0
 800b016:	e7ee      	b.n	800aff6 <quorem+0xee>

0800b018 <_dtoa_r>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ed2d 8b04 	vpush	{d8-d9}
 800b020:	69c5      	ldr	r5, [r0, #28]
 800b022:	b093      	sub	sp, #76	; 0x4c
 800b024:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b028:	ec57 6b10 	vmov	r6, r7, d0
 800b02c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b030:	9107      	str	r1, [sp, #28]
 800b032:	4604      	mov	r4, r0
 800b034:	920a      	str	r2, [sp, #40]	; 0x28
 800b036:	930d      	str	r3, [sp, #52]	; 0x34
 800b038:	b975      	cbnz	r5, 800b058 <_dtoa_r+0x40>
 800b03a:	2010      	movs	r0, #16
 800b03c:	f000 fe2a 	bl	800bc94 <malloc>
 800b040:	4602      	mov	r2, r0
 800b042:	61e0      	str	r0, [r4, #28]
 800b044:	b920      	cbnz	r0, 800b050 <_dtoa_r+0x38>
 800b046:	4bae      	ldr	r3, [pc, #696]	; (800b300 <_dtoa_r+0x2e8>)
 800b048:	21ef      	movs	r1, #239	; 0xef
 800b04a:	48ae      	ldr	r0, [pc, #696]	; (800b304 <_dtoa_r+0x2ec>)
 800b04c:	f7ff ff3e 	bl	800aecc <__assert_func>
 800b050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b054:	6005      	str	r5, [r0, #0]
 800b056:	60c5      	str	r5, [r0, #12]
 800b058:	69e3      	ldr	r3, [r4, #28]
 800b05a:	6819      	ldr	r1, [r3, #0]
 800b05c:	b151      	cbz	r1, 800b074 <_dtoa_r+0x5c>
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	604a      	str	r2, [r1, #4]
 800b062:	2301      	movs	r3, #1
 800b064:	4093      	lsls	r3, r2
 800b066:	608b      	str	r3, [r1, #8]
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 ff07 	bl	800be7c <_Bfree>
 800b06e:	69e3      	ldr	r3, [r4, #28]
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	1e3b      	subs	r3, r7, #0
 800b076:	bfbb      	ittet	lt
 800b078:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b07c:	9303      	strlt	r3, [sp, #12]
 800b07e:	2300      	movge	r3, #0
 800b080:	2201      	movlt	r2, #1
 800b082:	bfac      	ite	ge
 800b084:	f8c8 3000 	strge.w	r3, [r8]
 800b088:	f8c8 2000 	strlt.w	r2, [r8]
 800b08c:	4b9e      	ldr	r3, [pc, #632]	; (800b308 <_dtoa_r+0x2f0>)
 800b08e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b092:	ea33 0308 	bics.w	r3, r3, r8
 800b096:	d11b      	bne.n	800b0d0 <_dtoa_r+0xb8>
 800b098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b09a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b0a4:	4333      	orrs	r3, r6
 800b0a6:	f000 8593 	beq.w	800bbd0 <_dtoa_r+0xbb8>
 800b0aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0ac:	b963      	cbnz	r3, 800b0c8 <_dtoa_r+0xb0>
 800b0ae:	4b97      	ldr	r3, [pc, #604]	; (800b30c <_dtoa_r+0x2f4>)
 800b0b0:	e027      	b.n	800b102 <_dtoa_r+0xea>
 800b0b2:	4b97      	ldr	r3, [pc, #604]	; (800b310 <_dtoa_r+0x2f8>)
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ba:	6013      	str	r3, [r2, #0]
 800b0bc:	9800      	ldr	r0, [sp, #0]
 800b0be:	b013      	add	sp, #76	; 0x4c
 800b0c0:	ecbd 8b04 	vpop	{d8-d9}
 800b0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c8:	4b90      	ldr	r3, [pc, #576]	; (800b30c <_dtoa_r+0x2f4>)
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	3303      	adds	r3, #3
 800b0ce:	e7f3      	b.n	800b0b8 <_dtoa_r+0xa0>
 800b0d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	ec51 0b17 	vmov	r0, r1, d7
 800b0da:	eeb0 8a47 	vmov.f32	s16, s14
 800b0de:	eef0 8a67 	vmov.f32	s17, s15
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f7f5 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e8:	4681      	mov	r9, r0
 800b0ea:	b160      	cbz	r0, 800b106 <_dtoa_r+0xee>
 800b0ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 8568 	beq.w	800bbca <_dtoa_r+0xbb2>
 800b0fa:	4b86      	ldr	r3, [pc, #536]	; (800b314 <_dtoa_r+0x2fc>)
 800b0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	3b01      	subs	r3, #1
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	e7da      	b.n	800b0bc <_dtoa_r+0xa4>
 800b106:	aa10      	add	r2, sp, #64	; 0x40
 800b108:	a911      	add	r1, sp, #68	; 0x44
 800b10a:	4620      	mov	r0, r4
 800b10c:	eeb0 0a48 	vmov.f32	s0, s16
 800b110:	eef0 0a68 	vmov.f32	s1, s17
 800b114:	f001 f994 	bl	800c440 <__d2b>
 800b118:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b11c:	4682      	mov	sl, r0
 800b11e:	2d00      	cmp	r5, #0
 800b120:	d07f      	beq.n	800b222 <_dtoa_r+0x20a>
 800b122:	ee18 3a90 	vmov	r3, s17
 800b126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b12a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b12e:	ec51 0b18 	vmov	r0, r1, d8
 800b132:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b13a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b13e:	4619      	mov	r1, r3
 800b140:	2200      	movs	r2, #0
 800b142:	4b75      	ldr	r3, [pc, #468]	; (800b318 <_dtoa_r+0x300>)
 800b144:	f7f5 f8a0 	bl	8000288 <__aeabi_dsub>
 800b148:	a367      	add	r3, pc, #412	; (adr r3, 800b2e8 <_dtoa_r+0x2d0>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f7f5 fa53 	bl	80005f8 <__aeabi_dmul>
 800b152:	a367      	add	r3, pc, #412	; (adr r3, 800b2f0 <_dtoa_r+0x2d8>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f7f5 f898 	bl	800028c <__adddf3>
 800b15c:	4606      	mov	r6, r0
 800b15e:	4628      	mov	r0, r5
 800b160:	460f      	mov	r7, r1
 800b162:	f7f5 f9df 	bl	8000524 <__aeabi_i2d>
 800b166:	a364      	add	r3, pc, #400	; (adr r3, 800b2f8 <_dtoa_r+0x2e0>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4630      	mov	r0, r6
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	f7f5 fcea 	bl	8000b58 <__aeabi_d2iz>
 800b184:	2200      	movs	r2, #0
 800b186:	4683      	mov	fp, r0
 800b188:	2300      	movs	r3, #0
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 fca5 	bl	8000adc <__aeabi_dcmplt>
 800b192:	b148      	cbz	r0, 800b1a8 <_dtoa_r+0x190>
 800b194:	4658      	mov	r0, fp
 800b196:	f7f5 f9c5 	bl	8000524 <__aeabi_i2d>
 800b19a:	4632      	mov	r2, r6
 800b19c:	463b      	mov	r3, r7
 800b19e:	f7f5 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a2:	b908      	cbnz	r0, 800b1a8 <_dtoa_r+0x190>
 800b1a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1a8:	f1bb 0f16 	cmp.w	fp, #22
 800b1ac:	d857      	bhi.n	800b25e <_dtoa_r+0x246>
 800b1ae:	4b5b      	ldr	r3, [pc, #364]	; (800b31c <_dtoa_r+0x304>)
 800b1b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	ec51 0b18 	vmov	r0, r1, d8
 800b1bc:	f7f5 fc8e 	bl	8000adc <__aeabi_dcmplt>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d04e      	beq.n	800b262 <_dtoa_r+0x24a>
 800b1c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ce:	1b5b      	subs	r3, r3, r5
 800b1d0:	1e5a      	subs	r2, r3, #1
 800b1d2:	bf45      	ittet	mi
 800b1d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1d8:	9305      	strmi	r3, [sp, #20]
 800b1da:	2300      	movpl	r3, #0
 800b1dc:	2300      	movmi	r3, #0
 800b1de:	9206      	str	r2, [sp, #24]
 800b1e0:	bf54      	ite	pl
 800b1e2:	9305      	strpl	r3, [sp, #20]
 800b1e4:	9306      	strmi	r3, [sp, #24]
 800b1e6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ea:	db3c      	blt.n	800b266 <_dtoa_r+0x24e>
 800b1ec:	9b06      	ldr	r3, [sp, #24]
 800b1ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b1f2:	445b      	add	r3, fp
 800b1f4:	9306      	str	r3, [sp, #24]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9308      	str	r3, [sp, #32]
 800b1fa:	9b07      	ldr	r3, [sp, #28]
 800b1fc:	2b09      	cmp	r3, #9
 800b1fe:	d868      	bhi.n	800b2d2 <_dtoa_r+0x2ba>
 800b200:	2b05      	cmp	r3, #5
 800b202:	bfc4      	itt	gt
 800b204:	3b04      	subgt	r3, #4
 800b206:	9307      	strgt	r3, [sp, #28]
 800b208:	9b07      	ldr	r3, [sp, #28]
 800b20a:	f1a3 0302 	sub.w	r3, r3, #2
 800b20e:	bfcc      	ite	gt
 800b210:	2500      	movgt	r5, #0
 800b212:	2501      	movle	r5, #1
 800b214:	2b03      	cmp	r3, #3
 800b216:	f200 8085 	bhi.w	800b324 <_dtoa_r+0x30c>
 800b21a:	e8df f003 	tbb	[pc, r3]
 800b21e:	3b2e      	.short	0x3b2e
 800b220:	5839      	.short	0x5839
 800b222:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b226:	441d      	add	r5, r3
 800b228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	bfc1      	itttt	gt
 800b230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b234:	fa08 f803 	lslgt.w	r8, r8, r3
 800b238:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b23c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b240:	bfd6      	itet	le
 800b242:	f1c3 0320 	rsble	r3, r3, #32
 800b246:	ea48 0003 	orrgt.w	r0, r8, r3
 800b24a:	fa06 f003 	lslle.w	r0, r6, r3
 800b24e:	f7f5 f959 	bl	8000504 <__aeabi_ui2d>
 800b252:	2201      	movs	r2, #1
 800b254:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b258:	3d01      	subs	r5, #1
 800b25a:	920e      	str	r2, [sp, #56]	; 0x38
 800b25c:	e76f      	b.n	800b13e <_dtoa_r+0x126>
 800b25e:	2301      	movs	r3, #1
 800b260:	e7b3      	b.n	800b1ca <_dtoa_r+0x1b2>
 800b262:	900c      	str	r0, [sp, #48]	; 0x30
 800b264:	e7b2      	b.n	800b1cc <_dtoa_r+0x1b4>
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	eba3 030b 	sub.w	r3, r3, fp
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	f1cb 0300 	rsb	r3, fp, #0
 800b272:	9308      	str	r3, [sp, #32]
 800b274:	2300      	movs	r3, #0
 800b276:	930b      	str	r3, [sp, #44]	; 0x2c
 800b278:	e7bf      	b.n	800b1fa <_dtoa_r+0x1e2>
 800b27a:	2300      	movs	r3, #0
 800b27c:	9309      	str	r3, [sp, #36]	; 0x24
 800b27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b280:	2b00      	cmp	r3, #0
 800b282:	dc52      	bgt.n	800b32a <_dtoa_r+0x312>
 800b284:	2301      	movs	r3, #1
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	461a      	mov	r2, r3
 800b28c:	920a      	str	r2, [sp, #40]	; 0x28
 800b28e:	e00b      	b.n	800b2a8 <_dtoa_r+0x290>
 800b290:	2301      	movs	r3, #1
 800b292:	e7f3      	b.n	800b27c <_dtoa_r+0x264>
 800b294:	2300      	movs	r3, #0
 800b296:	9309      	str	r3, [sp, #36]	; 0x24
 800b298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29a:	445b      	add	r3, fp
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	bfb8      	it	lt
 800b2a6:	2301      	movlt	r3, #1
 800b2a8:	69e0      	ldr	r0, [r4, #28]
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	2204      	movs	r2, #4
 800b2ae:	f102 0614 	add.w	r6, r2, #20
 800b2b2:	429e      	cmp	r6, r3
 800b2b4:	d93d      	bls.n	800b332 <_dtoa_r+0x31a>
 800b2b6:	6041      	str	r1, [r0, #4]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fd9f 	bl	800bdfc <_Balloc>
 800b2be:	9000      	str	r0, [sp, #0]
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d139      	bne.n	800b338 <_dtoa_r+0x320>
 800b2c4:	4b16      	ldr	r3, [pc, #88]	; (800b320 <_dtoa_r+0x308>)
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	f240 11af 	movw	r1, #431	; 0x1af
 800b2cc:	e6bd      	b.n	800b04a <_dtoa_r+0x32>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e7e1      	b.n	800b296 <_dtoa_r+0x27e>
 800b2d2:	2501      	movs	r5, #1
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9307      	str	r3, [sp, #28]
 800b2d8:	9509      	str	r5, [sp, #36]	; 0x24
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2312      	movs	r3, #18
 800b2e6:	e7d1      	b.n	800b28c <_dtoa_r+0x274>
 800b2e8:	636f4361 	.word	0x636f4361
 800b2ec:	3fd287a7 	.word	0x3fd287a7
 800b2f0:	8b60c8b3 	.word	0x8b60c8b3
 800b2f4:	3fc68a28 	.word	0x3fc68a28
 800b2f8:	509f79fb 	.word	0x509f79fb
 800b2fc:	3fd34413 	.word	0x3fd34413
 800b300:	0800d259 	.word	0x0800d259
 800b304:	0800d313 	.word	0x0800d313
 800b308:	7ff00000 	.word	0x7ff00000
 800b30c:	0800d30f 	.word	0x0800d30f
 800b310:	0800d306 	.word	0x0800d306
 800b314:	0800d236 	.word	0x0800d236
 800b318:	3ff80000 	.word	0x3ff80000
 800b31c:	0800d400 	.word	0x0800d400
 800b320:	0800d36b 	.word	0x0800d36b
 800b324:	2301      	movs	r3, #1
 800b326:	9309      	str	r3, [sp, #36]	; 0x24
 800b328:	e7d7      	b.n	800b2da <_dtoa_r+0x2c2>
 800b32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	e7ba      	b.n	800b2a8 <_dtoa_r+0x290>
 800b332:	3101      	adds	r1, #1
 800b334:	0052      	lsls	r2, r2, #1
 800b336:	e7ba      	b.n	800b2ae <_dtoa_r+0x296>
 800b338:	69e3      	ldr	r3, [r4, #28]
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	9b04      	ldr	r3, [sp, #16]
 800b340:	2b0e      	cmp	r3, #14
 800b342:	f200 80a8 	bhi.w	800b496 <_dtoa_r+0x47e>
 800b346:	2d00      	cmp	r5, #0
 800b348:	f000 80a5 	beq.w	800b496 <_dtoa_r+0x47e>
 800b34c:	f1bb 0f00 	cmp.w	fp, #0
 800b350:	dd38      	ble.n	800b3c4 <_dtoa_r+0x3ac>
 800b352:	4bc0      	ldr	r3, [pc, #768]	; (800b654 <_dtoa_r+0x63c>)
 800b354:	f00b 020f 	and.w	r2, fp, #15
 800b358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b360:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b364:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b368:	d019      	beq.n	800b39e <_dtoa_r+0x386>
 800b36a:	4bbb      	ldr	r3, [pc, #748]	; (800b658 <_dtoa_r+0x640>)
 800b36c:	ec51 0b18 	vmov	r0, r1, d8
 800b370:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b374:	f7f5 fa6a 	bl	800084c <__aeabi_ddiv>
 800b378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b37c:	f008 080f 	and.w	r8, r8, #15
 800b380:	2503      	movs	r5, #3
 800b382:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b658 <_dtoa_r+0x640>
 800b386:	f1b8 0f00 	cmp.w	r8, #0
 800b38a:	d10a      	bne.n	800b3a2 <_dtoa_r+0x38a>
 800b38c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	f7f5 fa5a 	bl	800084c <__aeabi_ddiv>
 800b398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39c:	e02b      	b.n	800b3f6 <_dtoa_r+0x3de>
 800b39e:	2502      	movs	r5, #2
 800b3a0:	e7ef      	b.n	800b382 <_dtoa_r+0x36a>
 800b3a2:	f018 0f01 	tst.w	r8, #1
 800b3a6:	d008      	beq.n	800b3ba <_dtoa_r+0x3a2>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3be:	f109 0908 	add.w	r9, r9, #8
 800b3c2:	e7e0      	b.n	800b386 <_dtoa_r+0x36e>
 800b3c4:	f000 809f 	beq.w	800b506 <_dtoa_r+0x4ee>
 800b3c8:	f1cb 0600 	rsb	r6, fp, #0
 800b3cc:	4ba1      	ldr	r3, [pc, #644]	; (800b654 <_dtoa_r+0x63c>)
 800b3ce:	4fa2      	ldr	r7, [pc, #648]	; (800b658 <_dtoa_r+0x640>)
 800b3d0:	f006 020f 	and.w	r2, r6, #15
 800b3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	ec51 0b18 	vmov	r0, r1, d8
 800b3e0:	f7f5 f90a 	bl	80005f8 <__aeabi_dmul>
 800b3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e8:	1136      	asrs	r6, r6, #4
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2502      	movs	r5, #2
 800b3ee:	2e00      	cmp	r6, #0
 800b3f0:	d17e      	bne.n	800b4f0 <_dtoa_r+0x4d8>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1d0      	bne.n	800b398 <_dtoa_r+0x380>
 800b3f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8084 	beq.w	800b50a <_dtoa_r+0x4f2>
 800b402:	4b96      	ldr	r3, [pc, #600]	; (800b65c <_dtoa_r+0x644>)
 800b404:	2200      	movs	r2, #0
 800b406:	4640      	mov	r0, r8
 800b408:	4649      	mov	r1, r9
 800b40a:	f7f5 fb67 	bl	8000adc <__aeabi_dcmplt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d07b      	beq.n	800b50a <_dtoa_r+0x4f2>
 800b412:	9b04      	ldr	r3, [sp, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d078      	beq.n	800b50a <_dtoa_r+0x4f2>
 800b418:	9b01      	ldr	r3, [sp, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dd39      	ble.n	800b492 <_dtoa_r+0x47a>
 800b41e:	4b90      	ldr	r3, [pc, #576]	; (800b660 <_dtoa_r+0x648>)
 800b420:	2200      	movs	r2, #0
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b42e:	9e01      	ldr	r6, [sp, #4]
 800b430:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b434:	3501      	adds	r5, #1
 800b436:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b43a:	4628      	mov	r0, r5
 800b43c:	f7f5 f872 	bl	8000524 <__aeabi_i2d>
 800b440:	4642      	mov	r2, r8
 800b442:	464b      	mov	r3, r9
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	4b86      	ldr	r3, [pc, #536]	; (800b664 <_dtoa_r+0x64c>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	f7f4 ff1e 	bl	800028c <__adddf3>
 800b450:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	d158      	bne.n	800b510 <_dtoa_r+0x4f8>
 800b45e:	4b82      	ldr	r3, [pc, #520]	; (800b668 <_dtoa_r+0x650>)
 800b460:	2200      	movs	r2, #0
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f7f4 ff0f 	bl	8000288 <__aeabi_dsub>
 800b46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46e:	4680      	mov	r8, r0
 800b470:	4689      	mov	r9, r1
 800b472:	f7f5 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 800b476:	2800      	cmp	r0, #0
 800b478:	f040 8296 	bne.w	800b9a8 <_dtoa_r+0x990>
 800b47c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b480:	4640      	mov	r0, r8
 800b482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b486:	4649      	mov	r1, r9
 800b488:	f7f5 fb28 	bl	8000adc <__aeabi_dcmplt>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f040 8289 	bne.w	800b9a4 <_dtoa_r+0x98c>
 800b492:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f2c0 814e 	blt.w	800b73a <_dtoa_r+0x722>
 800b49e:	f1bb 0f0e 	cmp.w	fp, #14
 800b4a2:	f300 814a 	bgt.w	800b73a <_dtoa_r+0x722>
 800b4a6:	4b6b      	ldr	r3, [pc, #428]	; (800b654 <_dtoa_r+0x63c>)
 800b4a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f280 80dc 	bge.w	800b670 <_dtoa_r+0x658>
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f300 80d8 	bgt.w	800b670 <_dtoa_r+0x658>
 800b4c0:	f040 826f 	bne.w	800b9a2 <_dtoa_r+0x98a>
 800b4c4:	4b68      	ldr	r3, [pc, #416]	; (800b668 <_dtoa_r+0x650>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	f7f5 f894 	bl	80005f8 <__aeabi_dmul>
 800b4d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d4:	f7f5 fb16 	bl	8000b04 <__aeabi_dcmpge>
 800b4d8:	9e04      	ldr	r6, [sp, #16]
 800b4da:	4637      	mov	r7, r6
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f040 8245 	bne.w	800b96c <_dtoa_r+0x954>
 800b4e2:	9d00      	ldr	r5, [sp, #0]
 800b4e4:	2331      	movs	r3, #49	; 0x31
 800b4e6:	f805 3b01 	strb.w	r3, [r5], #1
 800b4ea:	f10b 0b01 	add.w	fp, fp, #1
 800b4ee:	e241      	b.n	800b974 <_dtoa_r+0x95c>
 800b4f0:	07f2      	lsls	r2, r6, #31
 800b4f2:	d505      	bpl.n	800b500 <_dtoa_r+0x4e8>
 800b4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f8:	f7f5 f87e 	bl	80005f8 <__aeabi_dmul>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	2301      	movs	r3, #1
 800b500:	1076      	asrs	r6, r6, #1
 800b502:	3708      	adds	r7, #8
 800b504:	e773      	b.n	800b3ee <_dtoa_r+0x3d6>
 800b506:	2502      	movs	r5, #2
 800b508:	e775      	b.n	800b3f6 <_dtoa_r+0x3de>
 800b50a:	9e04      	ldr	r6, [sp, #16]
 800b50c:	465f      	mov	r7, fp
 800b50e:	e792      	b.n	800b436 <_dtoa_r+0x41e>
 800b510:	9900      	ldr	r1, [sp, #0]
 800b512:	4b50      	ldr	r3, [pc, #320]	; (800b654 <_dtoa_r+0x63c>)
 800b514:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b518:	4431      	add	r1, r6
 800b51a:	9102      	str	r1, [sp, #8]
 800b51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b51e:	eeb0 9a47 	vmov.f32	s18, s14
 800b522:	eef0 9a67 	vmov.f32	s19, s15
 800b526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b52a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b52e:	2900      	cmp	r1, #0
 800b530:	d044      	beq.n	800b5bc <_dtoa_r+0x5a4>
 800b532:	494e      	ldr	r1, [pc, #312]	; (800b66c <_dtoa_r+0x654>)
 800b534:	2000      	movs	r0, #0
 800b536:	f7f5 f989 	bl	800084c <__aeabi_ddiv>
 800b53a:	ec53 2b19 	vmov	r2, r3, d9
 800b53e:	f7f4 fea3 	bl	8000288 <__aeabi_dsub>
 800b542:	9d00      	ldr	r5, [sp, #0]
 800b544:	ec41 0b19 	vmov	d9, r0, r1
 800b548:	4649      	mov	r1, r9
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7f5 fb04 	bl	8000b58 <__aeabi_d2iz>
 800b550:	4606      	mov	r6, r0
 800b552:	f7f4 ffe7 	bl	8000524 <__aeabi_i2d>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f4 fe93 	bl	8000288 <__aeabi_dsub>
 800b562:	3630      	adds	r6, #48	; 0x30
 800b564:	f805 6b01 	strb.w	r6, [r5], #1
 800b568:	ec53 2b19 	vmov	r2, r3, d9
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	f7f5 fab4 	bl	8000adc <__aeabi_dcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	d164      	bne.n	800b642 <_dtoa_r+0x62a>
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	4937      	ldr	r1, [pc, #220]	; (800b65c <_dtoa_r+0x644>)
 800b57e:	2000      	movs	r0, #0
 800b580:	f7f4 fe82 	bl	8000288 <__aeabi_dsub>
 800b584:	ec53 2b19 	vmov	r2, r3, d9
 800b588:	f7f5 faa8 	bl	8000adc <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f040 80b6 	bne.w	800b6fe <_dtoa_r+0x6e6>
 800b592:	9b02      	ldr	r3, [sp, #8]
 800b594:	429d      	cmp	r5, r3
 800b596:	f43f af7c 	beq.w	800b492 <_dtoa_r+0x47a>
 800b59a:	4b31      	ldr	r3, [pc, #196]	; (800b660 <_dtoa_r+0x648>)
 800b59c:	ec51 0b19 	vmov	r0, r1, d9
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f7f5 f829 	bl	80005f8 <__aeabi_dmul>
 800b5a6:	4b2e      	ldr	r3, [pc, #184]	; (800b660 <_dtoa_r+0x648>)
 800b5a8:	ec41 0b19 	vmov	d9, r0, r1
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	e7c5      	b.n	800b548 <_dtoa_r+0x530>
 800b5bc:	ec51 0b17 	vmov	r0, r1, d7
 800b5c0:	f7f5 f81a 	bl	80005f8 <__aeabi_dmul>
 800b5c4:	9b02      	ldr	r3, [sp, #8]
 800b5c6:	9d00      	ldr	r5, [sp, #0]
 800b5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ca:	ec41 0b19 	vmov	d9, r0, r1
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	f7f5 fac1 	bl	8000b58 <__aeabi_d2iz>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	f7f4 ffa4 	bl	8000524 <__aeabi_i2d>
 800b5dc:	3630      	adds	r6, #48	; 0x30
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	f7f4 fe4f 	bl	8000288 <__aeabi_dsub>
 800b5ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b5ee:	9b02      	ldr	r3, [sp, #8]
 800b5f0:	429d      	cmp	r5, r3
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	d124      	bne.n	800b646 <_dtoa_r+0x62e>
 800b5fc:	4b1b      	ldr	r3, [pc, #108]	; (800b66c <_dtoa_r+0x654>)
 800b5fe:	ec51 0b19 	vmov	r0, r1, d9
 800b602:	f7f4 fe43 	bl	800028c <__adddf3>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f5 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 800b612:	2800      	cmp	r0, #0
 800b614:	d173      	bne.n	800b6fe <_dtoa_r+0x6e6>
 800b616:	ec53 2b19 	vmov	r2, r3, d9
 800b61a:	4914      	ldr	r1, [pc, #80]	; (800b66c <_dtoa_r+0x654>)
 800b61c:	2000      	movs	r0, #0
 800b61e:	f7f4 fe33 	bl	8000288 <__aeabi_dsub>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4640      	mov	r0, r8
 800b628:	4649      	mov	r1, r9
 800b62a:	f7f5 fa57 	bl	8000adc <__aeabi_dcmplt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f43f af2f 	beq.w	800b492 <_dtoa_r+0x47a>
 800b634:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b636:	1e6b      	subs	r3, r5, #1
 800b638:	930f      	str	r3, [sp, #60]	; 0x3c
 800b63a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b63e:	2b30      	cmp	r3, #48	; 0x30
 800b640:	d0f8      	beq.n	800b634 <_dtoa_r+0x61c>
 800b642:	46bb      	mov	fp, r7
 800b644:	e04a      	b.n	800b6dc <_dtoa_r+0x6c4>
 800b646:	4b06      	ldr	r3, [pc, #24]	; (800b660 <_dtoa_r+0x648>)
 800b648:	f7f4 ffd6 	bl	80005f8 <__aeabi_dmul>
 800b64c:	4680      	mov	r8, r0
 800b64e:	4689      	mov	r9, r1
 800b650:	e7bd      	b.n	800b5ce <_dtoa_r+0x5b6>
 800b652:	bf00      	nop
 800b654:	0800d400 	.word	0x0800d400
 800b658:	0800d3d8 	.word	0x0800d3d8
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	40240000 	.word	0x40240000
 800b664:	401c0000 	.word	0x401c0000
 800b668:	40140000 	.word	0x40140000
 800b66c:	3fe00000 	.word	0x3fe00000
 800b670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b674:	9d00      	ldr	r5, [sp, #0]
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f5 f8e5 	bl	800084c <__aeabi_ddiv>
 800b682:	f7f5 fa69 	bl	8000b58 <__aeabi_d2iz>
 800b686:	9001      	str	r0, [sp, #4]
 800b688:	f7f4 ff4c 	bl	8000524 <__aeabi_i2d>
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	f7f4 ffb2 	bl	80005f8 <__aeabi_dmul>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4630      	mov	r0, r6
 800b69a:	4639      	mov	r1, r7
 800b69c:	f7f4 fdf4 	bl	8000288 <__aeabi_dsub>
 800b6a0:	9e01      	ldr	r6, [sp, #4]
 800b6a2:	9f04      	ldr	r7, [sp, #16]
 800b6a4:	3630      	adds	r6, #48	; 0x30
 800b6a6:	f805 6b01 	strb.w	r6, [r5], #1
 800b6aa:	9e00      	ldr	r6, [sp, #0]
 800b6ac:	1bae      	subs	r6, r5, r6
 800b6ae:	42b7      	cmp	r7, r6
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	d134      	bne.n	800b720 <_dtoa_r+0x708>
 800b6b6:	f7f4 fde9 	bl	800028c <__adddf3>
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	464b      	mov	r3, r9
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460f      	mov	r7, r1
 800b6c2:	f7f5 fa29 	bl	8000b18 <__aeabi_dcmpgt>
 800b6c6:	b9c8      	cbnz	r0, 800b6fc <_dtoa_r+0x6e4>
 800b6c8:	4642      	mov	r2, r8
 800b6ca:	464b      	mov	r3, r9
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f5 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d4:	b110      	cbz	r0, 800b6dc <_dtoa_r+0x6c4>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	07db      	lsls	r3, r3, #31
 800b6da:	d40f      	bmi.n	800b6fc <_dtoa_r+0x6e4>
 800b6dc:	4651      	mov	r1, sl
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fbcc 	bl	800be7c <_Bfree>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6e8:	702b      	strb	r3, [r5, #0]
 800b6ea:	f10b 0301 	add.w	r3, fp, #1
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f43f ace2 	beq.w	800b0bc <_dtoa_r+0xa4>
 800b6f8:	601d      	str	r5, [r3, #0]
 800b6fa:	e4df      	b.n	800b0bc <_dtoa_r+0xa4>
 800b6fc:	465f      	mov	r7, fp
 800b6fe:	462b      	mov	r3, r5
 800b700:	461d      	mov	r5, r3
 800b702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b706:	2a39      	cmp	r2, #57	; 0x39
 800b708:	d106      	bne.n	800b718 <_dtoa_r+0x700>
 800b70a:	9a00      	ldr	r2, [sp, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d1f7      	bne.n	800b700 <_dtoa_r+0x6e8>
 800b710:	9900      	ldr	r1, [sp, #0]
 800b712:	2230      	movs	r2, #48	; 0x30
 800b714:	3701      	adds	r7, #1
 800b716:	700a      	strb	r2, [r1, #0]
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	3201      	adds	r2, #1
 800b71c:	701a      	strb	r2, [r3, #0]
 800b71e:	e790      	b.n	800b642 <_dtoa_r+0x62a>
 800b720:	4ba3      	ldr	r3, [pc, #652]	; (800b9b0 <_dtoa_r+0x998>)
 800b722:	2200      	movs	r2, #0
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	2200      	movs	r2, #0
 800b72a:	2300      	movs	r3, #0
 800b72c:	4606      	mov	r6, r0
 800b72e:	460f      	mov	r7, r1
 800b730:	f7f5 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 800b734:	2800      	cmp	r0, #0
 800b736:	d09e      	beq.n	800b676 <_dtoa_r+0x65e>
 800b738:	e7d0      	b.n	800b6dc <_dtoa_r+0x6c4>
 800b73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	f000 80ca 	beq.w	800b8d6 <_dtoa_r+0x8be>
 800b742:	9a07      	ldr	r2, [sp, #28]
 800b744:	2a01      	cmp	r2, #1
 800b746:	f300 80ad 	bgt.w	800b8a4 <_dtoa_r+0x88c>
 800b74a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	f000 80a5 	beq.w	800b89c <_dtoa_r+0x884>
 800b752:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b756:	9e08      	ldr	r6, [sp, #32]
 800b758:	9d05      	ldr	r5, [sp, #20]
 800b75a:	9a05      	ldr	r2, [sp, #20]
 800b75c:	441a      	add	r2, r3
 800b75e:	9205      	str	r2, [sp, #20]
 800b760:	9a06      	ldr	r2, [sp, #24]
 800b762:	2101      	movs	r1, #1
 800b764:	441a      	add	r2, r3
 800b766:	4620      	mov	r0, r4
 800b768:	9206      	str	r2, [sp, #24]
 800b76a:	f000 fc3d 	bl	800bfe8 <__i2b>
 800b76e:	4607      	mov	r7, r0
 800b770:	b165      	cbz	r5, 800b78c <_dtoa_r+0x774>
 800b772:	9b06      	ldr	r3, [sp, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	dd09      	ble.n	800b78c <_dtoa_r+0x774>
 800b778:	42ab      	cmp	r3, r5
 800b77a:	9a05      	ldr	r2, [sp, #20]
 800b77c:	bfa8      	it	ge
 800b77e:	462b      	movge	r3, r5
 800b780:	1ad2      	subs	r2, r2, r3
 800b782:	9205      	str	r2, [sp, #20]
 800b784:	9a06      	ldr	r2, [sp, #24]
 800b786:	1aed      	subs	r5, r5, r3
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	9306      	str	r3, [sp, #24]
 800b78c:	9b08      	ldr	r3, [sp, #32]
 800b78e:	b1f3      	cbz	r3, 800b7ce <_dtoa_r+0x7b6>
 800b790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 80a3 	beq.w	800b8de <_dtoa_r+0x8c6>
 800b798:	2e00      	cmp	r6, #0
 800b79a:	dd10      	ble.n	800b7be <_dtoa_r+0x7a6>
 800b79c:	4639      	mov	r1, r7
 800b79e:	4632      	mov	r2, r6
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 fce1 	bl	800c168 <__pow5mult>
 800b7a6:	4652      	mov	r2, sl
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4607      	mov	r7, r0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fc31 	bl	800c014 <__multiply>
 800b7b2:	4651      	mov	r1, sl
 800b7b4:	4680      	mov	r8, r0
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 fb60 	bl	800be7c <_Bfree>
 800b7bc:	46c2      	mov	sl, r8
 800b7be:	9b08      	ldr	r3, [sp, #32]
 800b7c0:	1b9a      	subs	r2, r3, r6
 800b7c2:	d004      	beq.n	800b7ce <_dtoa_r+0x7b6>
 800b7c4:	4651      	mov	r1, sl
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fcce 	bl	800c168 <__pow5mult>
 800b7cc:	4682      	mov	sl, r0
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fc09 	bl	800bfe8 <__i2b>
 800b7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	4606      	mov	r6, r0
 800b7dc:	f340 8081 	ble.w	800b8e2 <_dtoa_r+0x8ca>
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 fcbf 	bl	800c168 <__pow5mult>
 800b7ea:	9b07      	ldr	r3, [sp, #28]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	dd7a      	ble.n	800b8e8 <_dtoa_r+0x8d0>
 800b7f2:	f04f 0800 	mov.w	r8, #0
 800b7f6:	6933      	ldr	r3, [r6, #16]
 800b7f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7fc:	6918      	ldr	r0, [r3, #16]
 800b7fe:	f000 fba5 	bl	800bf4c <__hi0bits>
 800b802:	f1c0 0020 	rsb	r0, r0, #32
 800b806:	9b06      	ldr	r3, [sp, #24]
 800b808:	4418      	add	r0, r3
 800b80a:	f010 001f 	ands.w	r0, r0, #31
 800b80e:	f000 8094 	beq.w	800b93a <_dtoa_r+0x922>
 800b812:	f1c0 0320 	rsb	r3, r0, #32
 800b816:	2b04      	cmp	r3, #4
 800b818:	f340 8085 	ble.w	800b926 <_dtoa_r+0x90e>
 800b81c:	9b05      	ldr	r3, [sp, #20]
 800b81e:	f1c0 001c 	rsb	r0, r0, #28
 800b822:	4403      	add	r3, r0
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	9b06      	ldr	r3, [sp, #24]
 800b828:	4403      	add	r3, r0
 800b82a:	4405      	add	r5, r0
 800b82c:	9306      	str	r3, [sp, #24]
 800b82e:	9b05      	ldr	r3, [sp, #20]
 800b830:	2b00      	cmp	r3, #0
 800b832:	dd05      	ble.n	800b840 <_dtoa_r+0x828>
 800b834:	4651      	mov	r1, sl
 800b836:	461a      	mov	r2, r3
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fcef 	bl	800c21c <__lshift>
 800b83e:	4682      	mov	sl, r0
 800b840:	9b06      	ldr	r3, [sp, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	dd05      	ble.n	800b852 <_dtoa_r+0x83a>
 800b846:	4631      	mov	r1, r6
 800b848:	461a      	mov	r2, r3
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 fce6 	bl	800c21c <__lshift>
 800b850:	4606      	mov	r6, r0
 800b852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b854:	2b00      	cmp	r3, #0
 800b856:	d072      	beq.n	800b93e <_dtoa_r+0x926>
 800b858:	4631      	mov	r1, r6
 800b85a:	4650      	mov	r0, sl
 800b85c:	f000 fd4a 	bl	800c2f4 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	da6c      	bge.n	800b93e <_dtoa_r+0x926>
 800b864:	2300      	movs	r3, #0
 800b866:	4651      	mov	r1, sl
 800b868:	220a      	movs	r2, #10
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fb28 	bl	800bec0 <__multadd>
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b876:	4682      	mov	sl, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 81b0 	beq.w	800bbde <_dtoa_r+0xbc6>
 800b87e:	2300      	movs	r3, #0
 800b880:	4639      	mov	r1, r7
 800b882:	220a      	movs	r2, #10
 800b884:	4620      	mov	r0, r4
 800b886:	f000 fb1b 	bl	800bec0 <__multadd>
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	4607      	mov	r7, r0
 800b890:	f300 8096 	bgt.w	800b9c0 <_dtoa_r+0x9a8>
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	2b02      	cmp	r3, #2
 800b898:	dc59      	bgt.n	800b94e <_dtoa_r+0x936>
 800b89a:	e091      	b.n	800b9c0 <_dtoa_r+0x9a8>
 800b89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8a2:	e758      	b.n	800b756 <_dtoa_r+0x73e>
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	1e5e      	subs	r6, r3, #1
 800b8a8:	9b08      	ldr	r3, [sp, #32]
 800b8aa:	42b3      	cmp	r3, r6
 800b8ac:	bfbf      	itttt	lt
 800b8ae:	9b08      	ldrlt	r3, [sp, #32]
 800b8b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b8b2:	9608      	strlt	r6, [sp, #32]
 800b8b4:	1af3      	sublt	r3, r6, r3
 800b8b6:	bfb4      	ite	lt
 800b8b8:	18d2      	addlt	r2, r2, r3
 800b8ba:	1b9e      	subge	r6, r3, r6
 800b8bc:	9b04      	ldr	r3, [sp, #16]
 800b8be:	bfbc      	itt	lt
 800b8c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b8c2:	2600      	movlt	r6, #0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfb7      	itett	lt
 800b8c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b8cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b8d0:	1a9d      	sublt	r5, r3, r2
 800b8d2:	2300      	movlt	r3, #0
 800b8d4:	e741      	b.n	800b75a <_dtoa_r+0x742>
 800b8d6:	9e08      	ldr	r6, [sp, #32]
 800b8d8:	9d05      	ldr	r5, [sp, #20]
 800b8da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8dc:	e748      	b.n	800b770 <_dtoa_r+0x758>
 800b8de:	9a08      	ldr	r2, [sp, #32]
 800b8e0:	e770      	b.n	800b7c4 <_dtoa_r+0x7ac>
 800b8e2:	9b07      	ldr	r3, [sp, #28]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	dc19      	bgt.n	800b91c <_dtoa_r+0x904>
 800b8e8:	9b02      	ldr	r3, [sp, #8]
 800b8ea:	b9bb      	cbnz	r3, 800b91c <_dtoa_r+0x904>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f2:	b99b      	cbnz	r3, 800b91c <_dtoa_r+0x904>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8fa:	0d1b      	lsrs	r3, r3, #20
 800b8fc:	051b      	lsls	r3, r3, #20
 800b8fe:	b183      	cbz	r3, 800b922 <_dtoa_r+0x90a>
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	3301      	adds	r3, #1
 800b904:	9305      	str	r3, [sp, #20]
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	3301      	adds	r3, #1
 800b90a:	9306      	str	r3, [sp, #24]
 800b90c:	f04f 0801 	mov.w	r8, #1
 800b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	f47f af6f 	bne.w	800b7f6 <_dtoa_r+0x7de>
 800b918:	2001      	movs	r0, #1
 800b91a:	e774      	b.n	800b806 <_dtoa_r+0x7ee>
 800b91c:	f04f 0800 	mov.w	r8, #0
 800b920:	e7f6      	b.n	800b910 <_dtoa_r+0x8f8>
 800b922:	4698      	mov	r8, r3
 800b924:	e7f4      	b.n	800b910 <_dtoa_r+0x8f8>
 800b926:	d082      	beq.n	800b82e <_dtoa_r+0x816>
 800b928:	9a05      	ldr	r2, [sp, #20]
 800b92a:	331c      	adds	r3, #28
 800b92c:	441a      	add	r2, r3
 800b92e:	9205      	str	r2, [sp, #20]
 800b930:	9a06      	ldr	r2, [sp, #24]
 800b932:	441a      	add	r2, r3
 800b934:	441d      	add	r5, r3
 800b936:	9206      	str	r2, [sp, #24]
 800b938:	e779      	b.n	800b82e <_dtoa_r+0x816>
 800b93a:	4603      	mov	r3, r0
 800b93c:	e7f4      	b.n	800b928 <_dtoa_r+0x910>
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dc37      	bgt.n	800b9b4 <_dtoa_r+0x99c>
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	2b02      	cmp	r3, #2
 800b948:	dd34      	ble.n	800b9b4 <_dtoa_r+0x99c>
 800b94a:	9b04      	ldr	r3, [sp, #16]
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	b963      	cbnz	r3, 800b96c <_dtoa_r+0x954>
 800b952:	4631      	mov	r1, r6
 800b954:	2205      	movs	r2, #5
 800b956:	4620      	mov	r0, r4
 800b958:	f000 fab2 	bl	800bec0 <__multadd>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4606      	mov	r6, r0
 800b960:	4650      	mov	r0, sl
 800b962:	f000 fcc7 	bl	800c2f4 <__mcmp>
 800b966:	2800      	cmp	r0, #0
 800b968:	f73f adbb 	bgt.w	800b4e2 <_dtoa_r+0x4ca>
 800b96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b96e:	9d00      	ldr	r5, [sp, #0]
 800b970:	ea6f 0b03 	mvn.w	fp, r3
 800b974:	f04f 0800 	mov.w	r8, #0
 800b978:	4631      	mov	r1, r6
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 fa7e 	bl	800be7c <_Bfree>
 800b980:	2f00      	cmp	r7, #0
 800b982:	f43f aeab 	beq.w	800b6dc <_dtoa_r+0x6c4>
 800b986:	f1b8 0f00 	cmp.w	r8, #0
 800b98a:	d005      	beq.n	800b998 <_dtoa_r+0x980>
 800b98c:	45b8      	cmp	r8, r7
 800b98e:	d003      	beq.n	800b998 <_dtoa_r+0x980>
 800b990:	4641      	mov	r1, r8
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fa72 	bl	800be7c <_Bfree>
 800b998:	4639      	mov	r1, r7
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fa6e 	bl	800be7c <_Bfree>
 800b9a0:	e69c      	b.n	800b6dc <_dtoa_r+0x6c4>
 800b9a2:	2600      	movs	r6, #0
 800b9a4:	4637      	mov	r7, r6
 800b9a6:	e7e1      	b.n	800b96c <_dtoa_r+0x954>
 800b9a8:	46bb      	mov	fp, r7
 800b9aa:	4637      	mov	r7, r6
 800b9ac:	e599      	b.n	800b4e2 <_dtoa_r+0x4ca>
 800b9ae:	bf00      	nop
 800b9b0:	40240000 	.word	0x40240000
 800b9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 80c8 	beq.w	800bb4c <_dtoa_r+0xb34>
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	dd05      	ble.n	800b9d0 <_dtoa_r+0x9b8>
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 fc27 	bl	800c21c <__lshift>
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	d05b      	beq.n	800ba8e <_dtoa_r+0xa76>
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fa0f 	bl	800bdfc <_Balloc>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b928      	cbnz	r0, 800b9ee <_dtoa_r+0x9d6>
 800b9e2:	4b83      	ldr	r3, [pc, #524]	; (800bbf0 <_dtoa_r+0xbd8>)
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b9ea:	f7ff bb2e 	b.w	800b04a <_dtoa_r+0x32>
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	3202      	adds	r2, #2
 800b9f2:	0092      	lsls	r2, r2, #2
 800b9f4:	f107 010c 	add.w	r1, r7, #12
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	f000 ffbd 	bl	800c978 <memcpy>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4629      	mov	r1, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fc0a 	bl	800c21c <__lshift>
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	9304      	str	r3, [sp, #16]
 800ba0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba12:	4413      	add	r3, r2
 800ba14:	9308      	str	r3, [sp, #32]
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	46b8      	mov	r8, r7
 800ba1e:	9306      	str	r3, [sp, #24]
 800ba20:	4607      	mov	r7, r0
 800ba22:	9b04      	ldr	r3, [sp, #16]
 800ba24:	4631      	mov	r1, r6
 800ba26:	3b01      	subs	r3, #1
 800ba28:	4650      	mov	r0, sl
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	f7ff fa6c 	bl	800af08 <quorem>
 800ba30:	4641      	mov	r1, r8
 800ba32:	9002      	str	r0, [sp, #8]
 800ba34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba38:	4650      	mov	r0, sl
 800ba3a:	f000 fc5b 	bl	800c2f4 <__mcmp>
 800ba3e:	463a      	mov	r2, r7
 800ba40:	9005      	str	r0, [sp, #20]
 800ba42:	4631      	mov	r1, r6
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fc71 	bl	800c32c <__mdiff>
 800ba4a:	68c2      	ldr	r2, [r0, #12]
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	bb02      	cbnz	r2, 800ba92 <_dtoa_r+0xa7a>
 800ba50:	4601      	mov	r1, r0
 800ba52:	4650      	mov	r0, sl
 800ba54:	f000 fc4e 	bl	800c2f4 <__mcmp>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba60:	f000 fa0c 	bl	800be7c <_Bfree>
 800ba64:	9b07      	ldr	r3, [sp, #28]
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	9d04      	ldr	r5, [sp, #16]
 800ba6a:	ea43 0102 	orr.w	r1, r3, r2
 800ba6e:	9b06      	ldr	r3, [sp, #24]
 800ba70:	4319      	orrs	r1, r3
 800ba72:	d110      	bne.n	800ba96 <_dtoa_r+0xa7e>
 800ba74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba78:	d029      	beq.n	800bace <_dtoa_r+0xab6>
 800ba7a:	9b05      	ldr	r3, [sp, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dd02      	ble.n	800ba86 <_dtoa_r+0xa6e>
 800ba80:	9b02      	ldr	r3, [sp, #8]
 800ba82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	f883 9000 	strb.w	r9, [r3]
 800ba8c:	e774      	b.n	800b978 <_dtoa_r+0x960>
 800ba8e:	4638      	mov	r0, r7
 800ba90:	e7ba      	b.n	800ba08 <_dtoa_r+0x9f0>
 800ba92:	2201      	movs	r2, #1
 800ba94:	e7e1      	b.n	800ba5a <_dtoa_r+0xa42>
 800ba96:	9b05      	ldr	r3, [sp, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	db04      	blt.n	800baa6 <_dtoa_r+0xa8e>
 800ba9c:	9907      	ldr	r1, [sp, #28]
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	9906      	ldr	r1, [sp, #24]
 800baa2:	430b      	orrs	r3, r1
 800baa4:	d120      	bne.n	800bae8 <_dtoa_r+0xad0>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	dded      	ble.n	800ba86 <_dtoa_r+0xa6e>
 800baaa:	4651      	mov	r1, sl
 800baac:	2201      	movs	r2, #1
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 fbb4 	bl	800c21c <__lshift>
 800bab4:	4631      	mov	r1, r6
 800bab6:	4682      	mov	sl, r0
 800bab8:	f000 fc1c 	bl	800c2f4 <__mcmp>
 800babc:	2800      	cmp	r0, #0
 800babe:	dc03      	bgt.n	800bac8 <_dtoa_r+0xab0>
 800bac0:	d1e1      	bne.n	800ba86 <_dtoa_r+0xa6e>
 800bac2:	f019 0f01 	tst.w	r9, #1
 800bac6:	d0de      	beq.n	800ba86 <_dtoa_r+0xa6e>
 800bac8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bacc:	d1d8      	bne.n	800ba80 <_dtoa_r+0xa68>
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	2339      	movs	r3, #57	; 0x39
 800bad2:	7013      	strb	r3, [r2, #0]
 800bad4:	462b      	mov	r3, r5
 800bad6:	461d      	mov	r5, r3
 800bad8:	3b01      	subs	r3, #1
 800bada:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bade:	2a39      	cmp	r2, #57	; 0x39
 800bae0:	d06c      	beq.n	800bbbc <_dtoa_r+0xba4>
 800bae2:	3201      	adds	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e747      	b.n	800b978 <_dtoa_r+0x960>
 800bae8:	2a00      	cmp	r2, #0
 800baea:	dd07      	ble.n	800bafc <_dtoa_r+0xae4>
 800baec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800baf0:	d0ed      	beq.n	800bace <_dtoa_r+0xab6>
 800baf2:	9a01      	ldr	r2, [sp, #4]
 800baf4:	f109 0301 	add.w	r3, r9, #1
 800baf8:	7013      	strb	r3, [r2, #0]
 800bafa:	e73d      	b.n	800b978 <_dtoa_r+0x960>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	9a08      	ldr	r2, [sp, #32]
 800bb00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d043      	beq.n	800bb90 <_dtoa_r+0xb78>
 800bb08:	4651      	mov	r1, sl
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	220a      	movs	r2, #10
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 f9d6 	bl	800bec0 <__multadd>
 800bb14:	45b8      	cmp	r8, r7
 800bb16:	4682      	mov	sl, r0
 800bb18:	f04f 0300 	mov.w	r3, #0
 800bb1c:	f04f 020a 	mov.w	r2, #10
 800bb20:	4641      	mov	r1, r8
 800bb22:	4620      	mov	r0, r4
 800bb24:	d107      	bne.n	800bb36 <_dtoa_r+0xb1e>
 800bb26:	f000 f9cb 	bl	800bec0 <__multadd>
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	3301      	adds	r3, #1
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	e775      	b.n	800ba22 <_dtoa_r+0xa0a>
 800bb36:	f000 f9c3 	bl	800bec0 <__multadd>
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	4680      	mov	r8, r0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	220a      	movs	r2, #10
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f9bc 	bl	800bec0 <__multadd>
 800bb48:	4607      	mov	r7, r0
 800bb4a:	e7f0      	b.n	800bb2e <_dtoa_r+0xb16>
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	9d00      	ldr	r5, [sp, #0]
 800bb52:	4631      	mov	r1, r6
 800bb54:	4650      	mov	r0, sl
 800bb56:	f7ff f9d7 	bl	800af08 <quorem>
 800bb5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb5e:	9b00      	ldr	r3, [sp, #0]
 800bb60:	f805 9b01 	strb.w	r9, [r5], #1
 800bb64:	1aea      	subs	r2, r5, r3
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	dd07      	ble.n	800bb7c <_dtoa_r+0xb64>
 800bb6c:	4651      	mov	r1, sl
 800bb6e:	2300      	movs	r3, #0
 800bb70:	220a      	movs	r2, #10
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 f9a4 	bl	800bec0 <__multadd>
 800bb78:	4682      	mov	sl, r0
 800bb7a:	e7ea      	b.n	800bb52 <_dtoa_r+0xb3a>
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfc8      	it	gt
 800bb82:	461d      	movgt	r5, r3
 800bb84:	9b00      	ldr	r3, [sp, #0]
 800bb86:	bfd8      	it	le
 800bb88:	2501      	movle	r5, #1
 800bb8a:	441d      	add	r5, r3
 800bb8c:	f04f 0800 	mov.w	r8, #0
 800bb90:	4651      	mov	r1, sl
 800bb92:	2201      	movs	r2, #1
 800bb94:	4620      	mov	r0, r4
 800bb96:	f000 fb41 	bl	800c21c <__lshift>
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	f000 fba9 	bl	800c2f4 <__mcmp>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	dc96      	bgt.n	800bad4 <_dtoa_r+0xabc>
 800bba6:	d102      	bne.n	800bbae <_dtoa_r+0xb96>
 800bba8:	f019 0f01 	tst.w	r9, #1
 800bbac:	d192      	bne.n	800bad4 <_dtoa_r+0xabc>
 800bbae:	462b      	mov	r3, r5
 800bbb0:	461d      	mov	r5, r3
 800bbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbb6:	2a30      	cmp	r2, #48	; 0x30
 800bbb8:	d0fa      	beq.n	800bbb0 <_dtoa_r+0xb98>
 800bbba:	e6dd      	b.n	800b978 <_dtoa_r+0x960>
 800bbbc:	9a00      	ldr	r2, [sp, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d189      	bne.n	800bad6 <_dtoa_r+0xabe>
 800bbc2:	f10b 0b01 	add.w	fp, fp, #1
 800bbc6:	2331      	movs	r3, #49	; 0x31
 800bbc8:	e796      	b.n	800baf8 <_dtoa_r+0xae0>
 800bbca:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <_dtoa_r+0xbdc>)
 800bbcc:	f7ff ba99 	b.w	800b102 <_dtoa_r+0xea>
 800bbd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f47f aa6d 	bne.w	800b0b2 <_dtoa_r+0x9a>
 800bbd8:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <_dtoa_r+0xbe0>)
 800bbda:	f7ff ba92 	b.w	800b102 <_dtoa_r+0xea>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dcb5      	bgt.n	800bb50 <_dtoa_r+0xb38>
 800bbe4:	9b07      	ldr	r3, [sp, #28]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	f73f aeb1 	bgt.w	800b94e <_dtoa_r+0x936>
 800bbec:	e7b0      	b.n	800bb50 <_dtoa_r+0xb38>
 800bbee:	bf00      	nop
 800bbf0:	0800d36b 	.word	0x0800d36b
 800bbf4:	0800d235 	.word	0x0800d235
 800bbf8:	0800d306 	.word	0x0800d306

0800bbfc <_free_r>:
 800bbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	d044      	beq.n	800bc8c <_free_r+0x90>
 800bc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc06:	9001      	str	r0, [sp, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc0e:	bfb8      	it	lt
 800bc10:	18e4      	addlt	r4, r4, r3
 800bc12:	f000 f8e7 	bl	800bde4 <__malloc_lock>
 800bc16:	4a1e      	ldr	r2, [pc, #120]	; (800bc90 <_free_r+0x94>)
 800bc18:	9801      	ldr	r0, [sp, #4]
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	b933      	cbnz	r3, 800bc2c <_free_r+0x30>
 800bc1e:	6063      	str	r3, [r4, #4]
 800bc20:	6014      	str	r4, [r2, #0]
 800bc22:	b003      	add	sp, #12
 800bc24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc28:	f000 b8e2 	b.w	800bdf0 <__malloc_unlock>
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d908      	bls.n	800bc42 <_free_r+0x46>
 800bc30:	6825      	ldr	r5, [r4, #0]
 800bc32:	1961      	adds	r1, r4, r5
 800bc34:	428b      	cmp	r3, r1
 800bc36:	bf01      	itttt	eq
 800bc38:	6819      	ldreq	r1, [r3, #0]
 800bc3a:	685b      	ldreq	r3, [r3, #4]
 800bc3c:	1949      	addeq	r1, r1, r5
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	e7ed      	b.n	800bc1e <_free_r+0x22>
 800bc42:	461a      	mov	r2, r3
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	b10b      	cbz	r3, 800bc4c <_free_r+0x50>
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d9fa      	bls.n	800bc42 <_free_r+0x46>
 800bc4c:	6811      	ldr	r1, [r2, #0]
 800bc4e:	1855      	adds	r5, r2, r1
 800bc50:	42a5      	cmp	r5, r4
 800bc52:	d10b      	bne.n	800bc6c <_free_r+0x70>
 800bc54:	6824      	ldr	r4, [r4, #0]
 800bc56:	4421      	add	r1, r4
 800bc58:	1854      	adds	r4, r2, r1
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	6011      	str	r1, [r2, #0]
 800bc5e:	d1e0      	bne.n	800bc22 <_free_r+0x26>
 800bc60:	681c      	ldr	r4, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	6053      	str	r3, [r2, #4]
 800bc66:	440c      	add	r4, r1
 800bc68:	6014      	str	r4, [r2, #0]
 800bc6a:	e7da      	b.n	800bc22 <_free_r+0x26>
 800bc6c:	d902      	bls.n	800bc74 <_free_r+0x78>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	e7d6      	b.n	800bc22 <_free_r+0x26>
 800bc74:	6825      	ldr	r5, [r4, #0]
 800bc76:	1961      	adds	r1, r4, r5
 800bc78:	428b      	cmp	r3, r1
 800bc7a:	bf04      	itt	eq
 800bc7c:	6819      	ldreq	r1, [r3, #0]
 800bc7e:	685b      	ldreq	r3, [r3, #4]
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	bf04      	itt	eq
 800bc84:	1949      	addeq	r1, r1, r5
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	6054      	str	r4, [r2, #4]
 800bc8a:	e7ca      	b.n	800bc22 <_free_r+0x26>
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bd30      	pop	{r4, r5, pc}
 800bc90:	200019f0 	.word	0x200019f0

0800bc94 <malloc>:
 800bc94:	4b02      	ldr	r3, [pc, #8]	; (800bca0 <malloc+0xc>)
 800bc96:	4601      	mov	r1, r0
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	f000 b823 	b.w	800bce4 <_malloc_r>
 800bc9e:	bf00      	nop
 800bca0:	20000064 	.word	0x20000064

0800bca4 <sbrk_aligned>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4e0e      	ldr	r6, [pc, #56]	; (800bce0 <sbrk_aligned+0x3c>)
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6831      	ldr	r1, [r6, #0]
 800bcac:	4605      	mov	r5, r0
 800bcae:	b911      	cbnz	r1, 800bcb6 <sbrk_aligned+0x12>
 800bcb0:	f000 fe52 	bl	800c958 <_sbrk_r>
 800bcb4:	6030      	str	r0, [r6, #0]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 fe4d 	bl	800c958 <_sbrk_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d00a      	beq.n	800bcd8 <sbrk_aligned+0x34>
 800bcc2:	1cc4      	adds	r4, r0, #3
 800bcc4:	f024 0403 	bic.w	r4, r4, #3
 800bcc8:	42a0      	cmp	r0, r4
 800bcca:	d007      	beq.n	800bcdc <sbrk_aligned+0x38>
 800bccc:	1a21      	subs	r1, r4, r0
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 fe42 	bl	800c958 <_sbrk_r>
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d101      	bne.n	800bcdc <sbrk_aligned+0x38>
 800bcd8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcdc:	4620      	mov	r0, r4
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	200019f4 	.word	0x200019f4

0800bce4 <_malloc_r>:
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce8:	1ccd      	adds	r5, r1, #3
 800bcea:	f025 0503 	bic.w	r5, r5, #3
 800bcee:	3508      	adds	r5, #8
 800bcf0:	2d0c      	cmp	r5, #12
 800bcf2:	bf38      	it	cc
 800bcf4:	250c      	movcc	r5, #12
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	db01      	blt.n	800bd00 <_malloc_r+0x1c>
 800bcfc:	42a9      	cmp	r1, r5
 800bcfe:	d905      	bls.n	800bd0c <_malloc_r+0x28>
 800bd00:	230c      	movs	r3, #12
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	2600      	movs	r6, #0
 800bd06:	4630      	mov	r0, r6
 800bd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bde0 <_malloc_r+0xfc>
 800bd10:	f000 f868 	bl	800bde4 <__malloc_lock>
 800bd14:	f8d8 3000 	ldr.w	r3, [r8]
 800bd18:	461c      	mov	r4, r3
 800bd1a:	bb5c      	cbnz	r4, 800bd74 <_malloc_r+0x90>
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f7ff ffc0 	bl	800bca4 <sbrk_aligned>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	4604      	mov	r4, r0
 800bd28:	d155      	bne.n	800bdd6 <_malloc_r+0xf2>
 800bd2a:	f8d8 4000 	ldr.w	r4, [r8]
 800bd2e:	4626      	mov	r6, r4
 800bd30:	2e00      	cmp	r6, #0
 800bd32:	d145      	bne.n	800bdc0 <_malloc_r+0xdc>
 800bd34:	2c00      	cmp	r4, #0
 800bd36:	d048      	beq.n	800bdca <_malloc_r+0xe6>
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	eb04 0903 	add.w	r9, r4, r3
 800bd42:	f000 fe09 	bl	800c958 <_sbrk_r>
 800bd46:	4581      	cmp	r9, r0
 800bd48:	d13f      	bne.n	800bdca <_malloc_r+0xe6>
 800bd4a:	6821      	ldr	r1, [r4, #0]
 800bd4c:	1a6d      	subs	r5, r5, r1
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7ff ffa7 	bl	800bca4 <sbrk_aligned>
 800bd56:	3001      	adds	r0, #1
 800bd58:	d037      	beq.n	800bdca <_malloc_r+0xe6>
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	442b      	add	r3, r5
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	f8d8 3000 	ldr.w	r3, [r8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d038      	beq.n	800bdda <_malloc_r+0xf6>
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	42a2      	cmp	r2, r4
 800bd6c:	d12b      	bne.n	800bdc6 <_malloc_r+0xe2>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	605a      	str	r2, [r3, #4]
 800bd72:	e00f      	b.n	800bd94 <_malloc_r+0xb0>
 800bd74:	6822      	ldr	r2, [r4, #0]
 800bd76:	1b52      	subs	r2, r2, r5
 800bd78:	d41f      	bmi.n	800bdba <_malloc_r+0xd6>
 800bd7a:	2a0b      	cmp	r2, #11
 800bd7c:	d917      	bls.n	800bdae <_malloc_r+0xca>
 800bd7e:	1961      	adds	r1, r4, r5
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	6025      	str	r5, [r4, #0]
 800bd84:	bf18      	it	ne
 800bd86:	6059      	strne	r1, [r3, #4]
 800bd88:	6863      	ldr	r3, [r4, #4]
 800bd8a:	bf08      	it	eq
 800bd8c:	f8c8 1000 	streq.w	r1, [r8]
 800bd90:	5162      	str	r2, [r4, r5]
 800bd92:	604b      	str	r3, [r1, #4]
 800bd94:	4638      	mov	r0, r7
 800bd96:	f104 060b 	add.w	r6, r4, #11
 800bd9a:	f000 f829 	bl	800bdf0 <__malloc_unlock>
 800bd9e:	f026 0607 	bic.w	r6, r6, #7
 800bda2:	1d23      	adds	r3, r4, #4
 800bda4:	1af2      	subs	r2, r6, r3
 800bda6:	d0ae      	beq.n	800bd06 <_malloc_r+0x22>
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	50a3      	str	r3, [r4, r2]
 800bdac:	e7ab      	b.n	800bd06 <_malloc_r+0x22>
 800bdae:	42a3      	cmp	r3, r4
 800bdb0:	6862      	ldr	r2, [r4, #4]
 800bdb2:	d1dd      	bne.n	800bd70 <_malloc_r+0x8c>
 800bdb4:	f8c8 2000 	str.w	r2, [r8]
 800bdb8:	e7ec      	b.n	800bd94 <_malloc_r+0xb0>
 800bdba:	4623      	mov	r3, r4
 800bdbc:	6864      	ldr	r4, [r4, #4]
 800bdbe:	e7ac      	b.n	800bd1a <_malloc_r+0x36>
 800bdc0:	4634      	mov	r4, r6
 800bdc2:	6876      	ldr	r6, [r6, #4]
 800bdc4:	e7b4      	b.n	800bd30 <_malloc_r+0x4c>
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	e7cc      	b.n	800bd64 <_malloc_r+0x80>
 800bdca:	230c      	movs	r3, #12
 800bdcc:	603b      	str	r3, [r7, #0]
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f000 f80e 	bl	800bdf0 <__malloc_unlock>
 800bdd4:	e797      	b.n	800bd06 <_malloc_r+0x22>
 800bdd6:	6025      	str	r5, [r4, #0]
 800bdd8:	e7dc      	b.n	800bd94 <_malloc_r+0xb0>
 800bdda:	605b      	str	r3, [r3, #4]
 800bddc:	deff      	udf	#255	; 0xff
 800bdde:	bf00      	nop
 800bde0:	200019f0 	.word	0x200019f0

0800bde4 <__malloc_lock>:
 800bde4:	4801      	ldr	r0, [pc, #4]	; (800bdec <__malloc_lock+0x8>)
 800bde6:	f7ff b86e 	b.w	800aec6 <__retarget_lock_acquire_recursive>
 800bdea:	bf00      	nop
 800bdec:	200019ec 	.word	0x200019ec

0800bdf0 <__malloc_unlock>:
 800bdf0:	4801      	ldr	r0, [pc, #4]	; (800bdf8 <__malloc_unlock+0x8>)
 800bdf2:	f7ff b869 	b.w	800aec8 <__retarget_lock_release_recursive>
 800bdf6:	bf00      	nop
 800bdf8:	200019ec 	.word	0x200019ec

0800bdfc <_Balloc>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	69c6      	ldr	r6, [r0, #28]
 800be00:	4604      	mov	r4, r0
 800be02:	460d      	mov	r5, r1
 800be04:	b976      	cbnz	r6, 800be24 <_Balloc+0x28>
 800be06:	2010      	movs	r0, #16
 800be08:	f7ff ff44 	bl	800bc94 <malloc>
 800be0c:	4602      	mov	r2, r0
 800be0e:	61e0      	str	r0, [r4, #28]
 800be10:	b920      	cbnz	r0, 800be1c <_Balloc+0x20>
 800be12:	4b18      	ldr	r3, [pc, #96]	; (800be74 <_Balloc+0x78>)
 800be14:	4818      	ldr	r0, [pc, #96]	; (800be78 <_Balloc+0x7c>)
 800be16:	216b      	movs	r1, #107	; 0x6b
 800be18:	f7ff f858 	bl	800aecc <__assert_func>
 800be1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be20:	6006      	str	r6, [r0, #0]
 800be22:	60c6      	str	r6, [r0, #12]
 800be24:	69e6      	ldr	r6, [r4, #28]
 800be26:	68f3      	ldr	r3, [r6, #12]
 800be28:	b183      	cbz	r3, 800be4c <_Balloc+0x50>
 800be2a:	69e3      	ldr	r3, [r4, #28]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be32:	b9b8      	cbnz	r0, 800be64 <_Balloc+0x68>
 800be34:	2101      	movs	r1, #1
 800be36:	fa01 f605 	lsl.w	r6, r1, r5
 800be3a:	1d72      	adds	r2, r6, #5
 800be3c:	0092      	lsls	r2, r2, #2
 800be3e:	4620      	mov	r0, r4
 800be40:	f000 fdaf 	bl	800c9a2 <_calloc_r>
 800be44:	b160      	cbz	r0, 800be60 <_Balloc+0x64>
 800be46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be4a:	e00e      	b.n	800be6a <_Balloc+0x6e>
 800be4c:	2221      	movs	r2, #33	; 0x21
 800be4e:	2104      	movs	r1, #4
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fda6 	bl	800c9a2 <_calloc_r>
 800be56:	69e3      	ldr	r3, [r4, #28]
 800be58:	60f0      	str	r0, [r6, #12]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e4      	bne.n	800be2a <_Balloc+0x2e>
 800be60:	2000      	movs	r0, #0
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	6802      	ldr	r2, [r0, #0]
 800be66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be6a:	2300      	movs	r3, #0
 800be6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be70:	e7f7      	b.n	800be62 <_Balloc+0x66>
 800be72:	bf00      	nop
 800be74:	0800d259 	.word	0x0800d259
 800be78:	0800d37c 	.word	0x0800d37c

0800be7c <_Bfree>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	69c6      	ldr	r6, [r0, #28]
 800be80:	4605      	mov	r5, r0
 800be82:	460c      	mov	r4, r1
 800be84:	b976      	cbnz	r6, 800bea4 <_Bfree+0x28>
 800be86:	2010      	movs	r0, #16
 800be88:	f7ff ff04 	bl	800bc94 <malloc>
 800be8c:	4602      	mov	r2, r0
 800be8e:	61e8      	str	r0, [r5, #28]
 800be90:	b920      	cbnz	r0, 800be9c <_Bfree+0x20>
 800be92:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <_Bfree+0x3c>)
 800be94:	4809      	ldr	r0, [pc, #36]	; (800bebc <_Bfree+0x40>)
 800be96:	218f      	movs	r1, #143	; 0x8f
 800be98:	f7ff f818 	bl	800aecc <__assert_func>
 800be9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bea0:	6006      	str	r6, [r0, #0]
 800bea2:	60c6      	str	r6, [r0, #12]
 800bea4:	b13c      	cbz	r4, 800beb6 <_Bfree+0x3a>
 800bea6:	69eb      	ldr	r3, [r5, #28]
 800bea8:	6862      	ldr	r2, [r4, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800beb0:	6021      	str	r1, [r4, #0]
 800beb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beb6:	bd70      	pop	{r4, r5, r6, pc}
 800beb8:	0800d259 	.word	0x0800d259
 800bebc:	0800d37c 	.word	0x0800d37c

0800bec0 <__multadd>:
 800bec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec4:	690d      	ldr	r5, [r1, #16]
 800bec6:	4607      	mov	r7, r0
 800bec8:	460c      	mov	r4, r1
 800beca:	461e      	mov	r6, r3
 800becc:	f101 0c14 	add.w	ip, r1, #20
 800bed0:	2000      	movs	r0, #0
 800bed2:	f8dc 3000 	ldr.w	r3, [ip]
 800bed6:	b299      	uxth	r1, r3
 800bed8:	fb02 6101 	mla	r1, r2, r1, r6
 800bedc:	0c1e      	lsrs	r6, r3, #16
 800bede:	0c0b      	lsrs	r3, r1, #16
 800bee0:	fb02 3306 	mla	r3, r2, r6, r3
 800bee4:	b289      	uxth	r1, r1
 800bee6:	3001      	adds	r0, #1
 800bee8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800beec:	4285      	cmp	r5, r0
 800beee:	f84c 1b04 	str.w	r1, [ip], #4
 800bef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bef6:	dcec      	bgt.n	800bed2 <__multadd+0x12>
 800bef8:	b30e      	cbz	r6, 800bf3e <__multadd+0x7e>
 800befa:	68a3      	ldr	r3, [r4, #8]
 800befc:	42ab      	cmp	r3, r5
 800befe:	dc19      	bgt.n	800bf34 <__multadd+0x74>
 800bf00:	6861      	ldr	r1, [r4, #4]
 800bf02:	4638      	mov	r0, r7
 800bf04:	3101      	adds	r1, #1
 800bf06:	f7ff ff79 	bl	800bdfc <_Balloc>
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	b928      	cbnz	r0, 800bf1a <__multadd+0x5a>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <__multadd+0x84>)
 800bf12:	480d      	ldr	r0, [pc, #52]	; (800bf48 <__multadd+0x88>)
 800bf14:	21ba      	movs	r1, #186	; 0xba
 800bf16:	f7fe ffd9 	bl	800aecc <__assert_func>
 800bf1a:	6922      	ldr	r2, [r4, #16]
 800bf1c:	3202      	adds	r2, #2
 800bf1e:	f104 010c 	add.w	r1, r4, #12
 800bf22:	0092      	lsls	r2, r2, #2
 800bf24:	300c      	adds	r0, #12
 800bf26:	f000 fd27 	bl	800c978 <memcpy>
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f7ff ffa5 	bl	800be7c <_Bfree>
 800bf32:	4644      	mov	r4, r8
 800bf34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf38:	3501      	adds	r5, #1
 800bf3a:	615e      	str	r6, [r3, #20]
 800bf3c:	6125      	str	r5, [r4, #16]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf44:	0800d36b 	.word	0x0800d36b
 800bf48:	0800d37c 	.word	0x0800d37c

0800bf4c <__hi0bits>:
 800bf4c:	0c03      	lsrs	r3, r0, #16
 800bf4e:	041b      	lsls	r3, r3, #16
 800bf50:	b9d3      	cbnz	r3, 800bf88 <__hi0bits+0x3c>
 800bf52:	0400      	lsls	r0, r0, #16
 800bf54:	2310      	movs	r3, #16
 800bf56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf5a:	bf04      	itt	eq
 800bf5c:	0200      	lsleq	r0, r0, #8
 800bf5e:	3308      	addeq	r3, #8
 800bf60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf64:	bf04      	itt	eq
 800bf66:	0100      	lsleq	r0, r0, #4
 800bf68:	3304      	addeq	r3, #4
 800bf6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf6e:	bf04      	itt	eq
 800bf70:	0080      	lsleq	r0, r0, #2
 800bf72:	3302      	addeq	r3, #2
 800bf74:	2800      	cmp	r0, #0
 800bf76:	db05      	blt.n	800bf84 <__hi0bits+0x38>
 800bf78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf7c:	f103 0301 	add.w	r3, r3, #1
 800bf80:	bf08      	it	eq
 800bf82:	2320      	moveq	r3, #32
 800bf84:	4618      	mov	r0, r3
 800bf86:	4770      	bx	lr
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7e4      	b.n	800bf56 <__hi0bits+0xa>

0800bf8c <__lo0bits>:
 800bf8c:	6803      	ldr	r3, [r0, #0]
 800bf8e:	f013 0207 	ands.w	r2, r3, #7
 800bf92:	d00c      	beq.n	800bfae <__lo0bits+0x22>
 800bf94:	07d9      	lsls	r1, r3, #31
 800bf96:	d422      	bmi.n	800bfde <__lo0bits+0x52>
 800bf98:	079a      	lsls	r2, r3, #30
 800bf9a:	bf49      	itett	mi
 800bf9c:	085b      	lsrmi	r3, r3, #1
 800bf9e:	089b      	lsrpl	r3, r3, #2
 800bfa0:	6003      	strmi	r3, [r0, #0]
 800bfa2:	2201      	movmi	r2, #1
 800bfa4:	bf5c      	itt	pl
 800bfa6:	6003      	strpl	r3, [r0, #0]
 800bfa8:	2202      	movpl	r2, #2
 800bfaa:	4610      	mov	r0, r2
 800bfac:	4770      	bx	lr
 800bfae:	b299      	uxth	r1, r3
 800bfb0:	b909      	cbnz	r1, 800bfb6 <__lo0bits+0x2a>
 800bfb2:	0c1b      	lsrs	r3, r3, #16
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	b2d9      	uxtb	r1, r3
 800bfb8:	b909      	cbnz	r1, 800bfbe <__lo0bits+0x32>
 800bfba:	3208      	adds	r2, #8
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	0719      	lsls	r1, r3, #28
 800bfc0:	bf04      	itt	eq
 800bfc2:	091b      	lsreq	r3, r3, #4
 800bfc4:	3204      	addeq	r2, #4
 800bfc6:	0799      	lsls	r1, r3, #30
 800bfc8:	bf04      	itt	eq
 800bfca:	089b      	lsreq	r3, r3, #2
 800bfcc:	3202      	addeq	r2, #2
 800bfce:	07d9      	lsls	r1, r3, #31
 800bfd0:	d403      	bmi.n	800bfda <__lo0bits+0x4e>
 800bfd2:	085b      	lsrs	r3, r3, #1
 800bfd4:	f102 0201 	add.w	r2, r2, #1
 800bfd8:	d003      	beq.n	800bfe2 <__lo0bits+0x56>
 800bfda:	6003      	str	r3, [r0, #0]
 800bfdc:	e7e5      	b.n	800bfaa <__lo0bits+0x1e>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	e7e3      	b.n	800bfaa <__lo0bits+0x1e>
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	e7e1      	b.n	800bfaa <__lo0bits+0x1e>
	...

0800bfe8 <__i2b>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	460c      	mov	r4, r1
 800bfec:	2101      	movs	r1, #1
 800bfee:	f7ff ff05 	bl	800bdfc <_Balloc>
 800bff2:	4602      	mov	r2, r0
 800bff4:	b928      	cbnz	r0, 800c002 <__i2b+0x1a>
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <__i2b+0x24>)
 800bff8:	4805      	ldr	r0, [pc, #20]	; (800c010 <__i2b+0x28>)
 800bffa:	f240 1145 	movw	r1, #325	; 0x145
 800bffe:	f7fe ff65 	bl	800aecc <__assert_func>
 800c002:	2301      	movs	r3, #1
 800c004:	6144      	str	r4, [r0, #20]
 800c006:	6103      	str	r3, [r0, #16]
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	0800d36b 	.word	0x0800d36b
 800c010:	0800d37c 	.word	0x0800d37c

0800c014 <__multiply>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	4691      	mov	r9, r2
 800c01a:	690a      	ldr	r2, [r1, #16]
 800c01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c020:	429a      	cmp	r2, r3
 800c022:	bfb8      	it	lt
 800c024:	460b      	movlt	r3, r1
 800c026:	460c      	mov	r4, r1
 800c028:	bfbc      	itt	lt
 800c02a:	464c      	movlt	r4, r9
 800c02c:	4699      	movlt	r9, r3
 800c02e:	6927      	ldr	r7, [r4, #16]
 800c030:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c034:	68a3      	ldr	r3, [r4, #8]
 800c036:	6861      	ldr	r1, [r4, #4]
 800c038:	eb07 060a 	add.w	r6, r7, sl
 800c03c:	42b3      	cmp	r3, r6
 800c03e:	b085      	sub	sp, #20
 800c040:	bfb8      	it	lt
 800c042:	3101      	addlt	r1, #1
 800c044:	f7ff feda 	bl	800bdfc <_Balloc>
 800c048:	b930      	cbnz	r0, 800c058 <__multiply+0x44>
 800c04a:	4602      	mov	r2, r0
 800c04c:	4b44      	ldr	r3, [pc, #272]	; (800c160 <__multiply+0x14c>)
 800c04e:	4845      	ldr	r0, [pc, #276]	; (800c164 <__multiply+0x150>)
 800c050:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c054:	f7fe ff3a 	bl	800aecc <__assert_func>
 800c058:	f100 0514 	add.w	r5, r0, #20
 800c05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c060:	462b      	mov	r3, r5
 800c062:	2200      	movs	r2, #0
 800c064:	4543      	cmp	r3, r8
 800c066:	d321      	bcc.n	800c0ac <__multiply+0x98>
 800c068:	f104 0314 	add.w	r3, r4, #20
 800c06c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c070:	f109 0314 	add.w	r3, r9, #20
 800c074:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c078:	9202      	str	r2, [sp, #8]
 800c07a:	1b3a      	subs	r2, r7, r4
 800c07c:	3a15      	subs	r2, #21
 800c07e:	f022 0203 	bic.w	r2, r2, #3
 800c082:	3204      	adds	r2, #4
 800c084:	f104 0115 	add.w	r1, r4, #21
 800c088:	428f      	cmp	r7, r1
 800c08a:	bf38      	it	cc
 800c08c:	2204      	movcc	r2, #4
 800c08e:	9201      	str	r2, [sp, #4]
 800c090:	9a02      	ldr	r2, [sp, #8]
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	429a      	cmp	r2, r3
 800c096:	d80c      	bhi.n	800c0b2 <__multiply+0x9e>
 800c098:	2e00      	cmp	r6, #0
 800c09a:	dd03      	ble.n	800c0a4 <__multiply+0x90>
 800c09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d05b      	beq.n	800c15c <__multiply+0x148>
 800c0a4:	6106      	str	r6, [r0, #16]
 800c0a6:	b005      	add	sp, #20
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	f843 2b04 	str.w	r2, [r3], #4
 800c0b0:	e7d8      	b.n	800c064 <__multiply+0x50>
 800c0b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0b6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ba:	d024      	beq.n	800c106 <__multiply+0xf2>
 800c0bc:	f104 0e14 	add.w	lr, r4, #20
 800c0c0:	46a9      	mov	r9, r5
 800c0c2:	f04f 0c00 	mov.w	ip, #0
 800c0c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0ca:	f8d9 1000 	ldr.w	r1, [r9]
 800c0ce:	fa1f fb82 	uxth.w	fp, r2
 800c0d2:	b289      	uxth	r1, r1
 800c0d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0dc:	f8d9 2000 	ldr.w	r2, [r9]
 800c0e0:	4461      	add	r1, ip
 800c0e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0ee:	b289      	uxth	r1, r1
 800c0f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f4:	4577      	cmp	r7, lr
 800c0f6:	f849 1b04 	str.w	r1, [r9], #4
 800c0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0fe:	d8e2      	bhi.n	800c0c6 <__multiply+0xb2>
 800c100:	9a01      	ldr	r2, [sp, #4]
 800c102:	f845 c002 	str.w	ip, [r5, r2]
 800c106:	9a03      	ldr	r2, [sp, #12]
 800c108:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c10c:	3304      	adds	r3, #4
 800c10e:	f1b9 0f00 	cmp.w	r9, #0
 800c112:	d021      	beq.n	800c158 <__multiply+0x144>
 800c114:	6829      	ldr	r1, [r5, #0]
 800c116:	f104 0c14 	add.w	ip, r4, #20
 800c11a:	46ae      	mov	lr, r5
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	f8bc b000 	ldrh.w	fp, [ip]
 800c124:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c128:	fb09 220b 	mla	r2, r9, fp, r2
 800c12c:	4452      	add	r2, sl
 800c12e:	b289      	uxth	r1, r1
 800c130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c134:	f84e 1b04 	str.w	r1, [lr], #4
 800c138:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c13c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c140:	f8be 1000 	ldrh.w	r1, [lr]
 800c144:	fb09 110a 	mla	r1, r9, sl, r1
 800c148:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c14c:	4567      	cmp	r7, ip
 800c14e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c152:	d8e5      	bhi.n	800c120 <__multiply+0x10c>
 800c154:	9a01      	ldr	r2, [sp, #4]
 800c156:	50a9      	str	r1, [r5, r2]
 800c158:	3504      	adds	r5, #4
 800c15a:	e799      	b.n	800c090 <__multiply+0x7c>
 800c15c:	3e01      	subs	r6, #1
 800c15e:	e79b      	b.n	800c098 <__multiply+0x84>
 800c160:	0800d36b 	.word	0x0800d36b
 800c164:	0800d37c 	.word	0x0800d37c

0800c168 <__pow5mult>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	4615      	mov	r5, r2
 800c16e:	f012 0203 	ands.w	r2, r2, #3
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	d007      	beq.n	800c188 <__pow5mult+0x20>
 800c178:	4c25      	ldr	r4, [pc, #148]	; (800c210 <__pow5mult+0xa8>)
 800c17a:	3a01      	subs	r2, #1
 800c17c:	2300      	movs	r3, #0
 800c17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c182:	f7ff fe9d 	bl	800bec0 <__multadd>
 800c186:	4607      	mov	r7, r0
 800c188:	10ad      	asrs	r5, r5, #2
 800c18a:	d03d      	beq.n	800c208 <__pow5mult+0xa0>
 800c18c:	69f4      	ldr	r4, [r6, #28]
 800c18e:	b97c      	cbnz	r4, 800c1b0 <__pow5mult+0x48>
 800c190:	2010      	movs	r0, #16
 800c192:	f7ff fd7f 	bl	800bc94 <malloc>
 800c196:	4602      	mov	r2, r0
 800c198:	61f0      	str	r0, [r6, #28]
 800c19a:	b928      	cbnz	r0, 800c1a8 <__pow5mult+0x40>
 800c19c:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <__pow5mult+0xac>)
 800c19e:	481e      	ldr	r0, [pc, #120]	; (800c218 <__pow5mult+0xb0>)
 800c1a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c1a4:	f7fe fe92 	bl	800aecc <__assert_func>
 800c1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1ac:	6004      	str	r4, [r0, #0]
 800c1ae:	60c4      	str	r4, [r0, #12]
 800c1b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1b8:	b94c      	cbnz	r4, 800c1ce <__pow5mult+0x66>
 800c1ba:	f240 2171 	movw	r1, #625	; 0x271
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7ff ff12 	bl	800bfe8 <__i2b>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	f04f 0900 	mov.w	r9, #0
 800c1d2:	07eb      	lsls	r3, r5, #31
 800c1d4:	d50a      	bpl.n	800c1ec <__pow5mult+0x84>
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4622      	mov	r2, r4
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f7ff ff1a 	bl	800c014 <__multiply>
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff fe49 	bl	800be7c <_Bfree>
 800c1ea:	4647      	mov	r7, r8
 800c1ec:	106d      	asrs	r5, r5, #1
 800c1ee:	d00b      	beq.n	800c208 <__pow5mult+0xa0>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	b938      	cbnz	r0, 800c204 <__pow5mult+0x9c>
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f7ff ff0b 	bl	800c014 <__multiply>
 800c1fe:	6020      	str	r0, [r4, #0]
 800c200:	f8c0 9000 	str.w	r9, [r0]
 800c204:	4604      	mov	r4, r0
 800c206:	e7e4      	b.n	800c1d2 <__pow5mult+0x6a>
 800c208:	4638      	mov	r0, r7
 800c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20e:	bf00      	nop
 800c210:	0800d4c8 	.word	0x0800d4c8
 800c214:	0800d259 	.word	0x0800d259
 800c218:	0800d37c 	.word	0x0800d37c

0800c21c <__lshift>:
 800c21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	6849      	ldr	r1, [r1, #4]
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	4607      	mov	r7, r0
 800c22e:	4691      	mov	r9, r2
 800c230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c234:	f108 0601 	add.w	r6, r8, #1
 800c238:	42b3      	cmp	r3, r6
 800c23a:	db0b      	blt.n	800c254 <__lshift+0x38>
 800c23c:	4638      	mov	r0, r7
 800c23e:	f7ff fddd 	bl	800bdfc <_Balloc>
 800c242:	4605      	mov	r5, r0
 800c244:	b948      	cbnz	r0, 800c25a <__lshift+0x3e>
 800c246:	4602      	mov	r2, r0
 800c248:	4b28      	ldr	r3, [pc, #160]	; (800c2ec <__lshift+0xd0>)
 800c24a:	4829      	ldr	r0, [pc, #164]	; (800c2f0 <__lshift+0xd4>)
 800c24c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c250:	f7fe fe3c 	bl	800aecc <__assert_func>
 800c254:	3101      	adds	r1, #1
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	e7ee      	b.n	800c238 <__lshift+0x1c>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f100 0114 	add.w	r1, r0, #20
 800c260:	f100 0210 	add.w	r2, r0, #16
 800c264:	4618      	mov	r0, r3
 800c266:	4553      	cmp	r3, sl
 800c268:	db33      	blt.n	800c2d2 <__lshift+0xb6>
 800c26a:	6920      	ldr	r0, [r4, #16]
 800c26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c270:	f104 0314 	add.w	r3, r4, #20
 800c274:	f019 091f 	ands.w	r9, r9, #31
 800c278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c27c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c280:	d02b      	beq.n	800c2da <__lshift+0xbe>
 800c282:	f1c9 0e20 	rsb	lr, r9, #32
 800c286:	468a      	mov	sl, r1
 800c288:	2200      	movs	r2, #0
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	fa00 f009 	lsl.w	r0, r0, r9
 800c290:	4310      	orrs	r0, r2
 800c292:	f84a 0b04 	str.w	r0, [sl], #4
 800c296:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29a:	459c      	cmp	ip, r3
 800c29c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2a0:	d8f3      	bhi.n	800c28a <__lshift+0x6e>
 800c2a2:	ebac 0304 	sub.w	r3, ip, r4
 800c2a6:	3b15      	subs	r3, #21
 800c2a8:	f023 0303 	bic.w	r3, r3, #3
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	f104 0015 	add.w	r0, r4, #21
 800c2b2:	4584      	cmp	ip, r0
 800c2b4:	bf38      	it	cc
 800c2b6:	2304      	movcc	r3, #4
 800c2b8:	50ca      	str	r2, [r1, r3]
 800c2ba:	b10a      	cbz	r2, 800c2c0 <__lshift+0xa4>
 800c2bc:	f108 0602 	add.w	r6, r8, #2
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	612e      	str	r6, [r5, #16]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	f7ff fdd8 	bl	800be7c <_Bfree>
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	e7c5      	b.n	800c266 <__lshift+0x4a>
 800c2da:	3904      	subs	r1, #4
 800c2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2e4:	459c      	cmp	ip, r3
 800c2e6:	d8f9      	bhi.n	800c2dc <__lshift+0xc0>
 800c2e8:	e7ea      	b.n	800c2c0 <__lshift+0xa4>
 800c2ea:	bf00      	nop
 800c2ec:	0800d36b 	.word	0x0800d36b
 800c2f0:	0800d37c 	.word	0x0800d37c

0800c2f4 <__mcmp>:
 800c2f4:	b530      	push	{r4, r5, lr}
 800c2f6:	6902      	ldr	r2, [r0, #16]
 800c2f8:	690c      	ldr	r4, [r1, #16]
 800c2fa:	1b12      	subs	r2, r2, r4
 800c2fc:	d10e      	bne.n	800c31c <__mcmp+0x28>
 800c2fe:	f100 0314 	add.w	r3, r0, #20
 800c302:	3114      	adds	r1, #20
 800c304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c30c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c314:	42a5      	cmp	r5, r4
 800c316:	d003      	beq.n	800c320 <__mcmp+0x2c>
 800c318:	d305      	bcc.n	800c326 <__mcmp+0x32>
 800c31a:	2201      	movs	r2, #1
 800c31c:	4610      	mov	r0, r2
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	4283      	cmp	r3, r0
 800c322:	d3f3      	bcc.n	800c30c <__mcmp+0x18>
 800c324:	e7fa      	b.n	800c31c <__mcmp+0x28>
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e7f7      	b.n	800c31c <__mcmp+0x28>

0800c32c <__mdiff>:
 800c32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	4606      	mov	r6, r0
 800c334:	4611      	mov	r1, r2
 800c336:	4620      	mov	r0, r4
 800c338:	4690      	mov	r8, r2
 800c33a:	f7ff ffdb 	bl	800c2f4 <__mcmp>
 800c33e:	1e05      	subs	r5, r0, #0
 800c340:	d110      	bne.n	800c364 <__mdiff+0x38>
 800c342:	4629      	mov	r1, r5
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff fd59 	bl	800bdfc <_Balloc>
 800c34a:	b930      	cbnz	r0, 800c35a <__mdiff+0x2e>
 800c34c:	4b3a      	ldr	r3, [pc, #232]	; (800c438 <__mdiff+0x10c>)
 800c34e:	4602      	mov	r2, r0
 800c350:	f240 2137 	movw	r1, #567	; 0x237
 800c354:	4839      	ldr	r0, [pc, #228]	; (800c43c <__mdiff+0x110>)
 800c356:	f7fe fdb9 	bl	800aecc <__assert_func>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	bfa4      	itt	ge
 800c366:	4643      	movge	r3, r8
 800c368:	46a0      	movge	r8, r4
 800c36a:	4630      	mov	r0, r6
 800c36c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c370:	bfa6      	itte	ge
 800c372:	461c      	movge	r4, r3
 800c374:	2500      	movge	r5, #0
 800c376:	2501      	movlt	r5, #1
 800c378:	f7ff fd40 	bl	800bdfc <_Balloc>
 800c37c:	b920      	cbnz	r0, 800c388 <__mdiff+0x5c>
 800c37e:	4b2e      	ldr	r3, [pc, #184]	; (800c438 <__mdiff+0x10c>)
 800c380:	4602      	mov	r2, r0
 800c382:	f240 2145 	movw	r1, #581	; 0x245
 800c386:	e7e5      	b.n	800c354 <__mdiff+0x28>
 800c388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c38c:	6926      	ldr	r6, [r4, #16]
 800c38e:	60c5      	str	r5, [r0, #12]
 800c390:	f104 0914 	add.w	r9, r4, #20
 800c394:	f108 0514 	add.w	r5, r8, #20
 800c398:	f100 0e14 	add.w	lr, r0, #20
 800c39c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3a4:	f108 0210 	add.w	r2, r8, #16
 800c3a8:	46f2      	mov	sl, lr
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3b4:	fa11 f88b 	uxtah	r8, r1, fp
 800c3b8:	b299      	uxth	r1, r3
 800c3ba:	0c1b      	lsrs	r3, r3, #16
 800c3bc:	eba8 0801 	sub.w	r8, r8, r1
 800c3c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3c8:	fa1f f888 	uxth.w	r8, r8
 800c3cc:	1419      	asrs	r1, r3, #16
 800c3ce:	454e      	cmp	r6, r9
 800c3d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3d4:	f84a 3b04 	str.w	r3, [sl], #4
 800c3d8:	d8e8      	bhi.n	800c3ac <__mdiff+0x80>
 800c3da:	1b33      	subs	r3, r6, r4
 800c3dc:	3b15      	subs	r3, #21
 800c3de:	f023 0303 	bic.w	r3, r3, #3
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	3415      	adds	r4, #21
 800c3e6:	42a6      	cmp	r6, r4
 800c3e8:	bf38      	it	cc
 800c3ea:	2304      	movcc	r3, #4
 800c3ec:	441d      	add	r5, r3
 800c3ee:	4473      	add	r3, lr
 800c3f0:	469e      	mov	lr, r3
 800c3f2:	462e      	mov	r6, r5
 800c3f4:	4566      	cmp	r6, ip
 800c3f6:	d30e      	bcc.n	800c416 <__mdiff+0xea>
 800c3f8:	f10c 0203 	add.w	r2, ip, #3
 800c3fc:	1b52      	subs	r2, r2, r5
 800c3fe:	f022 0203 	bic.w	r2, r2, #3
 800c402:	3d03      	subs	r5, #3
 800c404:	45ac      	cmp	ip, r5
 800c406:	bf38      	it	cc
 800c408:	2200      	movcc	r2, #0
 800c40a:	4413      	add	r3, r2
 800c40c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c410:	b17a      	cbz	r2, 800c432 <__mdiff+0x106>
 800c412:	6107      	str	r7, [r0, #16]
 800c414:	e7a4      	b.n	800c360 <__mdiff+0x34>
 800c416:	f856 8b04 	ldr.w	r8, [r6], #4
 800c41a:	fa11 f288 	uxtah	r2, r1, r8
 800c41e:	1414      	asrs	r4, r2, #16
 800c420:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c424:	b292      	uxth	r2, r2
 800c426:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c42a:	f84e 2b04 	str.w	r2, [lr], #4
 800c42e:	1421      	asrs	r1, r4, #16
 800c430:	e7e0      	b.n	800c3f4 <__mdiff+0xc8>
 800c432:	3f01      	subs	r7, #1
 800c434:	e7ea      	b.n	800c40c <__mdiff+0xe0>
 800c436:	bf00      	nop
 800c438:	0800d36b 	.word	0x0800d36b
 800c43c:	0800d37c 	.word	0x0800d37c

0800c440 <__d2b>:
 800c440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c444:	460f      	mov	r7, r1
 800c446:	2101      	movs	r1, #1
 800c448:	ec59 8b10 	vmov	r8, r9, d0
 800c44c:	4616      	mov	r6, r2
 800c44e:	f7ff fcd5 	bl	800bdfc <_Balloc>
 800c452:	4604      	mov	r4, r0
 800c454:	b930      	cbnz	r0, 800c464 <__d2b+0x24>
 800c456:	4602      	mov	r2, r0
 800c458:	4b24      	ldr	r3, [pc, #144]	; (800c4ec <__d2b+0xac>)
 800c45a:	4825      	ldr	r0, [pc, #148]	; (800c4f0 <__d2b+0xb0>)
 800c45c:	f240 310f 	movw	r1, #783	; 0x30f
 800c460:	f7fe fd34 	bl	800aecc <__assert_func>
 800c464:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c46c:	bb2d      	cbnz	r5, 800c4ba <__d2b+0x7a>
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	f1b8 0300 	subs.w	r3, r8, #0
 800c474:	d026      	beq.n	800c4c4 <__d2b+0x84>
 800c476:	4668      	mov	r0, sp
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	f7ff fd87 	bl	800bf8c <__lo0bits>
 800c47e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c482:	b1e8      	cbz	r0, 800c4c0 <__d2b+0x80>
 800c484:	f1c0 0320 	rsb	r3, r0, #32
 800c488:	fa02 f303 	lsl.w	r3, r2, r3
 800c48c:	430b      	orrs	r3, r1
 800c48e:	40c2      	lsrs	r2, r0
 800c490:	6163      	str	r3, [r4, #20]
 800c492:	9201      	str	r2, [sp, #4]
 800c494:	9b01      	ldr	r3, [sp, #4]
 800c496:	61a3      	str	r3, [r4, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	bf14      	ite	ne
 800c49c:	2202      	movne	r2, #2
 800c49e:	2201      	moveq	r2, #1
 800c4a0:	6122      	str	r2, [r4, #16]
 800c4a2:	b1bd      	cbz	r5, 800c4d4 <__d2b+0x94>
 800c4a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4a8:	4405      	add	r5, r0
 800c4aa:	603d      	str	r5, [r7, #0]
 800c4ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4b0:	6030      	str	r0, [r6, #0]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	b003      	add	sp, #12
 800c4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4be:	e7d6      	b.n	800c46e <__d2b+0x2e>
 800c4c0:	6161      	str	r1, [r4, #20]
 800c4c2:	e7e7      	b.n	800c494 <__d2b+0x54>
 800c4c4:	a801      	add	r0, sp, #4
 800c4c6:	f7ff fd61 	bl	800bf8c <__lo0bits>
 800c4ca:	9b01      	ldr	r3, [sp, #4]
 800c4cc:	6163      	str	r3, [r4, #20]
 800c4ce:	3020      	adds	r0, #32
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	e7e5      	b.n	800c4a0 <__d2b+0x60>
 800c4d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4dc:	6038      	str	r0, [r7, #0]
 800c4de:	6918      	ldr	r0, [r3, #16]
 800c4e0:	f7ff fd34 	bl	800bf4c <__hi0bits>
 800c4e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4e8:	e7e2      	b.n	800c4b0 <__d2b+0x70>
 800c4ea:	bf00      	nop
 800c4ec:	0800d36b 	.word	0x0800d36b
 800c4f0:	0800d37c 	.word	0x0800d37c

0800c4f4 <__ssputs_r>:
 800c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f8:	688e      	ldr	r6, [r1, #8]
 800c4fa:	461f      	mov	r7, r3
 800c4fc:	42be      	cmp	r6, r7
 800c4fe:	680b      	ldr	r3, [r1, #0]
 800c500:	4682      	mov	sl, r0
 800c502:	460c      	mov	r4, r1
 800c504:	4690      	mov	r8, r2
 800c506:	d82c      	bhi.n	800c562 <__ssputs_r+0x6e>
 800c508:	898a      	ldrh	r2, [r1, #12]
 800c50a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c50e:	d026      	beq.n	800c55e <__ssputs_r+0x6a>
 800c510:	6965      	ldr	r5, [r4, #20]
 800c512:	6909      	ldr	r1, [r1, #16]
 800c514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c518:	eba3 0901 	sub.w	r9, r3, r1
 800c51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c520:	1c7b      	adds	r3, r7, #1
 800c522:	444b      	add	r3, r9
 800c524:	106d      	asrs	r5, r5, #1
 800c526:	429d      	cmp	r5, r3
 800c528:	bf38      	it	cc
 800c52a:	461d      	movcc	r5, r3
 800c52c:	0553      	lsls	r3, r2, #21
 800c52e:	d527      	bpl.n	800c580 <__ssputs_r+0x8c>
 800c530:	4629      	mov	r1, r5
 800c532:	f7ff fbd7 	bl	800bce4 <_malloc_r>
 800c536:	4606      	mov	r6, r0
 800c538:	b360      	cbz	r0, 800c594 <__ssputs_r+0xa0>
 800c53a:	6921      	ldr	r1, [r4, #16]
 800c53c:	464a      	mov	r2, r9
 800c53e:	f000 fa1b 	bl	800c978 <memcpy>
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	6126      	str	r6, [r4, #16]
 800c550:	6165      	str	r5, [r4, #20]
 800c552:	444e      	add	r6, r9
 800c554:	eba5 0509 	sub.w	r5, r5, r9
 800c558:	6026      	str	r6, [r4, #0]
 800c55a:	60a5      	str	r5, [r4, #8]
 800c55c:	463e      	mov	r6, r7
 800c55e:	42be      	cmp	r6, r7
 800c560:	d900      	bls.n	800c564 <__ssputs_r+0x70>
 800c562:	463e      	mov	r6, r7
 800c564:	6820      	ldr	r0, [r4, #0]
 800c566:	4632      	mov	r2, r6
 800c568:	4641      	mov	r1, r8
 800c56a:	f000 f9db 	bl	800c924 <memmove>
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	1b9b      	subs	r3, r3, r6
 800c572:	60a3      	str	r3, [r4, #8]
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	4433      	add	r3, r6
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	2000      	movs	r0, #0
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	462a      	mov	r2, r5
 800c582:	f000 fa36 	bl	800c9f2 <_realloc_r>
 800c586:	4606      	mov	r6, r0
 800c588:	2800      	cmp	r0, #0
 800c58a:	d1e0      	bne.n	800c54e <__ssputs_r+0x5a>
 800c58c:	6921      	ldr	r1, [r4, #16]
 800c58e:	4650      	mov	r0, sl
 800c590:	f7ff fb34 	bl	800bbfc <_free_r>
 800c594:	230c      	movs	r3, #12
 800c596:	f8ca 3000 	str.w	r3, [sl]
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a0:	81a3      	strh	r3, [r4, #12]
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	e7e9      	b.n	800c57c <__ssputs_r+0x88>

0800c5a8 <_svfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	4698      	mov	r8, r3
 800c5ae:	898b      	ldrh	r3, [r1, #12]
 800c5b0:	061b      	lsls	r3, r3, #24
 800c5b2:	b09d      	sub	sp, #116	; 0x74
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	d50e      	bpl.n	800c5da <_svfiprintf_r+0x32>
 800c5bc:	690b      	ldr	r3, [r1, #16]
 800c5be:	b963      	cbnz	r3, 800c5da <_svfiprintf_r+0x32>
 800c5c0:	2140      	movs	r1, #64	; 0x40
 800c5c2:	f7ff fb8f 	bl	800bce4 <_malloc_r>
 800c5c6:	6028      	str	r0, [r5, #0]
 800c5c8:	6128      	str	r0, [r5, #16]
 800c5ca:	b920      	cbnz	r0, 800c5d6 <_svfiprintf_r+0x2e>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d4:	e0d0      	b.n	800c778 <_svfiprintf_r+0x1d0>
 800c5d6:	2340      	movs	r3, #64	; 0x40
 800c5d8:	616b      	str	r3, [r5, #20]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5de:	2320      	movs	r3, #32
 800c5e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e8:	2330      	movs	r3, #48	; 0x30
 800c5ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c790 <_svfiprintf_r+0x1e8>
 800c5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5f2:	f04f 0901 	mov.w	r9, #1
 800c5f6:	4623      	mov	r3, r4
 800c5f8:	469a      	mov	sl, r3
 800c5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5fe:	b10a      	cbz	r2, 800c604 <_svfiprintf_r+0x5c>
 800c600:	2a25      	cmp	r2, #37	; 0x25
 800c602:	d1f9      	bne.n	800c5f8 <_svfiprintf_r+0x50>
 800c604:	ebba 0b04 	subs.w	fp, sl, r4
 800c608:	d00b      	beq.n	800c622 <_svfiprintf_r+0x7a>
 800c60a:	465b      	mov	r3, fp
 800c60c:	4622      	mov	r2, r4
 800c60e:	4629      	mov	r1, r5
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff ff6f 	bl	800c4f4 <__ssputs_r>
 800c616:	3001      	adds	r0, #1
 800c618:	f000 80a9 	beq.w	800c76e <_svfiprintf_r+0x1c6>
 800c61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c61e:	445a      	add	r2, fp
 800c620:	9209      	str	r2, [sp, #36]	; 0x24
 800c622:	f89a 3000 	ldrb.w	r3, [sl]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 80a1 	beq.w	800c76e <_svfiprintf_r+0x1c6>
 800c62c:	2300      	movs	r3, #0
 800c62e:	f04f 32ff 	mov.w	r2, #4294967295
 800c632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c636:	f10a 0a01 	add.w	sl, sl, #1
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	9307      	str	r3, [sp, #28]
 800c63e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c642:	931a      	str	r3, [sp, #104]	; 0x68
 800c644:	4654      	mov	r4, sl
 800c646:	2205      	movs	r2, #5
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	4850      	ldr	r0, [pc, #320]	; (800c790 <_svfiprintf_r+0x1e8>)
 800c64e:	f7f3 fdbf 	bl	80001d0 <memchr>
 800c652:	9a04      	ldr	r2, [sp, #16]
 800c654:	b9d8      	cbnz	r0, 800c68e <_svfiprintf_r+0xe6>
 800c656:	06d0      	lsls	r0, r2, #27
 800c658:	bf44      	itt	mi
 800c65a:	2320      	movmi	r3, #32
 800c65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c660:	0711      	lsls	r1, r2, #28
 800c662:	bf44      	itt	mi
 800c664:	232b      	movmi	r3, #43	; 0x2b
 800c666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66a:	f89a 3000 	ldrb.w	r3, [sl]
 800c66e:	2b2a      	cmp	r3, #42	; 0x2a
 800c670:	d015      	beq.n	800c69e <_svfiprintf_r+0xf6>
 800c672:	9a07      	ldr	r2, [sp, #28]
 800c674:	4654      	mov	r4, sl
 800c676:	2000      	movs	r0, #0
 800c678:	f04f 0c0a 	mov.w	ip, #10
 800c67c:	4621      	mov	r1, r4
 800c67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c682:	3b30      	subs	r3, #48	; 0x30
 800c684:	2b09      	cmp	r3, #9
 800c686:	d94d      	bls.n	800c724 <_svfiprintf_r+0x17c>
 800c688:	b1b0      	cbz	r0, 800c6b8 <_svfiprintf_r+0x110>
 800c68a:	9207      	str	r2, [sp, #28]
 800c68c:	e014      	b.n	800c6b8 <_svfiprintf_r+0x110>
 800c68e:	eba0 0308 	sub.w	r3, r0, r8
 800c692:	fa09 f303 	lsl.w	r3, r9, r3
 800c696:	4313      	orrs	r3, r2
 800c698:	9304      	str	r3, [sp, #16]
 800c69a:	46a2      	mov	sl, r4
 800c69c:	e7d2      	b.n	800c644 <_svfiprintf_r+0x9c>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	1d19      	adds	r1, r3, #4
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	9103      	str	r1, [sp, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bfbb      	ittet	lt
 800c6aa:	425b      	neglt	r3, r3
 800c6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b0:	9307      	strge	r3, [sp, #28]
 800c6b2:	9307      	strlt	r3, [sp, #28]
 800c6b4:	bfb8      	it	lt
 800c6b6:	9204      	strlt	r2, [sp, #16]
 800c6b8:	7823      	ldrb	r3, [r4, #0]
 800c6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c6bc:	d10c      	bne.n	800c6d8 <_svfiprintf_r+0x130>
 800c6be:	7863      	ldrb	r3, [r4, #1]
 800c6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c2:	d134      	bne.n	800c72e <_svfiprintf_r+0x186>
 800c6c4:	9b03      	ldr	r3, [sp, #12]
 800c6c6:	1d1a      	adds	r2, r3, #4
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	9203      	str	r2, [sp, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfb8      	it	lt
 800c6d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6d4:	3402      	adds	r4, #2
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c7a0 <_svfiprintf_r+0x1f8>
 800c6dc:	7821      	ldrb	r1, [r4, #0]
 800c6de:	2203      	movs	r2, #3
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	f7f3 fd75 	bl	80001d0 <memchr>
 800c6e6:	b138      	cbz	r0, 800c6f8 <_svfiprintf_r+0x150>
 800c6e8:	9b04      	ldr	r3, [sp, #16]
 800c6ea:	eba0 000a 	sub.w	r0, r0, sl
 800c6ee:	2240      	movs	r2, #64	; 0x40
 800c6f0:	4082      	lsls	r2, r0
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	3401      	adds	r4, #1
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fc:	4825      	ldr	r0, [pc, #148]	; (800c794 <_svfiprintf_r+0x1ec>)
 800c6fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c702:	2206      	movs	r2, #6
 800c704:	f7f3 fd64 	bl	80001d0 <memchr>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d038      	beq.n	800c77e <_svfiprintf_r+0x1d6>
 800c70c:	4b22      	ldr	r3, [pc, #136]	; (800c798 <_svfiprintf_r+0x1f0>)
 800c70e:	bb1b      	cbnz	r3, 800c758 <_svfiprintf_r+0x1b0>
 800c710:	9b03      	ldr	r3, [sp, #12]
 800c712:	3307      	adds	r3, #7
 800c714:	f023 0307 	bic.w	r3, r3, #7
 800c718:	3308      	adds	r3, #8
 800c71a:	9303      	str	r3, [sp, #12]
 800c71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71e:	4433      	add	r3, r6
 800c720:	9309      	str	r3, [sp, #36]	; 0x24
 800c722:	e768      	b.n	800c5f6 <_svfiprintf_r+0x4e>
 800c724:	fb0c 3202 	mla	r2, ip, r2, r3
 800c728:	460c      	mov	r4, r1
 800c72a:	2001      	movs	r0, #1
 800c72c:	e7a6      	b.n	800c67c <_svfiprintf_r+0xd4>
 800c72e:	2300      	movs	r3, #0
 800c730:	3401      	adds	r4, #1
 800c732:	9305      	str	r3, [sp, #20]
 800c734:	4619      	mov	r1, r3
 800c736:	f04f 0c0a 	mov.w	ip, #10
 800c73a:	4620      	mov	r0, r4
 800c73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c740:	3a30      	subs	r2, #48	; 0x30
 800c742:	2a09      	cmp	r2, #9
 800c744:	d903      	bls.n	800c74e <_svfiprintf_r+0x1a6>
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0c6      	beq.n	800c6d8 <_svfiprintf_r+0x130>
 800c74a:	9105      	str	r1, [sp, #20]
 800c74c:	e7c4      	b.n	800c6d8 <_svfiprintf_r+0x130>
 800c74e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c752:	4604      	mov	r4, r0
 800c754:	2301      	movs	r3, #1
 800c756:	e7f0      	b.n	800c73a <_svfiprintf_r+0x192>
 800c758:	ab03      	add	r3, sp, #12
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	462a      	mov	r2, r5
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <_svfiprintf_r+0x1f4>)
 800c760:	a904      	add	r1, sp, #16
 800c762:	4638      	mov	r0, r7
 800c764:	f7fd fdd8 	bl	800a318 <_printf_float>
 800c768:	1c42      	adds	r2, r0, #1
 800c76a:	4606      	mov	r6, r0
 800c76c:	d1d6      	bne.n	800c71c <_svfiprintf_r+0x174>
 800c76e:	89ab      	ldrh	r3, [r5, #12]
 800c770:	065b      	lsls	r3, r3, #25
 800c772:	f53f af2d 	bmi.w	800c5d0 <_svfiprintf_r+0x28>
 800c776:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c778:	b01d      	add	sp, #116	; 0x74
 800c77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77e:	ab03      	add	r3, sp, #12
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	462a      	mov	r2, r5
 800c784:	4b05      	ldr	r3, [pc, #20]	; (800c79c <_svfiprintf_r+0x1f4>)
 800c786:	a904      	add	r1, sp, #16
 800c788:	4638      	mov	r0, r7
 800c78a:	f7fe f869 	bl	800a860 <_printf_i>
 800c78e:	e7eb      	b.n	800c768 <_svfiprintf_r+0x1c0>
 800c790:	0800d4d4 	.word	0x0800d4d4
 800c794:	0800d4de 	.word	0x0800d4de
 800c798:	0800a319 	.word	0x0800a319
 800c79c:	0800c4f5 	.word	0x0800c4f5
 800c7a0:	0800d4da 	.word	0x0800d4da

0800c7a4 <__sflush_r>:
 800c7a4:	898a      	ldrh	r2, [r1, #12]
 800c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	0710      	lsls	r0, r2, #28
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	d458      	bmi.n	800c864 <__sflush_r+0xc0>
 800c7b2:	684b      	ldr	r3, [r1, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc05      	bgt.n	800c7c4 <__sflush_r+0x20>
 800c7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	dc02      	bgt.n	800c7c4 <__sflush_r+0x20>
 800c7be:	2000      	movs	r0, #0
 800c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c6:	2e00      	cmp	r6, #0
 800c7c8:	d0f9      	beq.n	800c7be <__sflush_r+0x1a>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7d0:	682f      	ldr	r7, [r5, #0]
 800c7d2:	6a21      	ldr	r1, [r4, #32]
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	d032      	beq.n	800c83e <__sflush_r+0x9a>
 800c7d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	075a      	lsls	r2, r3, #29
 800c7de:	d505      	bpl.n	800c7ec <__sflush_r+0x48>
 800c7e0:	6863      	ldr	r3, [r4, #4]
 800c7e2:	1ac0      	subs	r0, r0, r3
 800c7e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7e6:	b10b      	cbz	r3, 800c7ec <__sflush_r+0x48>
 800c7e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7ea:	1ac0      	subs	r0, r0, r3
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7f2:	6a21      	ldr	r1, [r4, #32]
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b0      	blx	r6
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	d106      	bne.n	800c80c <__sflush_r+0x68>
 800c7fe:	6829      	ldr	r1, [r5, #0]
 800c800:	291d      	cmp	r1, #29
 800c802:	d82b      	bhi.n	800c85c <__sflush_r+0xb8>
 800c804:	4a29      	ldr	r2, [pc, #164]	; (800c8ac <__sflush_r+0x108>)
 800c806:	410a      	asrs	r2, r1
 800c808:	07d6      	lsls	r6, r2, #31
 800c80a:	d427      	bmi.n	800c85c <__sflush_r+0xb8>
 800c80c:	2200      	movs	r2, #0
 800c80e:	6062      	str	r2, [r4, #4]
 800c810:	04d9      	lsls	r1, r3, #19
 800c812:	6922      	ldr	r2, [r4, #16]
 800c814:	6022      	str	r2, [r4, #0]
 800c816:	d504      	bpl.n	800c822 <__sflush_r+0x7e>
 800c818:	1c42      	adds	r2, r0, #1
 800c81a:	d101      	bne.n	800c820 <__sflush_r+0x7c>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b903      	cbnz	r3, 800c822 <__sflush_r+0x7e>
 800c820:	6560      	str	r0, [r4, #84]	; 0x54
 800c822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c824:	602f      	str	r7, [r5, #0]
 800c826:	2900      	cmp	r1, #0
 800c828:	d0c9      	beq.n	800c7be <__sflush_r+0x1a>
 800c82a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c82e:	4299      	cmp	r1, r3
 800c830:	d002      	beq.n	800c838 <__sflush_r+0x94>
 800c832:	4628      	mov	r0, r5
 800c834:	f7ff f9e2 	bl	800bbfc <_free_r>
 800c838:	2000      	movs	r0, #0
 800c83a:	6360      	str	r0, [r4, #52]	; 0x34
 800c83c:	e7c0      	b.n	800c7c0 <__sflush_r+0x1c>
 800c83e:	2301      	movs	r3, #1
 800c840:	4628      	mov	r0, r5
 800c842:	47b0      	blx	r6
 800c844:	1c41      	adds	r1, r0, #1
 800c846:	d1c8      	bne.n	800c7da <__sflush_r+0x36>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0c5      	beq.n	800c7da <__sflush_r+0x36>
 800c84e:	2b1d      	cmp	r3, #29
 800c850:	d001      	beq.n	800c856 <__sflush_r+0xb2>
 800c852:	2b16      	cmp	r3, #22
 800c854:	d101      	bne.n	800c85a <__sflush_r+0xb6>
 800c856:	602f      	str	r7, [r5, #0]
 800c858:	e7b1      	b.n	800c7be <__sflush_r+0x1a>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c860:	81a3      	strh	r3, [r4, #12]
 800c862:	e7ad      	b.n	800c7c0 <__sflush_r+0x1c>
 800c864:	690f      	ldr	r7, [r1, #16]
 800c866:	2f00      	cmp	r7, #0
 800c868:	d0a9      	beq.n	800c7be <__sflush_r+0x1a>
 800c86a:	0793      	lsls	r3, r2, #30
 800c86c:	680e      	ldr	r6, [r1, #0]
 800c86e:	bf08      	it	eq
 800c870:	694b      	ldreq	r3, [r1, #20]
 800c872:	600f      	str	r7, [r1, #0]
 800c874:	bf18      	it	ne
 800c876:	2300      	movne	r3, #0
 800c878:	eba6 0807 	sub.w	r8, r6, r7
 800c87c:	608b      	str	r3, [r1, #8]
 800c87e:	f1b8 0f00 	cmp.w	r8, #0
 800c882:	dd9c      	ble.n	800c7be <__sflush_r+0x1a>
 800c884:	6a21      	ldr	r1, [r4, #32]
 800c886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c888:	4643      	mov	r3, r8
 800c88a:	463a      	mov	r2, r7
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b0      	blx	r6
 800c890:	2800      	cmp	r0, #0
 800c892:	dc06      	bgt.n	800c8a2 <__sflush_r+0xfe>
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	e78e      	b.n	800c7c0 <__sflush_r+0x1c>
 800c8a2:	4407      	add	r7, r0
 800c8a4:	eba8 0800 	sub.w	r8, r8, r0
 800c8a8:	e7e9      	b.n	800c87e <__sflush_r+0xda>
 800c8aa:	bf00      	nop
 800c8ac:	dfbffffe 	.word	0xdfbffffe

0800c8b0 <_fflush_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	690b      	ldr	r3, [r1, #16]
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	b913      	cbnz	r3, 800c8c0 <_fflush_r+0x10>
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	4628      	mov	r0, r5
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	b118      	cbz	r0, 800c8ca <_fflush_r+0x1a>
 800c8c2:	6a03      	ldr	r3, [r0, #32]
 800c8c4:	b90b      	cbnz	r3, 800c8ca <_fflush_r+0x1a>
 800c8c6:	f7fe f979 	bl	800abbc <__sinit>
 800c8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0f3      	beq.n	800c8ba <_fflush_r+0xa>
 800c8d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8d4:	07d0      	lsls	r0, r2, #31
 800c8d6:	d404      	bmi.n	800c8e2 <_fflush_r+0x32>
 800c8d8:	0599      	lsls	r1, r3, #22
 800c8da:	d402      	bmi.n	800c8e2 <_fflush_r+0x32>
 800c8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8de:	f7fe faf2 	bl	800aec6 <__retarget_lock_acquire_recursive>
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	f7ff ff5d 	bl	800c7a4 <__sflush_r>
 800c8ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8ec:	07da      	lsls	r2, r3, #31
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	d4e4      	bmi.n	800c8bc <_fflush_r+0xc>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	059b      	lsls	r3, r3, #22
 800c8f6:	d4e1      	bmi.n	800c8bc <_fflush_r+0xc>
 800c8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8fa:	f7fe fae5 	bl	800aec8 <__retarget_lock_release_recursive>
 800c8fe:	e7dd      	b.n	800c8bc <_fflush_r+0xc>

0800c900 <fiprintf>:
 800c900:	b40e      	push	{r1, r2, r3}
 800c902:	b503      	push	{r0, r1, lr}
 800c904:	4601      	mov	r1, r0
 800c906:	ab03      	add	r3, sp, #12
 800c908:	4805      	ldr	r0, [pc, #20]	; (800c920 <fiprintf+0x20>)
 800c90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90e:	6800      	ldr	r0, [r0, #0]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	f000 f8d3 	bl	800cabc <_vfiprintf_r>
 800c916:	b002      	add	sp, #8
 800c918:	f85d eb04 	ldr.w	lr, [sp], #4
 800c91c:	b003      	add	sp, #12
 800c91e:	4770      	bx	lr
 800c920:	20000064 	.word	0x20000064

0800c924 <memmove>:
 800c924:	4288      	cmp	r0, r1
 800c926:	b510      	push	{r4, lr}
 800c928:	eb01 0402 	add.w	r4, r1, r2
 800c92c:	d902      	bls.n	800c934 <memmove+0x10>
 800c92e:	4284      	cmp	r4, r0
 800c930:	4623      	mov	r3, r4
 800c932:	d807      	bhi.n	800c944 <memmove+0x20>
 800c934:	1e43      	subs	r3, r0, #1
 800c936:	42a1      	cmp	r1, r4
 800c938:	d008      	beq.n	800c94c <memmove+0x28>
 800c93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c942:	e7f8      	b.n	800c936 <memmove+0x12>
 800c944:	4402      	add	r2, r0
 800c946:	4601      	mov	r1, r0
 800c948:	428a      	cmp	r2, r1
 800c94a:	d100      	bne.n	800c94e <memmove+0x2a>
 800c94c:	bd10      	pop	{r4, pc}
 800c94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c956:	e7f7      	b.n	800c948 <memmove+0x24>

0800c958 <_sbrk_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4d06      	ldr	r5, [pc, #24]	; (800c974 <_sbrk_r+0x1c>)
 800c95c:	2300      	movs	r3, #0
 800c95e:	4604      	mov	r4, r0
 800c960:	4608      	mov	r0, r1
 800c962:	602b      	str	r3, [r5, #0]
 800c964:	f7f6 fbe0 	bl	8003128 <_sbrk>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d102      	bne.n	800c972 <_sbrk_r+0x1a>
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	b103      	cbz	r3, 800c972 <_sbrk_r+0x1a>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	200019e8 	.word	0x200019e8

0800c978 <memcpy>:
 800c978:	440a      	add	r2, r1
 800c97a:	4291      	cmp	r1, r2
 800c97c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c980:	d100      	bne.n	800c984 <memcpy+0xc>
 800c982:	4770      	bx	lr
 800c984:	b510      	push	{r4, lr}
 800c986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c98e:	4291      	cmp	r1, r2
 800c990:	d1f9      	bne.n	800c986 <memcpy+0xe>
 800c992:	bd10      	pop	{r4, pc}

0800c994 <abort>:
 800c994:	b508      	push	{r3, lr}
 800c996:	2006      	movs	r0, #6
 800c998:	f000 fa68 	bl	800ce6c <raise>
 800c99c:	2001      	movs	r0, #1
 800c99e:	f7f6 fb4b 	bl	8003038 <_exit>

0800c9a2 <_calloc_r>:
 800c9a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9a4:	fba1 2402 	umull	r2, r4, r1, r2
 800c9a8:	b94c      	cbnz	r4, 800c9be <_calloc_r+0x1c>
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	9201      	str	r2, [sp, #4]
 800c9ae:	f7ff f999 	bl	800bce4 <_malloc_r>
 800c9b2:	9a01      	ldr	r2, [sp, #4]
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b930      	cbnz	r0, 800c9c6 <_calloc_r+0x24>
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	b003      	add	sp, #12
 800c9bc:	bd30      	pop	{r4, r5, pc}
 800c9be:	220c      	movs	r2, #12
 800c9c0:	6002      	str	r2, [r0, #0]
 800c9c2:	2500      	movs	r5, #0
 800c9c4:	e7f8      	b.n	800c9b8 <_calloc_r+0x16>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	f7fe f991 	bl	800acee <memset>
 800c9cc:	e7f4      	b.n	800c9b8 <_calloc_r+0x16>

0800c9ce <__ascii_mbtowc>:
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	b901      	cbnz	r1, 800c9d4 <__ascii_mbtowc+0x6>
 800c9d2:	a901      	add	r1, sp, #4
 800c9d4:	b142      	cbz	r2, 800c9e8 <__ascii_mbtowc+0x1a>
 800c9d6:	b14b      	cbz	r3, 800c9ec <__ascii_mbtowc+0x1e>
 800c9d8:	7813      	ldrb	r3, [r2, #0]
 800c9da:	600b      	str	r3, [r1, #0]
 800c9dc:	7812      	ldrb	r2, [r2, #0]
 800c9de:	1e10      	subs	r0, r2, #0
 800c9e0:	bf18      	it	ne
 800c9e2:	2001      	movne	r0, #1
 800c9e4:	b002      	add	sp, #8
 800c9e6:	4770      	bx	lr
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	e7fb      	b.n	800c9e4 <__ascii_mbtowc+0x16>
 800c9ec:	f06f 0001 	mvn.w	r0, #1
 800c9f0:	e7f8      	b.n	800c9e4 <__ascii_mbtowc+0x16>

0800c9f2 <_realloc_r>:
 800c9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	460e      	mov	r6, r1
 800c9fc:	b921      	cbnz	r1, 800ca08 <_realloc_r+0x16>
 800c9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca02:	4611      	mov	r1, r2
 800ca04:	f7ff b96e 	b.w	800bce4 <_malloc_r>
 800ca08:	b92a      	cbnz	r2, 800ca16 <_realloc_r+0x24>
 800ca0a:	f7ff f8f7 	bl	800bbfc <_free_r>
 800ca0e:	4625      	mov	r5, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca16:	f000 fa45 	bl	800cea4 <_malloc_usable_size_r>
 800ca1a:	4284      	cmp	r4, r0
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	d802      	bhi.n	800ca26 <_realloc_r+0x34>
 800ca20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca24:	d812      	bhi.n	800ca4c <_realloc_r+0x5a>
 800ca26:	4621      	mov	r1, r4
 800ca28:	4640      	mov	r0, r8
 800ca2a:	f7ff f95b 	bl	800bce4 <_malloc_r>
 800ca2e:	4605      	mov	r5, r0
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d0ed      	beq.n	800ca10 <_realloc_r+0x1e>
 800ca34:	42bc      	cmp	r4, r7
 800ca36:	4622      	mov	r2, r4
 800ca38:	4631      	mov	r1, r6
 800ca3a:	bf28      	it	cs
 800ca3c:	463a      	movcs	r2, r7
 800ca3e:	f7ff ff9b 	bl	800c978 <memcpy>
 800ca42:	4631      	mov	r1, r6
 800ca44:	4640      	mov	r0, r8
 800ca46:	f7ff f8d9 	bl	800bbfc <_free_r>
 800ca4a:	e7e1      	b.n	800ca10 <_realloc_r+0x1e>
 800ca4c:	4635      	mov	r5, r6
 800ca4e:	e7df      	b.n	800ca10 <_realloc_r+0x1e>

0800ca50 <__ascii_wctomb>:
 800ca50:	b149      	cbz	r1, 800ca66 <__ascii_wctomb+0x16>
 800ca52:	2aff      	cmp	r2, #255	; 0xff
 800ca54:	bf85      	ittet	hi
 800ca56:	238a      	movhi	r3, #138	; 0x8a
 800ca58:	6003      	strhi	r3, [r0, #0]
 800ca5a:	700a      	strbls	r2, [r1, #0]
 800ca5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca60:	bf98      	it	ls
 800ca62:	2001      	movls	r0, #1
 800ca64:	4770      	bx	lr
 800ca66:	4608      	mov	r0, r1
 800ca68:	4770      	bx	lr

0800ca6a <__sfputc_r>:
 800ca6a:	6893      	ldr	r3, [r2, #8]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	b410      	push	{r4}
 800ca72:	6093      	str	r3, [r2, #8]
 800ca74:	da08      	bge.n	800ca88 <__sfputc_r+0x1e>
 800ca76:	6994      	ldr	r4, [r2, #24]
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	db01      	blt.n	800ca80 <__sfputc_r+0x16>
 800ca7c:	290a      	cmp	r1, #10
 800ca7e:	d103      	bne.n	800ca88 <__sfputc_r+0x1e>
 800ca80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca84:	f000 b934 	b.w	800ccf0 <__swbuf_r>
 800ca88:	6813      	ldr	r3, [r2, #0]
 800ca8a:	1c58      	adds	r0, r3, #1
 800ca8c:	6010      	str	r0, [r2, #0]
 800ca8e:	7019      	strb	r1, [r3, #0]
 800ca90:	4608      	mov	r0, r1
 800ca92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <__sfputs_r>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	460f      	mov	r7, r1
 800ca9e:	4614      	mov	r4, r2
 800caa0:	18d5      	adds	r5, r2, r3
 800caa2:	42ac      	cmp	r4, r5
 800caa4:	d101      	bne.n	800caaa <__sfputs_r+0x12>
 800caa6:	2000      	movs	r0, #0
 800caa8:	e007      	b.n	800caba <__sfputs_r+0x22>
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	463a      	mov	r2, r7
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7ff ffda 	bl	800ca6a <__sfputc_r>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	d1f3      	bne.n	800caa2 <__sfputs_r+0xa>
 800caba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cabc <_vfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	460d      	mov	r5, r1
 800cac2:	b09d      	sub	sp, #116	; 0x74
 800cac4:	4614      	mov	r4, r2
 800cac6:	4698      	mov	r8, r3
 800cac8:	4606      	mov	r6, r0
 800caca:	b118      	cbz	r0, 800cad4 <_vfiprintf_r+0x18>
 800cacc:	6a03      	ldr	r3, [r0, #32]
 800cace:	b90b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x18>
 800cad0:	f7fe f874 	bl	800abbc <__sinit>
 800cad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad6:	07d9      	lsls	r1, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_vfiprintf_r+0x2a>
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_vfiprintf_r+0x2a>
 800cae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cae2:	f7fe f9f0 	bl	800aec6 <__retarget_lock_acquire_recursive>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	071b      	lsls	r3, r3, #28
 800caea:	d501      	bpl.n	800caf0 <_vfiprintf_r+0x34>
 800caec:	692b      	ldr	r3, [r5, #16]
 800caee:	b99b      	cbnz	r3, 800cb18 <_vfiprintf_r+0x5c>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f000 f93a 	bl	800cd6c <__swsetup_r>
 800caf8:	b170      	cbz	r0, 800cb18 <_vfiprintf_r+0x5c>
 800cafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafc:	07dc      	lsls	r4, r3, #31
 800cafe:	d504      	bpl.n	800cb0a <_vfiprintf_r+0x4e>
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	b01d      	add	sp, #116	; 0x74
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	0598      	lsls	r0, r3, #22
 800cb0e:	d4f7      	bmi.n	800cb00 <_vfiprintf_r+0x44>
 800cb10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb12:	f7fe f9d9 	bl	800aec8 <__retarget_lock_release_recursive>
 800cb16:	e7f3      	b.n	800cb00 <_vfiprintf_r+0x44>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb22:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb26:	2330      	movs	r3, #48	; 0x30
 800cb28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ccdc <_vfiprintf_r+0x220>
 800cb2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb30:	f04f 0901 	mov.w	r9, #1
 800cb34:	4623      	mov	r3, r4
 800cb36:	469a      	mov	sl, r3
 800cb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb3c:	b10a      	cbz	r2, 800cb42 <_vfiprintf_r+0x86>
 800cb3e:	2a25      	cmp	r2, #37	; 0x25
 800cb40:	d1f9      	bne.n	800cb36 <_vfiprintf_r+0x7a>
 800cb42:	ebba 0b04 	subs.w	fp, sl, r4
 800cb46:	d00b      	beq.n	800cb60 <_vfiprintf_r+0xa4>
 800cb48:	465b      	mov	r3, fp
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f7ff ffa2 	bl	800ca98 <__sfputs_r>
 800cb54:	3001      	adds	r0, #1
 800cb56:	f000 80a9 	beq.w	800ccac <_vfiprintf_r+0x1f0>
 800cb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb5c:	445a      	add	r2, fp
 800cb5e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb60:	f89a 3000 	ldrb.w	r3, [sl]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 80a1 	beq.w	800ccac <_vfiprintf_r+0x1f0>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb74:	f10a 0a01 	add.w	sl, sl, #1
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	9307      	str	r3, [sp, #28]
 800cb7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb80:	931a      	str	r3, [sp, #104]	; 0x68
 800cb82:	4654      	mov	r4, sl
 800cb84:	2205      	movs	r2, #5
 800cb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8a:	4854      	ldr	r0, [pc, #336]	; (800ccdc <_vfiprintf_r+0x220>)
 800cb8c:	f7f3 fb20 	bl	80001d0 <memchr>
 800cb90:	9a04      	ldr	r2, [sp, #16]
 800cb92:	b9d8      	cbnz	r0, 800cbcc <_vfiprintf_r+0x110>
 800cb94:	06d1      	lsls	r1, r2, #27
 800cb96:	bf44      	itt	mi
 800cb98:	2320      	movmi	r3, #32
 800cb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb9e:	0713      	lsls	r3, r2, #28
 800cba0:	bf44      	itt	mi
 800cba2:	232b      	movmi	r3, #43	; 0x2b
 800cba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cba8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbac:	2b2a      	cmp	r3, #42	; 0x2a
 800cbae:	d015      	beq.n	800cbdc <_vfiprintf_r+0x120>
 800cbb0:	9a07      	ldr	r2, [sp, #28]
 800cbb2:	4654      	mov	r4, sl
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f04f 0c0a 	mov.w	ip, #10
 800cbba:	4621      	mov	r1, r4
 800cbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbc0:	3b30      	subs	r3, #48	; 0x30
 800cbc2:	2b09      	cmp	r3, #9
 800cbc4:	d94d      	bls.n	800cc62 <_vfiprintf_r+0x1a6>
 800cbc6:	b1b0      	cbz	r0, 800cbf6 <_vfiprintf_r+0x13a>
 800cbc8:	9207      	str	r2, [sp, #28]
 800cbca:	e014      	b.n	800cbf6 <_vfiprintf_r+0x13a>
 800cbcc:	eba0 0308 	sub.w	r3, r0, r8
 800cbd0:	fa09 f303 	lsl.w	r3, r9, r3
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	46a2      	mov	sl, r4
 800cbda:	e7d2      	b.n	800cb82 <_vfiprintf_r+0xc6>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	1d19      	adds	r1, r3, #4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	9103      	str	r1, [sp, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bfbb      	ittet	lt
 800cbe8:	425b      	neglt	r3, r3
 800cbea:	f042 0202 	orrlt.w	r2, r2, #2
 800cbee:	9307      	strge	r3, [sp, #28]
 800cbf0:	9307      	strlt	r3, [sp, #28]
 800cbf2:	bfb8      	it	lt
 800cbf4:	9204      	strlt	r2, [sp, #16]
 800cbf6:	7823      	ldrb	r3, [r4, #0]
 800cbf8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbfa:	d10c      	bne.n	800cc16 <_vfiprintf_r+0x15a>
 800cbfc:	7863      	ldrb	r3, [r4, #1]
 800cbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800cc00:	d134      	bne.n	800cc6c <_vfiprintf_r+0x1b0>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	9203      	str	r2, [sp, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfb8      	it	lt
 800cc0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc12:	3402      	adds	r4, #2
 800cc14:	9305      	str	r3, [sp, #20]
 800cc16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ccec <_vfiprintf_r+0x230>
 800cc1a:	7821      	ldrb	r1, [r4, #0]
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	4650      	mov	r0, sl
 800cc20:	f7f3 fad6 	bl	80001d0 <memchr>
 800cc24:	b138      	cbz	r0, 800cc36 <_vfiprintf_r+0x17a>
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	eba0 000a 	sub.w	r0, r0, sl
 800cc2c:	2240      	movs	r2, #64	; 0x40
 800cc2e:	4082      	lsls	r2, r0
 800cc30:	4313      	orrs	r3, r2
 800cc32:	3401      	adds	r4, #1
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc3a:	4829      	ldr	r0, [pc, #164]	; (800cce0 <_vfiprintf_r+0x224>)
 800cc3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc40:	2206      	movs	r2, #6
 800cc42:	f7f3 fac5 	bl	80001d0 <memchr>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d03f      	beq.n	800ccca <_vfiprintf_r+0x20e>
 800cc4a:	4b26      	ldr	r3, [pc, #152]	; (800cce4 <_vfiprintf_r+0x228>)
 800cc4c:	bb1b      	cbnz	r3, 800cc96 <_vfiprintf_r+0x1da>
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	3307      	adds	r3, #7
 800cc52:	f023 0307 	bic.w	r3, r3, #7
 800cc56:	3308      	adds	r3, #8
 800cc58:	9303      	str	r3, [sp, #12]
 800cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5c:	443b      	add	r3, r7
 800cc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc60:	e768      	b.n	800cb34 <_vfiprintf_r+0x78>
 800cc62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc66:	460c      	mov	r4, r1
 800cc68:	2001      	movs	r0, #1
 800cc6a:	e7a6      	b.n	800cbba <_vfiprintf_r+0xfe>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	3401      	adds	r4, #1
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	4619      	mov	r1, r3
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc7e:	3a30      	subs	r2, #48	; 0x30
 800cc80:	2a09      	cmp	r2, #9
 800cc82:	d903      	bls.n	800cc8c <_vfiprintf_r+0x1d0>
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d0c6      	beq.n	800cc16 <_vfiprintf_r+0x15a>
 800cc88:	9105      	str	r1, [sp, #20]
 800cc8a:	e7c4      	b.n	800cc16 <_vfiprintf_r+0x15a>
 800cc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc90:	4604      	mov	r4, r0
 800cc92:	2301      	movs	r3, #1
 800cc94:	e7f0      	b.n	800cc78 <_vfiprintf_r+0x1bc>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <_vfiprintf_r+0x22c>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7fd fb39 	bl	800a318 <_printf_float>
 800cca6:	4607      	mov	r7, r0
 800cca8:	1c78      	adds	r0, r7, #1
 800ccaa:	d1d6      	bne.n	800cc5a <_vfiprintf_r+0x19e>
 800ccac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccae:	07d9      	lsls	r1, r3, #31
 800ccb0:	d405      	bmi.n	800ccbe <_vfiprintf_r+0x202>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	059a      	lsls	r2, r3, #22
 800ccb6:	d402      	bmi.n	800ccbe <_vfiprintf_r+0x202>
 800ccb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccba:	f7fe f905 	bl	800aec8 <__retarget_lock_release_recursive>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	065b      	lsls	r3, r3, #25
 800ccc2:	f53f af1d 	bmi.w	800cb00 <_vfiprintf_r+0x44>
 800ccc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccc8:	e71c      	b.n	800cb04 <_vfiprintf_r+0x48>
 800ccca:	ab03      	add	r3, sp, #12
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <_vfiprintf_r+0x22c>)
 800ccd2:	a904      	add	r1, sp, #16
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7fd fdc3 	bl	800a860 <_printf_i>
 800ccda:	e7e4      	b.n	800cca6 <_vfiprintf_r+0x1ea>
 800ccdc:	0800d4d4 	.word	0x0800d4d4
 800cce0:	0800d4de 	.word	0x0800d4de
 800cce4:	0800a319 	.word	0x0800a319
 800cce8:	0800ca99 	.word	0x0800ca99
 800ccec:	0800d4da 	.word	0x0800d4da

0800ccf0 <__swbuf_r>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	b118      	cbz	r0, 800cd02 <__swbuf_r+0x12>
 800ccfa:	6a03      	ldr	r3, [r0, #32]
 800ccfc:	b90b      	cbnz	r3, 800cd02 <__swbuf_r+0x12>
 800ccfe:	f7fd ff5d 	bl	800abbc <__sinit>
 800cd02:	69a3      	ldr	r3, [r4, #24]
 800cd04:	60a3      	str	r3, [r4, #8]
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	071a      	lsls	r2, r3, #28
 800cd0a:	d525      	bpl.n	800cd58 <__swbuf_r+0x68>
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	b31b      	cbz	r3, 800cd58 <__swbuf_r+0x68>
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	6922      	ldr	r2, [r4, #16]
 800cd14:	1a98      	subs	r0, r3, r2
 800cd16:	6963      	ldr	r3, [r4, #20]
 800cd18:	b2f6      	uxtb	r6, r6
 800cd1a:	4283      	cmp	r3, r0
 800cd1c:	4637      	mov	r7, r6
 800cd1e:	dc04      	bgt.n	800cd2a <__swbuf_r+0x3a>
 800cd20:	4621      	mov	r1, r4
 800cd22:	4628      	mov	r0, r5
 800cd24:	f7ff fdc4 	bl	800c8b0 <_fflush_r>
 800cd28:	b9e0      	cbnz	r0, 800cd64 <__swbuf_r+0x74>
 800cd2a:	68a3      	ldr	r3, [r4, #8]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	60a3      	str	r3, [r4, #8]
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	6022      	str	r2, [r4, #0]
 800cd36:	701e      	strb	r6, [r3, #0]
 800cd38:	6962      	ldr	r2, [r4, #20]
 800cd3a:	1c43      	adds	r3, r0, #1
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d004      	beq.n	800cd4a <__swbuf_r+0x5a>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	07db      	lsls	r3, r3, #31
 800cd44:	d506      	bpl.n	800cd54 <__swbuf_r+0x64>
 800cd46:	2e0a      	cmp	r6, #10
 800cd48:	d104      	bne.n	800cd54 <__swbuf_r+0x64>
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	f7ff fdaf 	bl	800c8b0 <_fflush_r>
 800cd52:	b938      	cbnz	r0, 800cd64 <__swbuf_r+0x74>
 800cd54:	4638      	mov	r0, r7
 800cd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f000 f806 	bl	800cd6c <__swsetup_r>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d0d5      	beq.n	800cd10 <__swbuf_r+0x20>
 800cd64:	f04f 37ff 	mov.w	r7, #4294967295
 800cd68:	e7f4      	b.n	800cd54 <__swbuf_r+0x64>
	...

0800cd6c <__swsetup_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4b2a      	ldr	r3, [pc, #168]	; (800ce18 <__swsetup_r+0xac>)
 800cd70:	4605      	mov	r5, r0
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	460c      	mov	r4, r1
 800cd76:	b118      	cbz	r0, 800cd80 <__swsetup_r+0x14>
 800cd78:	6a03      	ldr	r3, [r0, #32]
 800cd7a:	b90b      	cbnz	r3, 800cd80 <__swsetup_r+0x14>
 800cd7c:	f7fd ff1e 	bl	800abbc <__sinit>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd86:	0718      	lsls	r0, r3, #28
 800cd88:	d422      	bmi.n	800cdd0 <__swsetup_r+0x64>
 800cd8a:	06d9      	lsls	r1, r3, #27
 800cd8c:	d407      	bmi.n	800cd9e <__swsetup_r+0x32>
 800cd8e:	2309      	movs	r3, #9
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e034      	b.n	800ce08 <__swsetup_r+0x9c>
 800cd9e:	0758      	lsls	r0, r3, #29
 800cda0:	d512      	bpl.n	800cdc8 <__swsetup_r+0x5c>
 800cda2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cda4:	b141      	cbz	r1, 800cdb8 <__swsetup_r+0x4c>
 800cda6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdaa:	4299      	cmp	r1, r3
 800cdac:	d002      	beq.n	800cdb4 <__swsetup_r+0x48>
 800cdae:	4628      	mov	r0, r5
 800cdb0:	f7fe ff24 	bl	800bbfc <_free_r>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	6363      	str	r3, [r4, #52]	; 0x34
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	6023      	str	r3, [r4, #0]
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f043 0308 	orr.w	r3, r3, #8
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	b94b      	cbnz	r3, 800cde8 <__swsetup_r+0x7c>
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdde:	d003      	beq.n	800cde8 <__swsetup_r+0x7c>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4628      	mov	r0, r5
 800cde4:	f000 f88c 	bl	800cf00 <__smakebuf_r>
 800cde8:	89a0      	ldrh	r0, [r4, #12]
 800cdea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdee:	f010 0301 	ands.w	r3, r0, #1
 800cdf2:	d00a      	beq.n	800ce0a <__swsetup_r+0x9e>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	60a3      	str	r3, [r4, #8]
 800cdf8:	6963      	ldr	r3, [r4, #20]
 800cdfa:	425b      	negs	r3, r3
 800cdfc:	61a3      	str	r3, [r4, #24]
 800cdfe:	6923      	ldr	r3, [r4, #16]
 800ce00:	b943      	cbnz	r3, 800ce14 <__swsetup_r+0xa8>
 800ce02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce06:	d1c4      	bne.n	800cd92 <__swsetup_r+0x26>
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	0781      	lsls	r1, r0, #30
 800ce0c:	bf58      	it	pl
 800ce0e:	6963      	ldrpl	r3, [r4, #20]
 800ce10:	60a3      	str	r3, [r4, #8]
 800ce12:	e7f4      	b.n	800cdfe <__swsetup_r+0x92>
 800ce14:	2000      	movs	r0, #0
 800ce16:	e7f7      	b.n	800ce08 <__swsetup_r+0x9c>
 800ce18:	20000064 	.word	0x20000064

0800ce1c <_raise_r>:
 800ce1c:	291f      	cmp	r1, #31
 800ce1e:	b538      	push	{r3, r4, r5, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	460d      	mov	r5, r1
 800ce24:	d904      	bls.n	800ce30 <_raise_r+0x14>
 800ce26:	2316      	movs	r3, #22
 800ce28:	6003      	str	r3, [r0, #0]
 800ce2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce32:	b112      	cbz	r2, 800ce3a <_raise_r+0x1e>
 800ce34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce38:	b94b      	cbnz	r3, 800ce4e <_raise_r+0x32>
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 f830 	bl	800cea0 <_getpid_r>
 800ce40:	462a      	mov	r2, r5
 800ce42:	4601      	mov	r1, r0
 800ce44:	4620      	mov	r0, r4
 800ce46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce4a:	f000 b817 	b.w	800ce7c <_kill_r>
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d00a      	beq.n	800ce68 <_raise_r+0x4c>
 800ce52:	1c59      	adds	r1, r3, #1
 800ce54:	d103      	bne.n	800ce5e <_raise_r+0x42>
 800ce56:	2316      	movs	r3, #22
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	e7e7      	b.n	800ce2e <_raise_r+0x12>
 800ce5e:	2400      	movs	r4, #0
 800ce60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce64:	4628      	mov	r0, r5
 800ce66:	4798      	blx	r3
 800ce68:	2000      	movs	r0, #0
 800ce6a:	e7e0      	b.n	800ce2e <_raise_r+0x12>

0800ce6c <raise>:
 800ce6c:	4b02      	ldr	r3, [pc, #8]	; (800ce78 <raise+0xc>)
 800ce6e:	4601      	mov	r1, r0
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	f7ff bfd3 	b.w	800ce1c <_raise_r>
 800ce76:	bf00      	nop
 800ce78:	20000064 	.word	0x20000064

0800ce7c <_kill_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	4d07      	ldr	r5, [pc, #28]	; (800ce9c <_kill_r+0x20>)
 800ce80:	2300      	movs	r3, #0
 800ce82:	4604      	mov	r4, r0
 800ce84:	4608      	mov	r0, r1
 800ce86:	4611      	mov	r1, r2
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	f7f6 f8c5 	bl	8003018 <_kill>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	d102      	bne.n	800ce98 <_kill_r+0x1c>
 800ce92:	682b      	ldr	r3, [r5, #0]
 800ce94:	b103      	cbz	r3, 800ce98 <_kill_r+0x1c>
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	bd38      	pop	{r3, r4, r5, pc}
 800ce9a:	bf00      	nop
 800ce9c:	200019e8 	.word	0x200019e8

0800cea0 <_getpid_r>:
 800cea0:	f7f6 b8b2 	b.w	8003008 <_getpid>

0800cea4 <_malloc_usable_size_r>:
 800cea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea8:	1f18      	subs	r0, r3, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bfbc      	itt	lt
 800ceae:	580b      	ldrlt	r3, [r1, r0]
 800ceb0:	18c0      	addlt	r0, r0, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <__swhatbuf_r>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebc:	2900      	cmp	r1, #0
 800cebe:	b096      	sub	sp, #88	; 0x58
 800cec0:	4615      	mov	r5, r2
 800cec2:	461e      	mov	r6, r3
 800cec4:	da0d      	bge.n	800cee2 <__swhatbuf_r+0x2e>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cecc:	f04f 0100 	mov.w	r1, #0
 800ced0:	bf0c      	ite	eq
 800ced2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ced6:	2340      	movne	r3, #64	; 0x40
 800ced8:	2000      	movs	r0, #0
 800ceda:	6031      	str	r1, [r6, #0]
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	b016      	add	sp, #88	; 0x58
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	466a      	mov	r2, sp
 800cee4:	f000 f848 	bl	800cf78 <_fstat_r>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	dbec      	blt.n	800cec6 <__swhatbuf_r+0x12>
 800ceec:	9901      	ldr	r1, [sp, #4]
 800ceee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cef2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cef6:	4259      	negs	r1, r3
 800cef8:	4159      	adcs	r1, r3
 800cefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cefe:	e7eb      	b.n	800ced8 <__swhatbuf_r+0x24>

0800cf00 <__smakebuf_r>:
 800cf00:	898b      	ldrh	r3, [r1, #12]
 800cf02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf04:	079d      	lsls	r5, r3, #30
 800cf06:	4606      	mov	r6, r0
 800cf08:	460c      	mov	r4, r1
 800cf0a:	d507      	bpl.n	800cf1c <__smakebuf_r+0x1c>
 800cf0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	6123      	str	r3, [r4, #16]
 800cf14:	2301      	movs	r3, #1
 800cf16:	6163      	str	r3, [r4, #20]
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	ab01      	add	r3, sp, #4
 800cf1e:	466a      	mov	r2, sp
 800cf20:	f7ff ffc8 	bl	800ceb4 <__swhatbuf_r>
 800cf24:	9900      	ldr	r1, [sp, #0]
 800cf26:	4605      	mov	r5, r0
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7fe fedb 	bl	800bce4 <_malloc_r>
 800cf2e:	b948      	cbnz	r0, 800cf44 <__smakebuf_r+0x44>
 800cf30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf34:	059a      	lsls	r2, r3, #22
 800cf36:	d4ef      	bmi.n	800cf18 <__smakebuf_r+0x18>
 800cf38:	f023 0303 	bic.w	r3, r3, #3
 800cf3c:	f043 0302 	orr.w	r3, r3, #2
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	e7e3      	b.n	800cf0c <__smakebuf_r+0xc>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	6163      	str	r3, [r4, #20]
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	6120      	str	r0, [r4, #16]
 800cf56:	b15b      	cbz	r3, 800cf70 <__smakebuf_r+0x70>
 800cf58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f000 f81d 	bl	800cf9c <_isatty_r>
 800cf62:	b128      	cbz	r0, 800cf70 <__smakebuf_r+0x70>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f023 0303 	bic.w	r3, r3, #3
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	431d      	orrs	r5, r3
 800cf74:	81a5      	strh	r5, [r4, #12]
 800cf76:	e7cf      	b.n	800cf18 <__smakebuf_r+0x18>

0800cf78 <_fstat_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d07      	ldr	r5, [pc, #28]	; (800cf98 <_fstat_r+0x20>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	4611      	mov	r1, r2
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f7f6 f8a6 	bl	80030d6 <_fstat>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	d102      	bne.n	800cf94 <_fstat_r+0x1c>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	b103      	cbz	r3, 800cf94 <_fstat_r+0x1c>
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop
 800cf98:	200019e8 	.word	0x200019e8

0800cf9c <_isatty_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4d06      	ldr	r5, [pc, #24]	; (800cfb8 <_isatty_r+0x1c>)
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	4608      	mov	r0, r1
 800cfa6:	602b      	str	r3, [r5, #0]
 800cfa8:	f7f6 f8a5 	bl	80030f6 <_isatty>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d102      	bne.n	800cfb6 <_isatty_r+0x1a>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	b103      	cbz	r3, 800cfb6 <_isatty_r+0x1a>
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	200019e8 	.word	0x200019e8

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr
